{
	"id": "7ef2aabd753280ce50867979d4fe681f",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"evmVersion": "byzantium",
			"viaIR": true
		},
		"sources": {
			"contracts/fountain.sol": {
				"content": "// SPDX-License-Identifier: Proprietary\n\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"./weth.sol\";\n\ncontract Serenity is Ownable, Pausable, ReentrancyGuard {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    // mainnet | 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\n    // polygon | 0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270\n    IWETH public immutable WETH9;\n\n    // mainnet | 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\n    // polygon | 0x2791bca1f2de4661ed88a30c99a7a9449aa84174\n    IERC20 public immutable USDC;\n    \n    // create2 ensures the same address on all available networks\n    // mainnet | 0xE592427A0AEce92De3Edee1F18E0157C05861564\n    // polygon | 0xE592427A0AEce92De3Edee1F18E0157C05861564\n    ISwapRouter public immutable swapRouter;\n\n    uint256 ephemeralGasMoneyAmount;\n    \n    mapping (address => uint256) private balances;\n\n    mapping (string => address) private charities;\n    mapping (address => string) private charitiesReverse;\n    EnumerableSet.AddressSet private charityAddresses;\n\n    event FountainDeposit(\n        address indexed donor, \n        address indexed ephemeralWallet, \n        address indexed tokenIn, \n        uint256 tokenAmountIn,\n        uint256 gasOut,\n        uint256 usdcOut\n    );\n\n    event FountainDonation(\n        address indexed donor, \n        string indexed charity, \n        address indexed charityAddress, \n        uint256 usdcAmount\n    );\n\n    event FountainFinalization(\n        address indexed donor,\n        uint256 usdcAmount\n    );\n\n    constructor(ISwapRouter _swapRouter, uint256 _ephemeralGasMoneyAmount, IWETH _weth9, IERC20 _usdc) {\n        swapRouter = _swapRouter;\n        ephemeralGasMoneyAmount = _ephemeralGasMoneyAmount;\n        WETH9 = _weth9;\n        USDC = _usdc;\n    }\n\n    function deposit(\n        // params unrelated to swap\n        address ephemeralWalletAddress,\n        // shared swap params\n        address tokenIn,\n        uint256 totalAmountIn, \n        uint256 deadline,\n        // eth swap params\n        uint256 ethSwapAmountInMax,\n        uint24 ethSwapPoolFee,\n        // usdc swap params\n        uint24 usdcSwapPoolFee,\n        uint256 usdcSwapAmountOutMinimum\n        ) public whenNotPaused nonReentrant {\n\n        // Transfer the specified amount of token to this contract.\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, address(this), totalAmountIn);\n        \n        // Approve router to spend totalAmountIn from this contract\n        TransferHelper.safeApprove(tokenIn, address(swapRouter), totalAmountIn);\n\n        // Construct \"exact output\" swap params to get some gas moneys.\n        ISwapRouter.ExactOutputSingleParams memory ethSwapParams =\n            ISwapRouter.ExactOutputSingleParams({\n                tokenIn: tokenIn,\n                tokenOut: address(WETH9),\n                fee: ethSwapPoolFee,\n                recipient: address(this),\n                deadline: deadline,\n                amountOut: ephemeralGasMoneyAmount,\n                amountInMaximum: ethSwapAmountInMax,\n                // inactive, but this value can be used to set the limit for the price the swap will push the pool to,\n                // which can help protect against price impact or for setting up logic in a variety of price-relevant mechanisms.\n                sqrtPriceLimitX96: 0\n            });\n\n        // Executes the gas money swap returning the amountIn needed to spend to receive the desired amountOut.\n        uint256 tokenAmountSpentOnEthSwap = swapRouter.exactOutputSingle(ethSwapParams);\n\n        // Unwrap WETH9\n        WETH9.withdraw(ephemeralGasMoneyAmount);\n\n        // Send to ephemeralGasMoneyAmount to ephemeral wallet\n        (bool ephemeralGasSent, ) = payable(ephemeralWalletAddress).call{value: ephemeralGasMoneyAmount}(\"\");\n        require(ephemeralGasSent, \"Failed to send gas to ephemeral wallet.\");\n\n        // Calculate remaining amount of token to swap for USDC\n        uint256 remainingAmountIn = totalAmountIn - tokenAmountSpentOnEthSwap;\n        \n        // Create params to swap remaining token amount for USDC\n        ISwapRouter.ExactInputSingleParams memory params =\n            ISwapRouter.ExactInputSingleParams({\n                tokenIn: tokenIn,\n                tokenOut: address(USDC),\n                fee: usdcSwapPoolFee,\n                recipient: address(this),\n                deadline: deadline,\n                amountIn: remainingAmountIn,\n                amountOutMinimum: usdcSwapAmountOutMinimum,\n                // inactive, but this value can be used to set the limit for the price the swap will push the pool to,\n                // which can help protect against price impact or for setting up logic in a variety of price-relevant mechanisms.\n                sqrtPriceLimitX96: 0 \n            });\n\n        // How much USDC we got\n        uint256 amountOut = swapRouter.exactInputSingle(params); \n        \n        balances[ephemeralWalletAddress] += amountOut;\n        \n        emit FountainDeposit(msg.sender, ephemeralWalletAddress, tokenIn, totalAmountIn, ephemeralGasMoneyAmount, amountOut);\n    }\n\n    // invariants:\n    //  * params\n    //      - user == msg.sender || msg.sender == owner()\n    //  * begin:\n    //      - balances[msg.sender] == 0\n    //  * end:\n    //      - balances[msg.sender] == 0\n    function finalize(\n        address user, \n        string[] memory charities_, \n        uint256[] memory amounts_\n        ) public whenNotPaused nonReentrant {\n        require(msg.sender == user || msg.sender == owner(), \"Unauthorization finalization.\");\n        require(charities_.length == amounts_.length, \"Charities and amounts arrays of different length.\");\n\n        uint256 totalUserAllocation = 0;\n        for (uint8 i = 0; i < charities_.length; i++) {\n            totalUserAllocation += amounts_[i];\n            require(charities[charities_[i]] != address(0x0), \"Attempt to donate to unknown charity.\");\n        }\n\n        require(totalUserAllocation <= balances[user], \"Total finalization amount too high\");\n\n        uint256 totalDonated = 0;\n        for (uint8 i = 0; i < charities_.length; i++) { \n            // amounts_[i]                          | user-requested donation amount to this charity \n            // balances[user] - totalUserAllocation | remaining amount after summing up all user-requested donations\n            // amounts_[i] / totalUserAllocation    | ratio of user donation sent to this charity\n            uint256 transferAmount = amounts_[i] + (balances[user] - totalUserAllocation) * (amounts_[i] / totalUserAllocation);\n\n            // fix any uint math rounding errors by sending entire remaining amount to last charity\n            if (i == charities_.length - 1) {\n                transferAmount = balances[user] - totalDonated;\n            }\n            \n            bool transferSuccess = USDC.transfer(charities[charities_[i]], transferAmount);\n            require(transferSuccess, \"USDC transfer to charity failed.\");\n            emit FountainDonation(user, charities_[i], charities[charities_[i]], transferAmount);\n\n            totalDonated += transferAmount;\n        }\n\n        require(totalDonated == balances[user], \"Must finalize entire balance\");\n    }\n\n    function registerCharity(string memory charityName, address charityAddress) public {\n        require(charities[charityName] == address(0x0), \"Charity name already registered.\");\n        require(bytes(charitiesReverse[charityAddress]).length == 0, \"Charity address already registered.\");\n        charities[charityName] = charityAddress;\n        charityAddresses.add(charityAddress);\n    }\n\n\n\n    function getBalance(address user) public view returns (uint256 userBalance_) {\n        userBalance_ = balances[user];\n    }\n}"
			},
			"contracts/weth.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256 amount) external;\n}"
			},
			"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"
			},
			"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/security/Pausable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/Pausable.sol": {
				"Pausable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.",
						"events": {
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract in unpaused state."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"paused()": "5c975abb"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract in unpaused state.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/Pausable.sol\":\"Pausable\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ddabb16009cd17eaca3143feadf450ac13e72919ebe2ca50e00f61cb78bc004\",\"dweb:/ipfs/QmSPwPxX7d6TTWakN5jy5wsaGkS1y9TW8fuhGSraMkLk2B\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "@openzeppelin/contracts/security/Pausable.sol:Pausable",
								"label": "_paused",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 231,
								"contract": "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
				"EnumerableSet": {
					"abi": [],
					"devdoc": {
						"details": "Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ====  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1228:12682  library EnumerableSet {... */\n  mstore(0x40, 0x80)\n  jumpi(tag_1, iszero(callvalue))\n  0x00\n  dup1\n  revert\ntag_1:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x80\n  codecopy\n  address\n  0x80\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  dup1\n  0x80\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1228:12682  library EnumerableSet {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa36469706673582212205fb29fc6e277b5226f54bcbe8f4481d197a6d685eaf8c9f0dde5ff0cfbd8b0d06c6578706572696d656e74616cf564736f6c63430008070041\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60806040523415600e57600080fd5b604d8060216080393060805050806080f3fe6080604052600080fdfea36469706673582212205fb29fc6e277b5226f54bcbe8f4481d197a6d685eaf8c9f0dde5ff0cfbd8b0d06c6578706572696d656e74616cf564736f6c63430008070041",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH1 0xE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4D DUP1 PUSH1 0x21 PUSH1 0x80 CODECOPY ADDRESS PUSH1 0x80 POP POP DUP1 PUSH1 0x80 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5F 0xB2 SWAP16 0xC6 0xE2 PUSH24 0xB5226F54BCBE8F4481D197A6D685EAF8C9F0DDE5FF0CFBD8 0xB0 0xD0 PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP COINBASE ",
							"sourceMap": "1228:11454:5:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600080fdfea36469706673582212205fb29fc6e277b5226f54bcbe8f4481d197a6d685eaf8c9f0dde5ff0cfbd8b0d06c6578706572696d656e74616cf564736f6c63430008070041",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5F 0xB2 SWAP16 0xC6 0xE2 PUSH24 0xB5226F54BCBE8F4481D197A6D685EAF8C9F0DDE5FF0CFBD8 0xB0 0xD0 PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP COINBASE ",
							"sourceMap": "1228:11454:5:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "15400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"_add(struct EnumerableSet.Set storage pointer,bytes32)": "infinite",
								"_at(struct EnumerableSet.Set storage pointer,uint256)": "infinite",
								"_contains(struct EnumerableSet.Set storage pointer,bytes32)": "infinite",
								"_length(struct EnumerableSet.Set storage pointer)": "infinite",
								"_remove(struct EnumerableSet.Set storage pointer,bytes32)": "infinite",
								"_values(struct EnumerableSet.Set storage pointer)": "infinite",
								"add(struct EnumerableSet.AddressSet storage pointer,address)": "infinite",
								"add(struct EnumerableSet.Bytes32Set storage pointer,bytes32)": "infinite",
								"add(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"at(struct EnumerableSet.AddressSet storage pointer,uint256)": "infinite",
								"at(struct EnumerableSet.Bytes32Set storage pointer,uint256)": "infinite",
								"at(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"contains(struct EnumerableSet.AddressSet storage pointer,address)": "infinite",
								"contains(struct EnumerableSet.Bytes32Set storage pointer,bytes32)": "infinite",
								"contains(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"length(struct EnumerableSet.AddressSet storage pointer)": "infinite",
								"length(struct EnumerableSet.Bytes32Set storage pointer)": "infinite",
								"length(struct EnumerableSet.UintSet storage pointer)": "infinite",
								"remove(struct EnumerableSet.AddressSet storage pointer,address)": "infinite",
								"remove(struct EnumerableSet.Bytes32Set storage pointer,bytes32)": "infinite",
								"remove(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"values(struct EnumerableSet.AddressSet storage pointer)": "infinite",
								"values(struct EnumerableSet.Bytes32Set storage pointer)": "infinite",
								"values(struct EnumerableSet.UintSet storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1228,
									"end": 12682,
									"name": "PUSH",
									"source": 5,
									"value": "80"
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "CALLVALUE",
									"source": 5
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "PUSH",
									"source": 5,
									"value": "80"
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "PUSH",
									"source": 5,
									"value": "80"
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "ASSIGNIMMUTABLE",
									"source": 5,
									"value": "library_deploy_address"
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "PUSH",
									"source": 5,
									"value": "80"
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a36469706673582212205fb29fc6e277b5226f54bcbe8f4481d197a6d685eaf8c9f0dde5ff0cfbd8b0d06c6578706572696d656e74616cf564736f6c63430008070041",
									".code": [
										{
											"begin": 1228,
											"end": 12682,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 1228,
											"end": 12682,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1228,
											"end": 12682,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1228,
											"end": 12682,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1228,
											"end": 12682,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1228,
											"end": 12682,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ====  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d4831d777a29ebdf9f2caecd70e74b97bff1b70e53622fd0a02aed01e21c8271\",\"dweb:/ipfs/QmUqurVVnCc7XkMxb2k23TVQUtuhHZduJ3hTZarTJrqU24\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
				"IUniswapV3SwapCallback": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							}
						},
						"title": "Callback for IUniswapV3PoolActions#swap",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Callback for IUniswapV3PoolActions#swap\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Any contract that calls IUniswapV3PoolActions#swap must implement this interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":\"IUniswapV3SwapCallback\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							}
						},
						"notice": "Any contract that calls IUniswapV3PoolActions#swap must implement this interface",
						"version": 1
					}
				}
			},
			"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
				"ISwapRouter": {
					"abi": [
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes",
											"name": "path",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountIn",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOutMinimum",
											"type": "uint256"
										}
									],
									"internalType": "struct ISwapRouter.ExactInputParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactInput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountIn",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOutMinimum",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceLimitX96",
											"type": "uint160"
										}
									],
									"internalType": "struct ISwapRouter.ExactInputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactInputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes",
											"name": "path",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOut",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountInMaximum",
											"type": "uint256"
										}
									],
									"internalType": "struct ISwapRouter.ExactOutputParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactOutput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOut",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountInMaximum",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceLimitX96",
											"type": "uint160"
										}
									],
									"internalType": "struct ISwapRouter.ExactOutputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactOutputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"exactInput((bytes,address,uint256,uint256,uint256))": {
								"params": {
									"params": "The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"params": {
									"params": "The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"exactOutput((bytes,address,uint256,uint256,uint256))": {
								"params": {
									"params": "The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata"
								},
								"returns": {
									"amountIn": "The amount of the input token"
								}
							},
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"params": {
									"params": "The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata"
								},
								"returns": {
									"amountIn": "The amount of the input token"
								}
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							}
						},
						"title": "Router token swapping functionality",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"exactInput((bytes,address,uint256,uint256,uint256))": "c04b8d59",
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": "414bf389",
							"exactOutput((bytes,address,uint256,uint256,uint256))": "f28c0498",
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": "db3e2198",
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactOutputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Router token swapping functionality\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another along the specified path\"},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another token\"},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\"},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another token\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Functions for swapping tokens via Uniswap V3\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":\"ISwapRouter\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a8a2c3e55965b61bcd91993d8e1d5d34b8b8a63e0fdfce87a85f6af92526fd53\",\"dweb:/ipfs/QmQj2CSCSwqDSU4KMNWxGsN2336Cy64WgpV1X1EHXNZWxM\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"exactInput((bytes,address,uint256,uint256,uint256))": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another along the specified path"
							},
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another token"
							},
							"exactOutput((bytes,address,uint256,uint256,uint256))": {
								"notice": "Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)"
							},
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"notice": "Swaps as little as possible of one token for `amountOut` of another token"
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							}
						},
						"notice": "Functions for swapping tokens via Uniswap V3",
						"version": 1
					}
				}
			},
			"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol": {
				"TransferHelper": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":129:2537  library TransferHelper {... */\n  mstore(0x40, 0x80)\n  jumpi(tag_1, iszero(callvalue))\n  0x00\n  dup1\n  revert\ntag_1:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x80\n  codecopy\n  address\n  0x80\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  dup1\n  0x80\n  return\nstop\n\nsub_0: assembly {\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":129:2537  library TransferHelper {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa3646970667358221220cef0699676f1bb82bf37325669cc19a45719335e91bfe9e169b6a65f3037b54c6c6578706572696d656e74616cf564736f6c63430008070041\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60806040523415600e57600080fd5b604d8060216080393060805050806080f3fe6080604052600080fdfea3646970667358221220cef0699676f1bb82bf37325669cc19a45719335e91bfe9e169b6a65f3037b54c6c6578706572696d656e74616cf564736f6c63430008070041",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH1 0xE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4D DUP1 PUSH1 0x21 PUSH1 0x80 CODECOPY ADDRESS PUSH1 0x80 POP POP DUP1 PUSH1 0x80 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCE CREATE PUSH10 0x9676F1BB82BF37325669 0xCC NOT LOG4 JUMPI NOT CALLER 0x5E SWAP2 0xBF 0xE9 0xE1 PUSH10 0xB6A65F3037B54C6C6578 PUSH17 0x6572696D656E74616CF564736F6C634300 ADDMOD SMOD STOP COINBASE ",
							"sourceMap": "129:2408:8:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600080fdfea3646970667358221220cef0699676f1bb82bf37325669cc19a45719335e91bfe9e169b6a65f3037b54c6c6578706572696d656e74616cf564736f6c63430008070041",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCE CREATE PUSH10 0x9676F1BB82BF37325669 0xCC NOT LOG4 JUMPI NOT CALLER 0x5E SWAP2 0xBF 0xE9 0xE1 PUSH10 0xB6A65F3037B54C6C6578 PUSH17 0x6572696D656E74616CF564736F6C634300 ADDMOD SMOD STOP COINBASE ",
							"sourceMap": "129:2408:8:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "15400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"safeApprove(address,address,uint256)": "infinite",
								"safeTransfer(address,address,uint256)": "infinite",
								"safeTransferETH(address,uint256)": "infinite",
								"safeTransferFrom(address,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 8,
									"value": "80"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "CALLVALUE",
									"source": 8
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 8,
									"value": "80"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 8,
									"value": "80"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "ASSIGNIMMUTABLE",
									"source": 8,
									"value": "library_deploy_address"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 8,
									"value": "80"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a3646970667358221220cef0699676f1bb82bf37325669cc19a45719335e91bfe9e169b6a65f3037b54c6c6578706572696d656e74616cf564736f6c63430008070041",
									".code": [
										{
											"begin": 129,
											"end": 2537,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":\"TransferHelper\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://da1d1e81e5bf534f0bf2934b3193db6cb1933f91ec006d2b88e9ad10a617a2d2\",\"dweb:/ipfs/QmcPBk47QLMFWcX2y2S9eMFsJgoYWBd3R8ey55Bgmv6w6v\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/fountain.sol": {
				"Serenity": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "contract ISwapRouter",
									"name": "_swapRouter",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_ephemeralGasMoneyAmount",
									"type": "uint256"
								},
								{
									"internalType": "contract IWETH",
									"name": "_weth9",
									"type": "address"
								},
								{
									"internalType": "contract IERC20",
									"name": "_usdc",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "donor",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "ephemeralWallet",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenIn",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokenAmountIn",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "gasOut",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "usdcOut",
									"type": "uint256"
								}
							],
							"name": "FountainDeposit",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "donor",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "string",
									"name": "charity",
									"type": "string"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "charityAddress",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "usdcAmount",
									"type": "uint256"
								}
							],
							"name": "FountainDonation",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "donor",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "usdcAmount",
									"type": "uint256"
								}
							],
							"name": "FountainFinalization",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "USDC",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "contract IWETH",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "ephemeralWalletAddress",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenIn",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "totalAmountIn",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "ethSwapAmountInMax",
									"type": "uint256"
								},
								{
									"internalType": "uint24",
									"name": "ethSwapPoolFee",
									"type": "uint24"
								},
								{
									"internalType": "uint24",
									"name": "usdcSwapPoolFee",
									"type": "uint24"
								},
								{
									"internalType": "uint256",
									"name": "usdcSwapAmountOutMinimum",
									"type": "uint256"
								}
							],
							"name": "deposit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "string[]",
									"name": "charities_",
									"type": "string[]"
								},
								{
									"internalType": "uint256[]",
									"name": "amounts_",
									"type": "uint256[]"
								}
							],
							"name": "finalize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "getBalance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "userBalance_",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "charityName",
									"type": "string"
								},
								{
									"internalType": "address",
									"name": "charityAddress",
									"type": "address"
								}
							],
							"name": "registerCharity",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "swapRouter",
							"outputs": [
								{
									"internalType": "contract ISwapRouter",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n  mstore(0x40, 0xe0)\n  jumpi(tag_1, iszero(callvalue))\n  0x00\n  dup1\n  revert\ntag_1:\n  bytecodeSize\n  dup1\n  codesize\n  sub\n  not(0x1f)\n  0x1f\n  dup3\n  add\n  and\n  0xe0\n  add\n  0xe0\n  dup2\n  lt\n  0xffffffffffffffff\n  dup3\n  gt\n  or\n  iszero\n  tag_2\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x41)\n  revert(0x00, 0x24)\ntag_2:\n  0x40\n  mstore\n  dup1\n  dup3\n  0xe0\n  codecopy\n  0x80\n  dup2\n  slt\n  iszero\n  tag_3\n  jumpi\n  0x00\n  dup1\n  revert\ntag_3:\n  pop\n  pop\n  mload(0xe0)\n  tag_4\n  dup2\n  tag_5\n  jump\t// in\ntag_4:\n  mload(0x0100)\n  mload(0x0120)\n  tag_6\n  dup2\n  tag_5\n  jump\t// in\ntag_6:\n  mload(0x0140)\n  tag_7\n  dup2\n  tag_5\n  jump\t// in\ntag_7:\n  tag_8\n  dup2\n  dup4\n  dup6\n  dup8\n  tag_9\n  jump\t// in\ntag_8:\n  pop\n  pop\n  pop\n  pop\n  mload(0x40)\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  dup4\n  codecopy\n  mload(0x80)\n  dup3\n  assignImmutable(\"0x34098433846a9bd0a86140a033abb24fa6dec3400ab42534fa886dfeed6a6087\")\n  mload(0xa0)\n  dup3\n  assignImmutable(\"0x3e53e6caa3d9267e13a0317305a21727fdeb46c2d5adc9160409eaa6e5fb3b60\")\n  mload(0xc0)\n  dup3\n  assignImmutable(\"0xa89dab98646eeeb3665d545d51c6146ef2fb7643427936d0df6806075707fbb6\")\n  dup1\n  dup3\n  return\n    /* \"contracts/fountain.sol\":1942:2188  constructor(ISwapRouter _swapRouter, uint256 _ephemeralGasMoneyAmount, IWETH _weth9, IERC20 _usdc) {... */\ntag_9:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  0x00\n    /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n  dup1\n  sload\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n  not(sub(exp(0x02, 0xa0), 0x01))\n    /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n  dup3\n  and\n  dup2\n  or\n  dup4\n  sstore\n  mload(0x40)\n  swap2\n  swap3\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  swap1\n  swap2\n  sub(exp(0x02, 0xa0), 0x01)\n    /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n  dup5\n  and\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap2\n  log3\n  not(sub(exp(0x02, 0xa8), 0x01))\n    /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n  and\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n  not(mul(0xff, exp(0x02, 0xa0)))\n    /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n  and\n  or\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  0x00\n    /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n  sstore\n  0x01\n  dup1\n  sstore\n    /* \"contracts/fountain.sol\":2051:2075  swapRouter = _swapRouter */\n  0xc0\n  mstore\n    /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n  0x02\n  sstore\n    /* \"contracts/fountain.sol\":2145:2159  WETH9 = _weth9 */\n  0x80\n  mstore\n    /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n  0xa0\n    /* \"contracts/fountain.sol\":2169:2181  USDC = _usdc */\n  mstore\n    /* \"contracts/fountain.sol\":1942:2188  constructor(ISwapRouter _swapRouter, uint256 _ephemeralGasMoneyAmount, IWETH _weth9, IERC20 _usdc) {... */\n  jump\t// out\n    /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\ntag_5:\n  sub(exp(0x02, 0xa0), 0x01)\n  dup2\n  and\n  dup2\n  eq\n  tag_13\n  jumpi\n  0x00\n  dup1\n  revert\ntag_13:\n  pop\n  jump\t// out\nstop\n\nsub_0: assembly {\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x40\n      0x80\n      dup2\n      mstore\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      0x00\n      0x0100000000000000000000000000000000000000000000000000000000\n      dup2\n      calldataload\n      div\n      0x480a6fdc\n      dup2\n      eq\n      tag_3\n      jumpi\n      0x4aa4a4fc\n      dup2\n      eq\n      tag_4\n      jumpi\n      0x5c975abb\n      dup2\n      eq\n      tag_5\n      jumpi\n      0x715018a6\n      dup2\n      eq\n      tag_6\n      jumpi\n      0x745284ce\n      dup2\n      eq\n      tag_7\n      jumpi\n      0x7aed7746\n      dup2\n      eq\n      tag_8\n      jumpi\n      0x89a30271\n      dup2\n      eq\n      tag_9\n      jumpi\n      0x8da5cb5b\n      dup2\n      eq\n      tag_10\n      jumpi\n      0xc31c9c07\n      dup2\n      eq\n      tag_11\n      jumpi\n      0xf2fde38b\n      dup2\n      eq\n      tag_12\n      jumpi\n      0xf8b2cb4f\n      dup2\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_3:\n      jumpi(tag_14, iszero(callvalue))\n      dup2\n      dup3\n      revert\n    tag_14:\n      tag_15\n      calldatasize\n      tag_16\n      jump\t// in\n    tag_15:\n        /* \"contracts/fountain.sol\":2194:5505  function deposit(... */\n      tag_17\n      dup2\n      dup4\n      dup6\n      dup8\n      dup10\n      dup12\n      dup14\n      dup16\n      tag_18\n      jump\t// in\n    tag_17:\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup2\n      dup4\n      mload\n      return\n    tag_4:\n      jumpi(tag_19, iszero(callvalue))\n      dup2\n      dup3\n      revert\n    tag_19:\n      tag_20\n      calldatasize\n      tag_21\n      jump\t// in\n    tag_20:\n      dup3\n      mload\n        /* \"contracts/fountain.sol\":768:796  IWETH public immutable WETH9 */\n      immutable(\"0x34098433846a9bd0a86140a033abb24fa6dec3400ab42534fa886dfeed6a6087\")\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      and\n      dup2\n      mstore\n      0x20\n      dup2\n      return\n    tag_22:\n      sub\n      dup2\n      return\n    tag_5:\n      jumpi(tag_24, iszero(callvalue))\n      dup2\n      dup3\n      revert\n    tag_24:\n      tag_25\n      calldatasize\n      tag_21\n      jump\t// in\n    tag_25:\n      0xff\n      0x010000000000000000000000000000000000000000\n      dup4\n      sload\n      div\n      and\n      dup4\n      mload\n      dup1\n      tag_22\n      dup4\n      dup4\n      swap1\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      jump\n    tag_6:\n      jumpi(tag_28, iszero(callvalue))\n      dup2\n      dup3\n      revert\n    tag_28:\n      tag_29\n      calldatasize\n      tag_21\n      jump\t// in\n    tag_29:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n      tag_30\n      tag_31\n      jump\t// in\n    tag_30:\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup2\n      dup4\n      mload\n      return\n    tag_7:\n      jumpi(tag_32, iszero(callvalue))\n      dup2\n      dup3\n      revert\n    tag_32:\n      tag_33\n      calldatasize\n      tag_34\n      jump\t// in\n    tag_33:\n        /* \"contracts/fountain.sol\":5717:7616  function finalize(... */\n      tag_35\n      dup2\n      dup4\n      dup6\n      tag_36\n      jump\t// in\n    tag_35:\n      pop\n      pop\n      pop\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup2\n      dup4\n      mload\n      return\n    tag_8:\n      jumpi(tag_37, iszero(callvalue))\n      dup2\n      dup3\n      revert\n    tag_37:\n      tag_38\n      calldatasize\n      tag_39\n      jump\t// in\n    tag_38:\n      tag_40\n      dup2\n      dup4\n      tag_41\n      jump\t// in\n    tag_40:\n      pop\n      pop\n      dup2\n      dup4\n      mload\n      return\n    tag_9:\n      jumpi(tag_42, iszero(callvalue))\n      dup2\n      dup3\n      revert\n    tag_42:\n      tag_43\n      calldatasize\n      tag_21\n      jump\t// in\n    tag_43:\n      dup3\n      mload\n        /* \"contracts/fountain.sol\":923:951  IERC20 public immutable USDC */\n      immutable(\"0x3e53e6caa3d9267e13a0317305a21727fdeb46c2d5adc9160409eaa6e5fb3b60\")\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      and\n      dup2\n      mstore\n      0x20\n      dup2\n      return\n    tag_10:\n      jumpi(tag_45, iszero(callvalue))\n      dup2\n      dup3\n      revert\n    tag_45:\n      tag_46\n      calldatasize\n      tag_21\n      jump\t// in\n    tag_46:\n      dup2\n      sload\n      dup4\n      mload\n      sub(exp(0x02, 0xa0), 0x01)\n      swap1\n      swap2\n      and\n      dup1\n      dup3\n      mstore\n      swap1\n      0x20\n      dup2\n      return\n    tag_11:\n      jumpi(tag_48, iszero(callvalue))\n      dup2\n      dup3\n      revert\n    tag_48:\n      tag_49\n      calldatasize\n      tag_21\n      jump\t// in\n    tag_49:\n      dup3\n      mload\n        /* \"contracts/fountain.sol\":1148:1187  ISwapRouter public immutable swapRouter */\n      immutable(\"0xa89dab98646eeeb3665d545d51c6146ef2fb7643427936d0df6806075707fbb6\")\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      and\n      dup2\n      mstore\n      0x20\n      dup2\n      return\n    tag_12:\n      jumpi(tag_51, iszero(callvalue))\n      dup2\n      dup3\n      revert\n    tag_51:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      tag_30\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      tag_53\n      calldatasize\n      tag_54\n      jump\t// in\n    tag_53:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      tag_55\n      jump\t// in\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n    tag_13:\n      jumpi(tag_56, iszero(callvalue))\n      dup2\n      dup3\n      revert\n    tag_56:\n      tag_57\n      tag_58\n      calldatasize\n      tag_54\n      jump\t// in\n    tag_58:\n      sub(exp(0x02, 0xa0), 0x01)\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/fountain.sol\":8119:8127  balances */\n      0x03\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"contracts/fountain.sol\":8017:8140  function getBalance(address user) public view returns (uint256 userBalance_) {... */\n      jump\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n    tag_57:\n      dup4\n      mload\n      dup2\n      dup2\n      mstore\n      0x20\n      dup2\n      return\n    tag_2:\n      pop\n      pop\n    tag_1:\n      pop\n      0x00\n      dup1\n      revert\n    tag_63:\n      calldataload(0x04)\n      sub(exp(0x02, 0xa0), 0x01)\n      dup2\n      and\n      dup2\n      eq\n      tag_65\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_65:\n      swap1\n      jump\t// out\n    tag_66:\n      0x00\n      dup3\n      0x1f\n      dup4\n      add\n      slt\n      tag_68\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_68:\n      dup2\n      calldataload\n      tag_69\n      dup2\n      tag_70\n      jump\t// in\n    tag_69:\n      mload(0x40)\n      tag_71\n      dup3\n      dup3\n      tag_72\n      jump\t// in\n    tag_71:\n      dup3\n      dup2\n      mstore\n      0x20\n      dup1\n      dup3\n      add\n      swap3\n      pop\n      dup6\n      dup2\n      add\n      dup2\n      dup6\n      mul\n      dup8\n      add\n      dup3\n      add\n      dup9\n      lt\n      iszero\n      tag_73\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_73:\n      0x00\n    tag_74:\n      dup6\n      dup2\n      lt\n      iszero\n      tag_76\n      jumpi\n      dup2\n      calldataload\n      dup6\n      mstore\n      swap4\n      dup3\n      add\n      swap4\n      swap1\n      dup3\n      add\n      swap1\n      0x01\n      add\n      jump(tag_74)\n    tag_76:\n      pop\n      swap2\n      swap8\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n    tag_77:\n      0x00\n      dup3\n      0x1f\n      dup4\n      add\n      slt\n      tag_79\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_79:\n      dup2\n      calldataload\n      tag_80\n      dup2\n      tag_81\n      jump\t// in\n    tag_80:\n      mload(0x40)\n      tag_82\n      dup3\n      dup3\n      tag_72\n      jump\t// in\n    tag_82:\n      dup3\n      dup2\n      mstore\n      dup6\n      0x20\n      dup5\n      dup8\n      add\n      add\n      gt\n      iszero\n      tag_83\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_83:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      dup3\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      dup7\n      add\n      0x20\n      dup4\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      calldatacopy\n      0x00\n      swap3\n      dup2\n      add\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      pop\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n    tag_21:\n      0x00\n      not(0x03)\n      dup3\n      add\n      slt\n      iszero\n      tag_85\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_85:\n      pop\n      jump\t// out\n    tag_86:\n      0x00\n      dup2\n      dup4\n      sub\n      slt\n      iszero\n      tag_88\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_88:\n      pop\n      pop\n      jump\t// out\n    tag_54:\n      0x00\n      0x20\n      not(0x03)\n      dup4\n      add\n      slt\n      iszero\n      tag_90\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_90:\n      calldataload(0x04)\n      sub(exp(0x02, 0xa0), 0x01)\n      dup2\n      and\n      dup2\n      eq\n      tag_91\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_91:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n    tag_16:\n      0x00\n      dup1\n      dup1\n      dup1\n      dup1\n      dup1\n      dup1\n      dup1\n      0x0100\n      not(0x03)\n      dup11\n      add\n      slt\n      iszero\n      tag_93\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_93:\n      calldataload(0x04)\n      sub(exp(0x02, 0xa0), 0x01)\n      dup1\n      dup3\n      and\n      dup3\n      eq\n      tag_94\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_94:\n      swap1\n      swap9\n      pop\n      calldataload(0x24)\n      swap1\n      dup1\n      dup3\n      and\n      dup3\n      eq\n      tag_95\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_95:\n      pop\n      swap7\n      pop\n      calldataload(0x44)\n      swap6\n      pop\n      calldataload(0x64)\n      swap5\n      pop\n      calldataload(0x84)\n      swap4\n      pop\n      calldataload(0xa4)\n      0xffffff\n      dup1\n      dup3\n      and\n      dup3\n      eq\n      tag_96\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_96:\n      swap1\n      swap4\n      pop\n      calldataload(0xc4)\n      swap1\n      dup1\n      dup3\n      and\n      dup3\n      eq\n      tag_97\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_97:\n      pop\n      dup1\n      swap3\n      pop\n      pop\n      calldataload(0xe4)\n      swap1\n      pop\n      swap2\n      swap4\n      swap6\n      swap8\n      pop\n      swap2\n      swap4\n      swap6\n      swap8\n      jump\t// out\n    tag_34:\n      0x00\n      dup1\n      dup1\n      0x60\n      not(0x03)\n      dup6\n      add\n      slt\n      iszero\n      tag_99\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_99:\n      tag_100\n      tag_63\n      jump\t// in\n    tag_100:\n      swap3\n      pop\n      0x24\n      dup1\n      calldataload\n      0xffffffffffffffff\n      dup1\n      dup3\n      gt\n      iszero\n      tag_101\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_101:\n      dup7\n      0x23\n      dup4\n      add\n      slt\n      tag_102\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_102:\n      dup2\n      0x04\n      add\n      calldataload\n      tag_103\n      dup2\n      tag_70\n      jump\t// in\n    tag_103:\n      mload(0x40)\n      tag_104\n      dup3\n      dup3\n      tag_72\n      jump\t// in\n    tag_104:\n      dup3\n      dup2\n      mstore\n      0x20\n      dup1\n      dup3\n      add\n      swap3\n      pop\n      dup6\n      dup8\n      add\n      dup2\n      dup6\n      mul\n      dup8\n      add\n      dup9\n      add\n      dup13\n      lt\n      iszero\n      tag_105\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_105:\n      0x00\n    tag_106:\n      dup6\n      dup2\n      lt\n      iszero\n      tag_108\n      jumpi\n      dup2\n      calldataload\n      dup8\n      dup2\n      gt\n      iszero\n      tag_109\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_109:\n      tag_110\n      dup15\n      dup12\n      dup4\n      dup13\n      add\n      add\n      tag_77\n      jump\t// in\n    tag_110:\n      dup7\n      mstore\n      pop\n      swap4\n      dup3\n      add\n      swap4\n      swap1\n      dup3\n      add\n      swap1\n      0x01\n      add\n      jump(tag_106)\n    tag_108:\n      pop\n      swap2\n      swap9\n      pop\n      pop\n      calldataload(0x44)\n      swap6\n      pop\n      pop\n      pop\n      pop\n      dup1\n      dup4\n      gt\n      iszero\n      tag_111\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_111:\n      pop\n      pop\n      tag_112\n      dup6\n      dup3\n      0x04\n      add\n      tag_66\n      jump\t// in\n    tag_112:\n      swap4\n      swap6\n      swap3\n      swap5\n      pop\n      pop\n      pop\n      jump\t// out\n    tag_113:\n      0x00\n      0x20\n      dup3\n      dup5\n      sub\n      slt\n      iszero\n      tag_115\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_115:\n      dup2\n      mload\n      dup1\n      iszero\n      iszero\n      dup2\n      eq\n      tag_116\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_116:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n    tag_39:\n      0x00\n      dup1\n      0x40\n      not(0x03)\n      dup5\n      add\n      slt\n      iszero\n      tag_118\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_118:\n      calldataload(0x04)\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_119\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_119:\n      tag_120\n      dup5\n      dup3\n      0x04\n      add\n      tag_77\n      jump\t// in\n    tag_120:\n      swap3\n      pop\n      pop\n      calldataload(0x24)\n      sub(exp(0x02, 0xa0), 0x01)\n      dup2\n      and\n      dup2\n      eq\n      tag_121\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_121:\n      swap2\n      swap4\n      swap2\n      swap3\n      pop\n      pop\n      jump\t// out\n    tag_122:\n      0x00\n      0x20\n      dup3\n      dup5\n      sub\n      slt\n      iszero\n      tag_124\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_124:\n      pop\n      mload\n      swap2\n      swap1\n      pop\n      jump\t// out\n    tag_125:\n      0x00\n      dup2\n      mload\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      0x00\n    tag_127:\n      dup2\n      dup2\n      lt\n      iszero\n      tag_129\n      jumpi\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      dup2\n      dup6\n      add\n      dup2\n      add\n      mload\n      dup7\n      dup4\n      add\n      mstore\n      add\n      jump(tag_127)\n    tag_129:\n      dup2\n      dup2\n      gt\n      iszero\n      tag_130\n      jumpi\n      0x00\n      dup3\n      dup7\n      add\n      mstore\n    tag_130:\n      pop\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      swap3\n      swap1\n      swap3\n      add\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n    tag_135:\n      0x00\n      0x0100\n      dup3\n      add\n      swap1\n      pop\n      sub(exp(0x02, 0xa0), 0x01)\n      dup1\n      dup5\n      mload\n      and\n      dup4\n      mstore\n      dup1\n      0x20\n      dup6\n      add\n      mload\n      and\n      0x20\n      dup5\n      add\n      mstore\n      0xffffff\n      0x40\n      dup6\n      add\n      mload\n      and\n      0x40\n      dup5\n      add\n      mstore\n      dup1\n      0x60\n      dup6\n      add\n      mload\n      and\n      0x60\n      dup5\n      add\n      mstore\n      0x80\n      dup5\n      add\n      mload\n      0x80\n      dup5\n      add\n      mstore\n      0xa0\n      dup5\n      add\n      mload\n      0xa0\n      dup5\n      add\n      mstore\n      0xc0\n      dup5\n      add\n      mload\n      0xc0\n      dup5\n      add\n      mstore\n      dup1\n      0xe0\n      dup6\n      add\n      mload\n      and\n      0xe0\n      dup5\n      add\n      mstore\n      pop\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n    tag_140:\n      mload(0x40)\n      0x0100\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      dup2\n      add\n      0xffffffffffffffff\n      dup2\n      gt\n      dup3\n      dup3\n      lt\n      or\n      iszero\n      tag_143\n      jumpi\n      tag_143\n      tag_144\n      jump\t// in\n    tag_143:\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x40\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      mstore\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      swap1\n      jump\t// out\n    tag_70:\n      0x00\n      0xffffffffffffffff\n      dup3\n      gt\n      iszero\n      tag_147\n      jumpi\n      tag_147\n      tag_144\n      jump\t// in\n    tag_147:\n      pop\n      0x20\n      swap1\n      dup2\n      mul\n      add\n      swap1\n      jump\t// out\n    tag_81:\n      0x00\n      0xffffffffffffffff\n      dup3\n      gt\n      iszero\n      tag_150\n      jumpi\n      tag_150\n      tag_144\n      jump\t// in\n    tag_150:\n      pop\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      swap1\n      jump\t// out\n    tag_151:\n      0x00\n      dup3\n      not\n      dup3\n      gt\n      iszero\n      tag_154\n      jumpi\n      tag_154\n      tag_155\n      jump\t// in\n    tag_154:\n      pop\n      add\n      swap1\n      jump\t// out\n    tag_156:\n      0x00\n      dup3\n      tag_158\n      jumpi\n      mstore(0x00, mul(0x4e487b71, exp(0x02, 0xe0)))\n      mstore(0x04, 0x12)\n      revert(0x00, 0x24)\n    tag_158:\n      pop\n      div\n      swap1\n      jump\t// out\n    tag_159:\n      0x00\n      dup2\n      not(0x00)\n      div\n      dup4\n      gt\n      dup3\n      iszero\n      iszero\n      and\n      iszero\n      tag_162\n      jumpi\n      tag_162\n      tag_155\n      jump\t// in\n    tag_162:\n      pop\n      mul\n      swap1\n      jump\t// out\n    tag_163:\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      0x01\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup3\n      lt\n      iszero\n      tag_166\n      jumpi\n      tag_166\n      tag_155\n      jump\t// in\n    tag_166:\n      pop\n      not(0x00)\n      add\n      swap1\n      jump\t// out\n    tag_167:\n      0x00\n      dup3\n      dup3\n      lt\n      iszero\n      tag_170\n      jumpi\n      tag_170\n      tag_155\n      jump\t// in\n    tag_170:\n      pop\n      sub\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n    tag_173:\n      0x00\n      returndatasize\n      dup1\n      iszero\n      tag_176\n      jumpi\n      returndatasize\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      tag_177\n      dup2\n      tag_81\n      jump\t// in\n    tag_177:\n      mload(0x40)\n      tag_178\n      dup3\n      dup3\n      tag_72\n      jump\t// in\n    tag_178:\n      dup3\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      dup1\n      swap5\n      pop\n      returndatasize\n      0x00\n      0x20\n      dup4\n      add\n      returndatacopy\n      pop\n      pop\n      pop\n      pop\n      swap1\n      jump\t// out\n    tag_176:\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x60\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      swap2\n      pop\n      pop\n      swap1\n      jump\t// out\n    tag_179:\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0xa0\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      dup2\n      add\n      dup2\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      iszero\n      tag_182\n      jumpi\n      tag_182\n      tag_144\n      jump\t// in\n    tag_182:\n      0x40\n      mstore\n      pop\n      jump\t// out\n    tag_72:\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x1f\n      dup3\n      add\n      not(0x1f)\n      and\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      dup2\n      add\n      0xffffffffffffffff\n      dup2\n      gt\n      dup3\n      dup3\n      lt\n      or\n      iszero\n      tag_185\n      jumpi\n      tag_185\n      tag_144\n      jump\t// in\n    tag_185:\n      0x40\n      mstore\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2113:2517  function _add(Set storage set, bytes32 value) private returns (bool) {... */\n    tag_186:\n      0x00\n      dup1\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup3\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":4250:4262  set._indexes */\n      0x07\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":4250:4274  set._indexes[value] != 0 */\n      iszero\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2192:2511  if (!_contains(set, value)) {... */\n      0x00\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup2\n      eq\n      tag_189\n      jumpi\n        /* \"contracts/fountain.sol\":7966:7982  charityAddresses */\n      0x06\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n      0x010000000000000000\n      dup2\n      lt\n      tag_191\n      jumpi\n      tag_191\n      tag_144\n      jump\t// in\n    tag_191:\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":4250:4262  set._indexes */\n      0x01\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup2\n      add\n      dup1\n        /* \"contracts/fountain.sol\":7966:7982  charityAddresses */\n      0x06\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sstore\n      dup1\n      dup3\n      lt\n      tag_193\n      jumpi\n      tag_193\n      tag_194\n      jump\t// in\n    tag_193:\n      pop\n      0xf652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f\n      add\n      dup5\n      swap1\n      sstore\n      pop\n        /* \"contracts/fountain.sol\":7966:7982  charityAddresses */\n      0x06\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n      swap3\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":4250:4262  set._indexes */\n      0x07\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      swap2\n      swap1\n      swap2\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":4250:4262  set._indexes */\n      0x01\n      swap1\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2113:2517  function _add(Set storage set, bytes32 value) private returns (bool) {... */\n      jump\t// out\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n    tag_189:\n      pop\n      swap3\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":2113:2517  function _add(Set storage set, bytes32 value) private returns (bool) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n    tag_195:\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      0x00\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      eq\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      tag_85\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x20\n      0x24\n      dup3\n      add\n      mstore\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      dup2\n      revert\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1767:1873  function _requireNotPaused() internal view virtual {... */\n    tag_198:\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0xff\n      0x010000000000000000000000000000000000000000\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1685:1692  _paused */\n      0x00\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n      div\n      and\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1836:1845  !paused() */\n      iszero\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      tag_200\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x10\n      0x24\n      dup3\n      add\n      mstore\n      0x5061757361626c653a2070617573656400000000000000000000000000000000\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      dup2\n      revert\n    tag_200:\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1767:1873  function _requireNotPaused() internal view virtual {... */\n      jump\t// out\n        /* \"contracts/fountain.sol\":7622:8009  function registerCharity(string memory charityName, address charityAddress) public {... */\n    tag_41:\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload(0x40)\n      tag_203\n      dup2\n      dup4\n      tag_125\n      jump\t// in\n    tag_203:\n        /* \"contracts/fountain.sol\":7723:7732  charities */\n      0x04\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup2\n      mstore\n      sub(exp(0x02, 0xa0), 0x01)\n      dup1\n      0x20\n      dup5\n      dup5\n      sub\n      add\n      dup5\n      keccak256\n      sload\n      and\n        /* \"contracts/fountain.sol\":7723:7761  charities[charityName] == address(0x0) */\n      iszero\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      tag_204\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n        /* \"contracts/fountain.sol\":7723:7732  charities */\n      0x04\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup3\n      add\n      mstore\n      0x20\n      0x24\n      dup3\n      add\n      mstore\n      0x43686172697479206e616d6520616c726561647920726567697374657265642e\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      dup2\n      revert\n    tag_204:\n      dup5\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/fountain.sol\":7822:7838  charitiesReverse */\n      0x05\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      0x01\n      dup2\n      and\n      swap2\n      pop\n      0x02\n      swap1\n      div\n      dup2\n      tag_205\n      jumpi\n      0x7f\n      and\n    tag_205:\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      dup2\n      lt\n      dup3\n      eq\n      iszero\n      tag_206\n      jumpi\n      mul(0x4e487b71, exp(0x02, 0xe0))\n      0x00\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      0x22\n        /* \"contracts/fountain.sol\":7723:7732  charities */\n      0x04\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      revert(0x00, 0x24)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n    tag_206:\n        /* \"contracts/fountain.sol\":7808:7907  require(bytes(charitiesReverse[charityAddress]).length == 0, \"Charity address already registered.\") */\n      tag_207\n        /* \"contracts/fountain.sol\":7816:7862  bytes(charitiesReverse[charityAddress]).length */\n      dup2\n        /* \"contracts/fountain.sol\":7816:7867  bytes(charitiesReverse[charityAddress]).length == 0 */\n      iszero\n        /* \"contracts/fountain.sol\":7808:7907  require(bytes(charitiesReverse[charityAddress]).length == 0, \"Charity address already registered.\") */\n      tag_208\n      jump\t// in\n    tag_207:\n      pop\n      pop\n        /* \"contracts/fountain.sol\":7917:7956  charities[charityName] = charityAddress */\n      tag_209\n      dup4\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      tag_210\n        /* \"contracts/fountain.sol\":7917:7939  charities[charityName] */\n      dup5\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      tag_211\n      jump\t// in\n    tag_210:\n      sub(exp(0x02, 0xa0), 0x01)\n      dup3\n      and\n      not(sub(exp(0x02, 0xa0), 0x01))\n      dup3\n      sload\n      and\n      or\n      dup2\n      sstore\n      pop\n      pop\n      jump\n        /* \"contracts/fountain.sol\":7917:7956  charities[charityName] = charityAddress */\n    tag_209:\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":8121:8171  _add(set._inner, bytes32(uint256(uint160(value)))) */\n      tag_213\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup2\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":8121:8171  _add(set._inner, bytes32(uint256(uint160(value)))) */\n      tag_186\n      jump\t// in\n    tag_213:\n      pop\n      pop\n        /* \"contracts/fountain.sol\":7622:8009  function registerCharity(string memory charityName, address charityAddress) public {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":1873:2180  function safeApprove(... */\n    tag_214:\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload(0x40)\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2055:2078  IERC20.approve.selector */\n      0x095ea7b300000000000000000000000000000000000000000000000000000000\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2032:2090  abi.encodeWithSelector(IERC20.approve.selector, to, value) */\n      0x20\n      dup3\n      add\n      swap1\n      dup2\n      mstore\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup5\n      and\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2032:2090  abi.encodeWithSelector(IERC20.approve.selector, to, value) */\n      0x24\n      dup4\n      add\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      0x44\n      dup1\n      dup4\n      add\n      dup7\n      swap1\n      mstore\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2032:2090  abi.encodeWithSelector(IERC20.approve.selector, to, value) */\n      dup3\n      mstore\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x64\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2032:2090  abi.encodeWithSelector(IERC20.approve.selector, to, value) */\n      tag_217\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup2\n      dup5\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2032:2090  abi.encodeWithSelector(IERC20.approve.selector, to, value) */\n      tag_72\n      jump\t// in\n    tag_217:\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2021:2091  token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value)) */\n      0x00\n      dup1\n      dup4\n      mload\n      dup4\n      0x00\n      dup8\n      gas\n      call\n      swap2\n      pop\n      pop\n      tag_218\n      tag_173\n      jump\t// in\n    tag_218:\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2109:2166  success && (data.length == 0 || abi.decode(data, (bool))) */\n      dup2\n      dup3\n      iszero\n      tag_219\n      jumpi\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2121:2132  data.length */\n      dup2\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2121:2137  data.length == 0 */\n      dup1\n      iszero\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2121:2165  data.length == 0 || abi.decode(data, (bool)) */\n      dup1\n      tag_220\n      jumpi\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2141:2165  abi.decode(data, (bool)) */\n      tag_221\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2032:2090  abi.encodeWithSelector(IERC20.approve.selector, to, value) */\n      0x20\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2141:2165  abi.decode(data, (bool)) */\n      dup4\n      dup7\n      add\n      add\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2032:2090  abi.encodeWithSelector(IERC20.approve.selector, to, value) */\n      0x20\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2141:2165  abi.decode(data, (bool)) */\n      dup7\n      add\n      tag_113\n      jump\t// in\n    tag_221:\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2121:2165  data.length == 0 || abi.decode(data, (bool)) */\n      swap1\n      pop\n    tag_220:\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2109:2166  success && (data.length == 0 || abi.decode(data, (bool))) */\n      swap2\n      pop\n      pop\n    tag_219:\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup1\n      tag_222\n      jumpi\n      mload(0x40)\n      swap3\n      pop\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup4\n      mstore\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2032:2090  abi.encodeWithSelector(IERC20.approve.selector, to, value) */\n      0x20\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x04\n      dup5\n      add\n      mstore\n      0x02\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2032:2090  abi.encodeWithSelector(IERC20.approve.selector, to, value) */\n      0x24\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup5\n      add\n      mstore\n      0x5341000000000000000000000000000000000000000000000000000000000000\n      0x44\n      dup5\n      add\n      mstore\n      0x64\n      dup4\n      revert\n    tag_222:\n      pop\n      pop\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":1873:2180  function safeApprove(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":561:919  function safeTransferFrom(... */\n    tag_223:\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload(0x40)\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":759:828  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      0x20\n      dup2\n      add\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":782:810  IERC20.transferFrom.selector */\n      0x23b872dd00000000000000000000000000000000000000000000000000000000\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":759:828  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      dup2\n      mstore\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup1\n      dup6\n      and\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":759:828  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      0x24\n      dup5\n      add\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      dup1\n      dup7\n      and\n      0x44\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":759:828  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      dup5\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      add\n      mstore\n      pop\n      dup6\n      0x64\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":759:828  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      dup4\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      add\n      mstore\n      0x64\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":759:828  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      dup3\n      mstore\n      tag_225\n      dup3\n      tag_179\n      jump\t// in\n    tag_225:\n      0x00\n      dup1\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":748:829  token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value)) */\n      dup4\n      mload\n      dup4\n      0x00\n      dup8\n      gas\n      call\n      swap2\n      pop\n      pop\n      tag_226\n      tag_173\n      jump\t// in\n    tag_226:\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":847:904  success && (data.length == 0 || abi.decode(data, (bool))) */\n      dup2\n      dup3\n      iszero\n      tag_227\n      jumpi\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":859:870  data.length */\n      dup2\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":859:875  data.length == 0 */\n      dup1\n      iszero\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":859:903  data.length == 0 || abi.decode(data, (bool)) */\n      dup1\n      tag_228\n      jumpi\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":879:903  abi.decode(data, (bool)) */\n      tag_229\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":759:828  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      0x20\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":879:903  abi.decode(data, (bool)) */\n      dup4\n      dup7\n      add\n      add\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":759:828  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      0x20\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":879:903  abi.decode(data, (bool)) */\n      dup7\n      add\n      tag_113\n      jump\t// in\n    tag_229:\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":859:903  data.length == 0 || abi.decode(data, (bool)) */\n      swap1\n      pop\n    tag_228:\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":847:904  success && (data.length == 0 || abi.decode(data, (bool))) */\n      swap2\n      pop\n      pop\n    tag_227:\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup1\n      tag_230\n      jumpi\n      mload(0x40)\n      swap3\n      pop\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup4\n      mstore\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":759:828  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      0x20\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x04\n      dup5\n      add\n      mstore\n      0x03\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":759:828  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      0x24\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup5\n      add\n      mstore\n      0x5354460000000000000000000000000000000000000000000000000000000000\n      0x44\n      dup5\n      add\n      mstore\n      0x64\n      dup4\n      revert\n    tag_230:\n      pop\n      pop\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":561:919  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n    tag_231:\n      0x00\n      0xff\n      dup3\n      and\n      0xff\n      dup2\n      eq\n      iszero\n      tag_234\n      jumpi\n      tag_234\n      tag_155\n      jump\t// in\n    tag_234:\n      0x01\n      add\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n    tag_237:\n      0x00\n      dup2\n      mload\n      dup4\n      lt\n      tag_240\n      jumpi\n      tag_240\n      tag_194\n      jump\t// in\n    tag_240:\n      pop\n      0x20\n      swap2\n      dup3\n      mul\n      add\n      add\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1063:1125  modifier onlyOwner() {... */\n    tag_31:\n      tag_242\n      tag_195\n      jump\t// in\n    tag_242:\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload(0x00)\n      not(sub(exp(0x02, 0xa0), 0x01))\n      dup2\n      and\n      0x00\n      sstore\n      0x00\n      sub(exp(0x02, 0xa0), 0x01)\n      dup3\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x00\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1063:1125  modifier onlyOwner() {... */\n      jump\t// out\n    tag_55:\n      tag_244\n      tag_195\n      jump\t// in\n    tag_244:\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2169:2191  newOwner != address(0) */\n      dup3\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      and\n      dup1\n      tag_245\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x26\n      0x24\n      dup3\n      add\n      mstore\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n      0x44\n      dup3\n      add\n      mstore\n      0x6464726573730000000000000000000000000000000000000000000000000000\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      dup2\n      revert\n    tag_245:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      0x00\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n      dup2\n      not(sub(exp(0x02, 0xa0), 0x01))\n      dup3\n      and\n      or\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      0x00\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      dup4\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup4\n      dup3\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      0x00\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1063:1125  modifier onlyOwner() {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1204:1276  modifier whenNotPaused() {... */\n    tag_18:\n      tag_247\n      tag_198\n      jump\t// in\n    tag_247:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_248\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      dup2\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      0x01\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_249\n      jump\t// in\n    tag_248:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      dup1\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      0x01\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sstore\n        /* \"contracts/fountain.sol\":2787:2800  totalAmountIn */\n      tag_250\n      dup5\n        /* \"contracts/fountain.sol\":2780:2784  this */\n      address\n        /* \"contracts/fountain.sol\":2760:2770  msg.sender */\n      caller\n        /* \"contracts/fountain.sol\":2787:2800  totalAmountIn */\n      dup7\n      tag_223\n      jump\t// in\n    tag_250:\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup1\n        /* \"contracts/fountain.sol\":2932:2942  swapRouter */\n      immutable(\"0xa89dab98646eeeb3665d545d51c6146ef2fb7643427936d0df6806075707fbb6\")\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      and\n        /* \"contracts/fountain.sol\":2945:2958  totalAmountIn */\n      tag_251\n      dup7\n      dup3\n      dup8\n      tag_214\n      jump\t// in\n    tag_251:\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup2\n        /* \"contracts/fountain.sol\":3219:3224  WETH9 */\n      immutable(\"0x34098433846a9bd0a86140a033abb24fa6dec3400ab42534fa886dfeed6a6087\")\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      and\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      dup4\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n      tag_252\n      tag_140\n      jump\t// in\n    tag_252:\n      sub(exp(0x02, 0xa0), 0x01)\n      dup9\n      and\n      dup2\n      mstore\n      sub(exp(0x02, 0xa0), 0x01)\n      dup4\n      and\n        /* \"contracts/fountain.sol\":3113:3747  ISwapRouter.ExactOutputSingleParams({... */\n      0x20\n      dup3\n      add\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      0xffffff\n      dup13\n      and\n        /* \"contracts/fountain.sol\":3113:3747  ISwapRouter.ExactOutputSingleParams({... */\n      0x40\n      dup3\n      dup2\n      add\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"contracts/fountain.sol\":2780:2784  this */\n      address\n        /* \"contracts/fountain.sol\":3113:3747  ISwapRouter.ExactOutputSingleParams({... */\n      0x60\n      dup4\n      add\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      dup11\n        /* \"contracts/fountain.sol\":3113:3747  ISwapRouter.ExactOutputSingleParams({... */\n      0x80\n      dup4\n      add\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      dup3\n        /* \"contracts/fountain.sol\":3113:3747  ISwapRouter.ExactOutputSingleParams({... */\n      0xa0\n      dup4\n      add\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      dup12\n        /* \"contracts/fountain.sol\":3113:3747  ISwapRouter.ExactOutputSingleParams({... */\n      0xc0\n      dup4\n      add\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      0x00\n      swap3\n      pop\n      dup3\n        /* \"contracts/fountain.sol\":3113:3747  ISwapRouter.ExactOutputSingleParams({... */\n      0xe0\n      dup4\n      add\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n        /* \"contracts/fountain.sol\":3906:3949  swapRouter.exactOutputSingle(ethSwapParams) */\n      dup5\n      extcodesize\n      tag_259\n      jumpi\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup3\n      dup4\n      revert\n        /* \"contracts/fountain.sol\":3906:3949  swapRouter.exactOutputSingle(ethSwapParams) */\n    tag_259:\n        /* \"contracts/fountain.sol\":3113:3747  ISwapRouter.ExactOutputSingleParams({... */\n      dup1\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload\n      0xdb3e219800000000000000000000000000000000000000000000000000000000\n        /* \"contracts/fountain.sol\":3906:3949  swapRouter.exactOutputSingle(ethSwapParams) */\n      dup2\n      mstore\n        /* \"contracts/fountain.sol\":3113:3747  ISwapRouter.ExactOutputSingleParams({... */\n      0x20\n        /* \"contracts/fountain.sol\":3906:3949  swapRouter.exactOutputSingle(ethSwapParams) */\n      dup2\n      dup3\n      tag_260\n      dup7\n      0x04\n      dup7\n      add\n      tag_135\n      jump\t// in\n    tag_260:\n      sub\n      dup4\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup8\n        /* \"contracts/fountain.sol\":3906:3949  swapRouter.exactOutputSingle(ethSwapParams) */\n      dup11\n      gas\n      call\n      swap3\n      pop\n      dup3\n      tag_262\n      jumpi\n      tag_262\n      tag_263\n      jump\t// in\n    tag_262:\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup4\n        /* \"contracts/fountain.sol\":3906:3949  swapRouter.exactOutputSingle(ethSwapParams) */\n      dup4\n      iszero\n      tag_264\n      jumpi\n      tag_265\n      returndatasize\n      dup4\n      tag_72\n      jump\t// in\n    tag_265:\n      tag_266\n      returndatasize\n      dup4\n      add\n      dup4\n      tag_122\n      jump\t// in\n    tag_266:\n      swap1\n      pop\n    tag_264:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      dup9\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n      swap4\n      pop\n        /* \"contracts/fountain.sol\":3984:4023  WETH9.withdraw(ephemeralGasMoneyAmount) */\n      dup6\n      extcodesize\n      tag_267\n      jumpi\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup5\n      dup6\n      revert\n        /* \"contracts/fountain.sol\":3984:4023  WETH9.withdraw(ephemeralGasMoneyAmount) */\n    tag_267:\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup3\n      mload\n      0x2e1a7d4d00000000000000000000000000000000000000000000000000000000\n        /* \"contracts/fountain.sol\":3984:4023  WETH9.withdraw(ephemeralGasMoneyAmount) */\n      dup2\n      mstore\n        /* \"contracts/fountain.sol\":3906:3949  swapRouter.exactOutputSingle(ethSwapParams) */\n      0x04\n        /* \"contracts/fountain.sol\":3984:4023  WETH9.withdraw(ephemeralGasMoneyAmount) */\n      dup2\n      add\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup6\n      swap1\n      mstore\n      swap2\n      pop\n      dup5\n      dup3\n      0x24\n      dup2\n      dup4\n        /* \"contracts/fountain.sol\":3984:4023  WETH9.withdraw(ephemeralGasMoneyAmount) */\n      dup11\n      gas\n      call\n      swap6\n      pop\n      dup6\n      tag_270\n      jumpi\n      tag_270\n      tag_263\n      jump\t// in\n    tag_270:\n      dup6\n      iszero\n      tag_273\n      jumpi\n      tag_272\n      returndatasize\n      dup4\n      tag_72\n      jump\t// in\n    tag_272:\n      tag_273\n      returndatasize\n      dup4\n      add\n      dup4\n      tag_86\n      jump\t// in\n    tag_273:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      dup9\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n      swap6\n      pop\n      dup5\n      dup6\n      dup7\n        /* \"contracts/fountain.sol\":3113:3747  ISwapRouter.ExactOutputSingleParams({... */\n      dup6\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload\n        /* \"contracts/fountain.sol\":4125:4197  payable(ephemeralWalletAddress).call{value: ephemeralGasMoneyAmount}(\"\") */\n      dup10\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup13\n        /* \"contracts/fountain.sol\":4125:4156  payable(ephemeralWalletAddress) */\n      dup16\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      and\n        /* \"contracts/fountain.sol\":4125:4197  payable(ephemeralWalletAddress).call{value: ephemeralGasMoneyAmount}(\"\") */\n      gas\n      call\n      swap6\n      pop\n      tag_274\n      tag_173\n      jump\t// in\n    tag_274:\n      pop\n        /* \"contracts/fountain.sol\":4207:4275  require(ephemeralGasSent, \"Failed to send gas to ephemeral wallet.\") */\n      tag_275\n      dup7\n      tag_276\n      jump\t// in\n    tag_275:\n        /* \"contracts/fountain.sol\":4378:4419  totalAmountIn - tokenAmountSpentOnEthSwap */\n      tag_277\n      dup2\n      dup14\n      tag_167\n      jump\t// in\n    tag_277:\n      swap6\n      pop\n      pop\n      pop\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      tag_278\n      tag_140\n      jump\t// in\n    tag_278:\n      sub(exp(0x02, 0xa0), 0x01)\n      dup11\n      and\n      dup2\n      mstore\n        /* \"contracts/fountain.sol\":4566:5200  ISwapRouter.ExactInputSingleParams({... */\n      swap2\n      pop\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"contracts/fountain.sol\":4671:4675  USDC */\n      immutable(\"0x3e53e6caa3d9267e13a0317305a21727fdeb46c2d5adc9160409eaa6e5fb3b60\")\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup8\n      and\n      and\n        /* \"contracts/fountain.sol\":3113:3747  ISwapRouter.ExactOutputSingleParams({... */\n      0x20\n        /* \"contracts/fountain.sol\":4566:5200  ISwapRouter.ExactInputSingleParams({... */\n      dup4\n      add\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      0xffffff\n      dup15\n      and\n        /* \"contracts/fountain.sol\":4566:5200  ISwapRouter.ExactInputSingleParams({... */\n      dup3\n      dup3\n      add\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n        /* \"contracts/fountain.sol\":2780:2784  this */\n      address\n        /* \"contracts/fountain.sol\":3113:3747  ISwapRouter.ExactOutputSingleParams({... */\n      0x60\n        /* \"contracts/fountain.sol\":4566:5200  ISwapRouter.ExactInputSingleParams({... */\n      dup4\n      add\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      dup11\n        /* \"contracts/fountain.sol\":3113:3747  ISwapRouter.ExactOutputSingleParams({... */\n      0x80\n        /* \"contracts/fountain.sol\":4566:5200  ISwapRouter.ExactInputSingleParams({... */\n      dup4\n      add\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      dup4\n        /* \"contracts/fountain.sol\":3113:3747  ISwapRouter.ExactOutputSingleParams({... */\n      0xa0\n        /* \"contracts/fountain.sol\":4566:5200  ISwapRouter.ExactInputSingleParams({... */\n      dup4\n      add\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      dup15\n        /* \"contracts/fountain.sol\":3113:3747  ISwapRouter.ExactOutputSingleParams({... */\n      0xc0\n        /* \"contracts/fountain.sol\":4566:5200  ISwapRouter.ExactInputSingleParams({... */\n      dup4\n      add\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      dup3\n        /* \"contracts/fountain.sol\":3113:3747  ISwapRouter.ExactOutputSingleParams({... */\n      0xe0\n        /* \"contracts/fountain.sol\":4566:5200  ISwapRouter.ExactInputSingleParams({... */\n      dup4\n      add\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n        /* \"contracts/fountain.sol\":5263:5298  swapRouter.exactInputSingle(params) */\n      dup5\n      extcodesize\n      tag_283\n      jumpi\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup3\n      dup4\n      revert\n        /* \"contracts/fountain.sol\":5263:5298  swapRouter.exactInputSingle(params) */\n    tag_283:\n        /* \"contracts/fountain.sol\":3113:3747  ISwapRouter.ExactOutputSingleParams({... */\n      dup1\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload\n        /* \"contracts/fountain.sol\":5263:5298  swapRouter.exactInputSingle(params) */\n      swap6\n      pop\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x414bf38900000000000000000000000000000000000000000000000000000000\n        /* \"contracts/fountain.sol\":5263:5298  swapRouter.exactInputSingle(params) */\n      dup7\n      mstore\n        /* \"contracts/fountain.sol\":3113:3747  ISwapRouter.ExactOutputSingleParams({... */\n      0x20\n        /* \"contracts/fountain.sol\":5263:5298  swapRouter.exactInputSingle(params) */\n      dup7\n      dup8\n      tag_284\n      dup6\n        /* \"contracts/fountain.sol\":3906:3949  swapRouter.exactOutputSingle(ethSwapParams) */\n      0x04\n        /* \"contracts/fountain.sol\":5263:5298  swapRouter.exactInputSingle(params) */\n      dup12\n      add\n      tag_135\n      jump\t// in\n    tag_284:\n      sub\n      dup9\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup7\n        /* \"contracts/fountain.sol\":5263:5298  swapRouter.exactInputSingle(params) */\n      dup10\n      gas\n      call\n      swap5\n      pop\n      dup5\n      tag_286\n      jumpi\n      tag_286\n      tag_263\n      jump\t// in\n    tag_286:\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup3\n        /* \"contracts/fountain.sol\":5263:5298  swapRouter.exactInputSingle(params) */\n      swap4\n      pop\n      dup5\n      iszero\n      tag_287\n      jumpi\n      tag_288\n      returndatasize\n      dup8\n      tag_72\n      jump\t// in\n    tag_288:\n      tag_289\n      returndatasize\n      dup8\n      add\n      dup8\n      tag_122\n      jump\t// in\n    tag_289:\n      swap4\n      pop\n    tag_287:\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup9\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/fountain.sol\":5318:5326  balances */\n      0x03\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/fountain.sol\":5318:5350  balances[ephemeralWalletAddress] */\n      swap6\n      pop\n        /* \"contracts/fountain.sol\":5318:5363  balances[ephemeralWalletAddress] += amountOut */\n      tag_291\n      dup5\n      dup8\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n        /* \"contracts/fountain.sol\":5318:5363  balances[ephemeralWalletAddress] += amountOut */\n      tag_151\n      jump\t// in\n    tag_291:\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      swap1\n      swap6\n      sstore\n      pop\n      pop\n      swap3\n      sload\n      swap2\n      mload\n      dup7\n      dup2\n      mstore\n      0x20\n      dup2\n      add\n      dup4\n      swap1\n      mstore\n      0x40\n      dup2\n      add\n      dup5\n      swap1\n      mstore\n      swap2\n      swap3\n        /* \"contracts/fountain.sol\":5387:5498  FountainDeposit(msg.sender, ephemeralWalletAddress, tokenIn, totalAmountIn, ephemeralGasMoneyAmount, amountOut) */\n      dup6\n      dup6\n        /* \"contracts/fountain.sol\":2760:2770  msg.sender */\n      caller\n        /* \"contracts/fountain.sol\":5387:5498  FountainDeposit(msg.sender, ephemeralWalletAddress, tokenIn, totalAmountIn, ephemeralGasMoneyAmount, amountOut) */\n      0x0860654ad3d0539dbac86150676768b53a47900bb45c5eb8d8d000ffbc4f67e6\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x60\n      dup8\n        /* \"contracts/fountain.sol\":5387:5498  FountainDeposit(msg.sender, ephemeralWalletAddress, tokenIn, totalAmountIn, ephemeralGasMoneyAmount, amountOut) */\n      log4\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n      tag_293\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      0x01\n      dup1\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sstore\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n    tag_293:\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1204:1276  modifier whenNotPaused() {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n    tag_36:\n      tag_296\n      tag_198\n      jump\t// in\n    tag_296:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_297\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      0x01\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_249\n      jump\t// in\n    tag_297:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      0x01\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sstore\n      sub(exp(0x02, 0xa0), 0x01)\n      dup1\n        /* \"contracts/fountain.sol\":5892:5910  msg.sender == user */\n      dup3\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      and\n        /* \"contracts/fountain.sol\":5892:5902  msg.sender */\n      caller\n        /* \"contracts/fountain.sol\":5892:5910  msg.sender == user */\n      eq\n        /* \"contracts/fountain.sol\":5892:5935  msg.sender == user || msg.sender == owner() */\n      dup1\n      tag_298\n      jumpi\n        /* \"contracts/fountain.sol\":5914:5935  msg.sender == owner() */\n      tag_299\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      0x00\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n      and\n      sub(exp(0x02, 0xa0), 0x01)\n      and\n      swap1\n      jump\n        /* \"contracts/fountain.sol\":5914:5935  msg.sender == owner() */\n    tag_299:\n        /* \"contracts/fountain.sol\":5892:5902  msg.sender */\n      caller\n        /* \"contracts/fountain.sol\":5914:5935  msg.sender == owner() */\n      eq\n        /* \"contracts/fountain.sol\":5892:5935  msg.sender == user || msg.sender == owner() */\n      swap1\n      pop\n    tag_298:\n        /* \"contracts/fountain.sol\":5884:5969  require(msg.sender == user || msg.sender == owner(), \"Unauthorization finalization.\") */\n      tag_300\n      dup2\n      tag_301\n      jump\t// in\n    tag_300:\n      pop\n        /* \"contracts/fountain.sol\":5987:6004  charities_.length */\n      dup3\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload\n        /* \"contracts/fountain.sol\":5979:6077  require(charities_.length == amounts_.length, \"Charities and amounts arrays of different length.\") */\n      tag_302\n        /* \"contracts/fountain.sol\":6008:6023  amounts_.length */\n      dup6\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload\n        /* \"contracts/fountain.sol\":5987:6023  charities_.length == amounts_.length */\n      dup3\n      eq\n        /* \"contracts/fountain.sol\":5979:6077  require(charities_.length == amounts_.length, \"Charities and amounts arrays of different length.\") */\n      tag_303\n      jump\t// in\n    tag_302:\n      pop\n      0x00\n      dup1\n        /* \"contracts/fountain.sol\":6129:6338  for (uint8 i = 0; i < charities_.length; i++) {... */\n    tag_304:\n        /* \"contracts/fountain.sol\":6151:6168  charities_.length */\n      dup5\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload\n      0xff\n        /* \"contracts/fountain.sol\":6147:6168  i < charities_.length */\n      dup3\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      and\n        /* \"contracts/fountain.sol\":6147:6168  i < charities_.length */\n      dup2\n      dup2\n      lt\n      tag_307\n      jumpi\n      pop\n      pop\n      jump(tag_306)\n    tag_307:\n        /* \"contracts/fountain.sol\":6189:6223  totalUserAllocation += amounts_[i] */\n      tag_308\n        /* \"contracts/fountain.sol\":6212:6223  amounts_[i] */\n      tag_309\n      dup3\n      dup11\n      tag_237\n      jump\t// in\n    tag_309:\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload\n        /* \"contracts/fountain.sol\":6189:6223  totalUserAllocation += amounts_[i] */\n      dup6\n      tag_151\n      jump\t// in\n    tag_308:\n      swap4\n      pop\n        /* \"contracts/fountain.sol\":6237:6327  require(charities[charities_[i]] != address(0x0), \"Attempt to donate to unknown charity.\") */\n      tag_310\n        /* \"contracts/fountain.sol\":6245:6285  charities[charities_[i]] != address(0x0) */\n      tag_311\n        /* \"contracts/fountain.sol\":6245:6269  charities[charities_[i]] */\n      tag_312\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      tag_313\n        /* \"contracts/fountain.sol\":6255:6268  charities_[i] */\n      tag_314\n      dup6\n      dup13\n      tag_237\n      jump\t// in\n    tag_314:\n      mload\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      tag_211\n      jump\t// in\n    tag_313:\n      sload\n      sub(exp(0x02, 0xa0), 0x01)\n      and\n      swap1\n      jump\n        /* \"contracts/fountain.sol\":6245:6269  charities[charities_[i]] */\n    tag_312:\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      and\n      swap1\n      jump\n        /* \"contracts/fountain.sol\":6245:6285  charities[charities_[i]] != address(0x0) */\n    tag_311:\n      iszero\n      iszero\n        /* \"contracts/fountain.sol\":6237:6327  require(charities[charities_[i]] != address(0x0), \"Attempt to donate to unknown charity.\") */\n      tag_316\n      jump\t// in\n    tag_310:\n      pop\n      pop\n        /* \"contracts/fountain.sol\":6170:6173  i++ */\n      tag_317\n      dup2\n      tag_231\n      jump\t// in\n    tag_317:\n      swap1\n      pop\n        /* \"contracts/fountain.sol\":6129:6338  for (uint8 i = 0; i < charities_.length; i++) {... */\n      jump(tag_304)\n    tag_306:\n      pop\n        /* \"contracts/fountain.sol\":6348:6432  require(totalUserAllocation <= balances[user], \"Total finalization amount too high\") */\n      tag_318\n        /* \"contracts/fountain.sol\":6379:6393  balances[user] */\n      tag_319\n      dup5\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/fountain.sol\":5318:5326  balances */\n      0x03\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      swap1\n      jump\n        /* \"contracts/fountain.sol\":6379:6393  balances[user] */\n    tag_319:\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n        /* \"contracts/fountain.sol\":6356:6393  totalUserAllocation <= balances[user] */\n      dup3\n      gt\n      iszero\n        /* \"contracts/fountain.sol\":6348:6432  require(totalUserAllocation <= balances[user], \"Total finalization amount too high\") */\n      tag_320\n      jump\t// in\n    tag_318:\n      0x00\n      dup1\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup4\n        /* \"contracts/fountain.sol\":7245:7249  USDC */\n      immutable(\"0x3e53e6caa3d9267e13a0317305a21727fdeb46c2d5adc9160409eaa6e5fb3b60\")\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      and\n        /* \"contracts/fountain.sol\":7245:7258  USDC.transfer */\n      swap4\n      pop\n        /* \"contracts/fountain.sol\":6477:7528  for (uint8 i = 0; i < charities_.length; i++) { ... */\n    tag_321:\n        /* \"contracts/fountain.sol\":6499:6516  charities_.length */\n      dup6\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload\n      0xff\n        /* \"contracts/fountain.sol\":6495:6516  i < charities_.length */\n      dup3\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      and\n        /* \"contracts/fountain.sol\":6495:6516  i < charities_.length */\n      dup2\n      dup2\n      lt\n      tag_324\n      jumpi\n      pop\n      pop\n      jump(tag_323)\n    tag_324:\n        /* \"contracts/fountain.sol\":6880:6891  amounts_[i] */\n      tag_325\n      dup2\n      dup11\n      tag_237\n      jump\t// in\n    tag_325:\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload\n      swap2\n      pop\n        /* \"contracts/fountain.sol\":6895:6931  balances[user] - totalUserAllocation */\n      tag_326\n      dup6\n        /* \"contracts/fountain.sol\":6895:6909  balances[user] */\n      tag_327\n      dup10\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/fountain.sol\":5318:5326  balances */\n      0x03\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      swap1\n      jump\n        /* \"contracts/fountain.sol\":6895:6909  balances[user] */\n    tag_327:\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n        /* \"contracts/fountain.sol\":6895:6931  balances[user] - totalUserAllocation */\n      tag_167\n      jump\t// in\n    tag_326:\n        /* \"contracts/fountain.sol\":6880:6970  amounts_[i] + (balances[user] - totalUserAllocation) * (amounts_[i] / totalUserAllocation) */\n      tag_328\n        /* \"contracts/fountain.sol\":6894:6970  (balances[user] - totalUserAllocation) * (amounts_[i] / totalUserAllocation) */\n      tag_329\n        /* \"contracts/fountain.sol\":6936:6969  amounts_[i] / totalUserAllocation */\n      tag_330\n      dup9\n        /* \"contracts/fountain.sol\":6936:6947  amounts_[i] */\n      tag_331\n      dup7\n      dup16\n      tag_237\n      jump\t// in\n    tag_331:\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload\n        /* \"contracts/fountain.sol\":6936:6969  amounts_[i] / totalUserAllocation */\n      tag_156\n      jump\t// in\n    tag_330:\n        /* \"contracts/fountain.sol\":6894:6970  (balances[user] - totalUserAllocation) * (amounts_[i] / totalUserAllocation) */\n      dup4\n      tag_159\n      jump\t// in\n    tag_329:\n        /* \"contracts/fountain.sol\":6880:6970  amounts_[i] + (balances[user] - totalUserAllocation) * (amounts_[i] / totalUserAllocation) */\n      dup5\n      tag_151\n      jump\t// in\n    tag_328:\n        /* \"contracts/fountain.sol\":6855:6970  uint256 transferAmount = amounts_[i] + (balances[user] - totalUserAllocation) * (amounts_[i] / totalUserAllocation) */\n      swap3\n      pop\n      pop\n        /* \"contracts/fountain.sol\":7094:7115  charities_.length - 1 */\n      tag_332\n        /* \"contracts/fountain.sol\":7094:7111  charities_.length */\n      dup9\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload\n        /* \"contracts/fountain.sol\":7094:7115  charities_.length - 1 */\n      tag_163\n      jump\t// in\n    tag_332:\n        /* \"contracts/fountain.sol\":7089:7115  i == charities_.length - 1 */\n      dup2\n      eq\n        /* \"contracts/fountain.sol\":7085:7196  if (i == charities_.length - 1) {... */\n      iszero\n      tag_333\n      jumpi\n        /* \"contracts/fountain.sol\":7152:7181  balances[user] - totalDonated */\n      tag_334\n      dup5\n        /* \"contracts/fountain.sol\":7152:7166  balances[user] */\n      tag_327\n      dup10\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/fountain.sol\":5318:5326  balances */\n      0x03\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      swap1\n      jump\n        /* \"contracts/fountain.sol\":7152:7181  balances[user] - totalDonated */\n    tag_334:\n        /* \"contracts/fountain.sol\":7135:7181  transferAmount = balances[user] - totalDonated */\n      swap2\n      pop\n        /* \"contracts/fountain.sol\":7085:7196  if (i == charities_.length - 1) {... */\n    tag_333:\n        /* \"contracts/fountain.sol\":7259:7283  charities[charities_[i]] */\n      tag_336\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      tag_313\n        /* \"contracts/fountain.sol\":7269:7282  charities_[i] */\n      tag_314\n      dup4\n      dup12\n      tag_237\n      jump\t// in\n        /* \"contracts/fountain.sol\":7259:7283  charities[charities_[i]] */\n    tag_336:\n        /* \"contracts/fountain.sol\":7245:7300  USDC.transfer(charities[charities_[i]], transferAmount) */\n      dup7\n      extcodesize\n      tag_339\n      jumpi\n      0x00\n      dup1\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      revert\n        /* \"contracts/fountain.sol\":7245:7300  USDC.transfer(charities[charities_[i]], transferAmount) */\n    tag_339:\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload(0x40)\n      0xa9059cbb00000000000000000000000000000000000000000000000000000000\n        /* \"contracts/fountain.sol\":7245:7300  USDC.transfer(charities[charities_[i]], transferAmount) */\n      dup2\n      mstore\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup3\n      and\n        /* \"contracts/fountain.sol\":6245:6254  charities */\n      0x04\n        /* \"contracts/fountain.sol\":7245:7300  USDC.transfer(charities[charities_[i]], transferAmount) */\n      dup3\n      add\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      0x24\n      dup2\n      add\n      dup5\n      swap1\n      mstore\n        /* \"contracts/fountain.sol\":7245:7300  USDC.transfer(charities[charities_[i]], transferAmount) */\n      0x20\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup2\n      0x44\n      dup2\n      0x00\n        /* \"contracts/fountain.sol\":7245:7300  USDC.transfer(charities[charities_[i]], transferAmount) */\n      dup13\n      gas\n      call\n      swap2\n      pop\n      dup2\n      tag_342\n      jumpi\n      tag_342\n      tag_263\n      jump\t// in\n    tag_342:\n      0x00\n      dup3\n      iszero\n      tag_343\n      jumpi\n      tag_344\n      returndatasize\n      dup4\n      tag_72\n      jump\t// in\n    tag_344:\n      tag_345\n      returndatasize\n      dup4\n      add\n      dup4\n      tag_113\n      jump\t// in\n    tag_345:\n      swap1\n      pop\n    tag_343:\n        /* \"contracts/fountain.sol\":7314:7374  require(transferSuccess, \"USDC transfer to charity failed.\") */\n      tag_346\n      dup2\n      tag_347\n      jump\t// in\n    tag_346:\n      pop\n      pop\n      pop\n        /* \"contracts/fountain.sol\":7416:7429  charities_[i] */\n      tag_348\n      dup2\n      dup10\n      tag_237\n      jump\t// in\n    tag_348:\n      mload\n        /* \"contracts/fountain.sol\":7431:7455  charities[charities_[i]] */\n      tag_349\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      tag_313\n        /* \"contracts/fountain.sol\":7441:7454  charities_[i] */\n      tag_314\n      dup5\n      dup13\n      tag_237\n      jump\t// in\n        /* \"contracts/fountain.sol\":7431:7455  charities[charities_[i]] */\n    tag_349:\n      swap2\n      pop\n        /* \"contracts/fountain.sol\":7393:7472  FountainDonation(user, charities_[i], charities[charities_[i]], transferAmount) */\n      tag_352\n      dup2\n      tag_353\n      jump\t// in\n    tag_352:\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload(0x40)\n      dup5\n      dup2\n      mstore\n        /* \"contracts/fountain.sol\":7393:7472  FountainDonation(user, charities_[i], charities[charities_[i]], transferAmount) */\n      swap1\n      swap2\n      pop\n      dup3\n      dup3\n      dup11\n      0xb0657052acbf78260696b569dbe3a1f1f39287b5a3c378f5bca0c20fbf062dec\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      dup6\n        /* \"contracts/fountain.sol\":7393:7472  FountainDonation(user, charities_[i], charities[charities_[i]], transferAmount) */\n      log4\n      pop\n      pop\n      pop\n        /* \"contracts/fountain.sol\":7487:7517  totalDonated += transferAmount */\n      tag_355\n      dup2\n      dup5\n      tag_151\n      jump\t// in\n    tag_355:\n      swap3\n      pop\n      pop\n        /* \"contracts/fountain.sol\":6518:6521  i++ */\n      tag_356\n      dup2\n      tag_231\n      jump\t// in\n    tag_356:\n      swap1\n      pop\n        /* \"contracts/fountain.sol\":6477:7528  for (uint8 i = 0; i < charities_.length; i++) { ... */\n      jump(tag_321)\n    tag_323:\n      pop\n        /* \"contracts/fountain.sol\":7538:7609  require(totalDonated == balances[user], \"Must finalize entire balance\") */\n      tag_357\n        /* \"contracts/fountain.sol\":7562:7576  balances[user] */\n      tag_358\n      dup6\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/fountain.sol\":5318:5326  balances */\n      0x03\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      swap1\n      jump\n        /* \"contracts/fountain.sol\":7562:7576  balances[user] */\n    tag_358:\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n        /* \"contracts/fountain.sol\":7546:7576  totalDonated == balances[user] */\n      dup3\n      eq\n        /* \"contracts/fountain.sol\":7538:7609  require(totalDonated == balances[user], \"Must finalize entire balance\") */\n      tag_359\n      jump\t// in\n    tag_357:\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n      tag_360\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      0x01\n      dup1\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sstore\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n    tag_360:\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1204:1276  modifier whenNotPaused() {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n    tag_353:\n      0x00\n      mload(0x40)\n      dup1\n      tag_362\n      dup3\n      dup6\n      tag_125\n      jump\t// in\n    tag_362:\n      sub\n      swap1\n      keccak256\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n    tag_211:\n      0x00\n      mload(0x40)\n      tag_364\n      dup2\n      dup5\n      tag_125\n      jump\t// in\n    tag_364:\n        /* \"contracts/fountain.sol\":7723:7732  charities */\n      0x04\n        /* \"contracts/fountain.sol\":531:8142  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup2\n      mstore\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      keccak256\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n    tag_155:\n      mstore(0x00, mul(0x4e487b71, exp(0x02, 0xe0)))\n      mstore(0x04, 0x11)\n      revert(0x00, 0x24)\n    tag_194:\n      mstore(0x00, mul(0x4e487b71, exp(0x02, 0xe0)))\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n    tag_144:\n      mstore(0x00, mul(0x4e487b71, exp(0x02, 0xe0)))\n      mstore(0x04, 0x41)\n      revert(0x00, 0x24)\n    tag_347:\n      dup1\n      tag_85\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x20\n      0x24\n      dup3\n      add\n      mstore\n      0x55534443207472616e7366657220746f2063686172697479206661696c65642e\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      dup2\n      revert\n    tag_316:\n      dup1\n      tag_85\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x25\n      0x24\n      dup3\n      add\n      mstore\n      0x417474656d707420746f20646f6e61746520746f20756e6b6e6f776e20636861\n      0x44\n      dup3\n      add\n      mstore\n      0x726974792e000000000000000000000000000000000000000000000000000000\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      dup2\n      revert\n    tag_359:\n      dup1\n      tag_85\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1c\n      0x24\n      dup3\n      add\n      mstore\n      0x4d7573742066696e616c697a6520656e746972652062616c616e636500000000\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      dup2\n      revert\n    tag_320:\n      dup1\n      tag_85\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x22\n      0x24\n      dup3\n      add\n      mstore\n      0x546f74616c2066696e616c697a6174696f6e20616d6f756e7420746f6f206869\n      0x44\n      dup3\n      add\n      mstore\n      0x6768000000000000000000000000000000000000000000000000000000000000\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      dup2\n      revert\n    tag_276:\n      dup1\n      tag_85\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x27\n      0x24\n      dup3\n      add\n      mstore\n      0x4661696c656420746f2073656e642067617320746f20657068656d6572616c20\n      0x44\n      dup3\n      add\n      mstore\n      0x77616c6c65742e00000000000000000000000000000000000000000000000000\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      dup2\n      revert\n    tag_303:\n      dup1\n      tag_85\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x31\n      0x24\n      dup3\n      add\n      mstore\n      0x43686172697469657320616e6420616d6f756e747320617272617973206f6620\n      0x44\n      dup3\n      add\n      mstore\n      0x646966666572656e74206c656e6774682e000000000000000000000000000000\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      dup2\n      revert\n    tag_301:\n      dup1\n      tag_85\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1d\n      0x24\n      dup3\n      add\n      mstore\n      0x556e617574686f72697a6174696f6e2066696e616c697a6174696f6e2e000000\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      dup2\n      revert\n    tag_208:\n      dup1\n      tag_85\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x23\n      0x24\n      dup3\n      add\n      mstore\n      0x43686172697479206164647265737320616c7265616479207265676973746572\n      0x44\n      dup3\n      add\n      mstore\n      0x65642e0000000000000000000000000000000000000000000000000000000000\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      dup2\n      revert\n    tag_249:\n      dup1\n      tag_85\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1f\n      0x24\n      dup3\n      add\n      mstore\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      dup2\n      revert\n    tag_263:\n      mload(0x40)\n      returndatasize\n      0x00\n      dup3\n      returndatacopy\n      returndatasize\n      dup2\n      revert\n\n    auxdata: 0xa36469706673582212204207b2f49da0e02bc912fe2a58cef7fdcb3fa0b023f1bc011691da8686f295206c6578706572696d656e74616cf564736f6c63430008070041\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60e060405234156200001057600080fd5b62001a7a803803601f19601f82011660e00160e0811067ffffffffffffffff8211171562000067577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052808260e03960808112156200007e57600080fd5b505060e0516200008e816200017d565b6101005161012051620000a1816200017d565b61014051620000b0816200017d565b620000be8183858762000109565b505050506040516118e38062000197833960805182818160f50152610e7f015260a0518281816101eb0152818161102b0152611280015260c05182818161025c0152610e5101528082f35b6000805433600160a060020a031982168117835560405191929091600160a060020a038416917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600160a860020a0319163360a060020a60ff021916176000556001805560c05260025560805260a052565b600160a060020a03811681146200019357600080fd5b5056fe604060808152600436106102e45760007c010000000000000000000000000000000000000000000000000000000081350463480a6fdc81146100ae57634aa4a4fc81146100de57635c975abb81146101285763715018a6811461016a5763745284ce811461018a57637aed774681146101b0576389a3027181146101d457638da5cb5b811461021a5763c31c9c0781146102455763f2fde38b811461028b5763f8b2cb4f81146102a6576102e1565b34156100b8578182fd5b6100c136610431565b6100d181838587898b8d8f610e1e565b5050505050505050818351f35b34156100e8578182fd5b6100f1366103d6565b82517f0000000000000000000000000000000000000000000000000000000000000000600160a060020a03168152602081f35b0381f35b3415610132578182fd5b61013b366103d6565b60ff74010000000000000000000000000000000000000000835404168351806101248383901515815260200190565b3415610174578182fd5b61017d366103d6565b610185610d05565b818351f35b3415610194578182fd5b61019d366104cc565b6101a8818385611173565b505050818351f35b34156101ba578182fd5b6101c3366105e6565b6101cd81836109f3565b5050818351f35b34156101de578182fd5b6101e7366103d6565b82517f0000000000000000000000000000000000000000000000000000000000000000600160a060020a03168152602081f35b3415610224578182fd5b61022d366103d6565b81548351600160a060020a0390911680825290602081f35b341561024f578182fd5b610258366103d6565b82517f0000000000000000000000000000000000000000000000000000000000000000600160a060020a03168152602081f35b3415610295578182fd5b6101856102a1366103ff565b610d54565b34156102b0578182fd5b6102d76102bc366103ff565b600160a060020a031660009081526003602052604090205490565b8351818152602081f35b50505b50600080fd5b600435600160a060020a038116811461030257600080fd5b90565b600082601f83011261031657600080fd5b813561032181610730565b60405161032e828261086d565b828152602080820192508581018185028701820188101561034e57600080fd5b60005b8581101561036d57813585529382019390820190600101610351565b5091979650505050505050565b600082601f83011261038b57600080fd5b813561039681610754565b6040516103a3828261086d565b8281528560208487010111156103b857600080fd5b82602086016020830137600092810160200192909252509392505050565b6000600319820112156103e857600080fd5b50565b600081830312156103fb57600080fd5b5050565b600060206003198301121561041357600080fd5b600435600160a060020a038116811461042b57600080fd5b92915050565b6000808080808080806101006003198a01121561044d57600080fd5b600435600160a060020a03808216821461046657600080fd5b90985060243590808216821461047b57600080fd5b50965060443595506064359450608435935060a43562ffffff80821682146104a257600080fd5b90935060c4359080821682146104b757600080fd5b508092505060e4359050919395975091939597565b600080806060600319850112156104e257600080fd5b6104ea6102ea565b92506024803567ffffffffffffffff8082111561050657600080fd5b86602383011261051557600080fd5b816004013561052381610730565b604051610530828261086d565b82815260208082019250858701818502870188018c101561055057600080fd5b60005b8581101561058b5781358781111561056a57600080fd5b6105788e8b838c010161037a565b8652509382019390820190600101610553565b50919850506044359550505050808311156105a557600080fd5b50506105b48582600401610305565b93959294505050565b6000602082840312156105cf57600080fd5b815180151581146105df57600080fd5b9392505050565b6000806040600319840112156105fb57600080fd5b60043567ffffffffffffffff81111561061357600080fd5b610620848260040161037a565b925050602435600160a060020a038116811461063b57600080fd5b919391925050565b60006020828403121561065557600080fd5b5051919050565b6000815160005b8181101561067d5760208185018101518683015201610663565b8181111561068c576000828601525b509290920192915050565b600061010082019050600160a060020a0380845116835280602085015116602084015262ffffff60408501511660408401528060608501511660608401526080840151608084015260a084015160a084015260c084015160c08401528060e08501511660e08401525092915050565b604051610100810167ffffffffffffffff8111828210171561072a5761072a611507565b60405290565b600067ffffffffffffffff82111561074a5761074a611507565b5060209081020190565b600067ffffffffffffffff82111561076e5761076e611507565b50601f01601f191660200190565b6000821982111561078f5761078f6114d5565b500190565b6000826107b45760e060020a634e487b7102600052601260045260246000fd5b500490565b60008160001904831182151516156107d3576107d36114d5565b500290565b600060018210156107eb576107eb6114d5565b506000190190565b600082821015610805576108056114d5565b500390565b60003d801561083f573d61081d81610754565b60405161082a828261086d565b8281528094503d6000602083013e5050505090565b606091505090565b60a0810181811067ffffffffffffffff8211171561086757610867611507565b60405250565b601f8201601f1916810167ffffffffffffffff8111828210171561089357610893611507565b6040525050565b600080828152600760205260408120541560008114610925576006546801000000000000000081106108ce576108ce611507565b60018101806006558082106108e5576108e56114ee565b507ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01849055506006549281526007602052604090209190915550600190565b5092915050565b600160a060020a03600054163381146103e85760405160e560020a62461bcd02815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606481fd5b60ff740100000000000000000000000000000000000000006000540416156109f15760405160e560020a62461bcd02815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606481fd5b565b604051610a00818361065c565b60048152600160a060020a03806020848403018420541615610a645760405160e560020a62461bcd02815260206004820152602060248201527f43686172697479206e616d6520616c726561647920726567697374657265642e6044820152606481fd5b84166000818152600560205260409020549092506001811691506002900481610a8b57607f165b60208110821415610aaf5760e060020a634e487b7102600052602260045260246000fd5b610ab981156117d3565b5050610ae583610ac8846114b4565b600160a060020a038216600160a060020a03198254161781555050565b610aee8161089a565b50505050565b6040517f095ea7b30000000000000000000000000000000000000000000000000000000060208201908152600160a060020a0384166024830152604480830186905282526064610b44818461086d565b506000808351836000875af1915050610b5b61080a565b818215610b84578151801580610b8057610b7d602083860101602086016105bd565b90505b9150505b80610bd357604051925060e560020a62461bcd02835260206004840152600260248401527f53410000000000000000000000000000000000000000000000000000000000006044840152606483fd5b505050505050565b604051602081017f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a03808516602484015280861660448401525085606483015260648252610c3182610847565b6000808351836000875af1915050610c4761080a565b818215610c70578151801580610c6c57610c69602083860101602086016105bd565b90505b9150505b80610cbf57604051925060e560020a62461bcd02835260206004840152600360248401527f53544600000000000000000000000000000000000000000000000000000000006044840152606483fd5b50505050505050565b600060ff821660ff811415610cdf57610cdf6114d5565b60010192915050565b600081518310610cfa57610cfa6114ee565b506020918202010190565b610d0d61092c565b600054600160a060020a031981166000556000600160a060020a0382167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a350565b610d5c61092c565b600160a060020a0380821680610dda5760405160e560020a62461bcd02815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608481fd5b60005481600160a060020a0319821617600055838382167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a350505050565b610e26610987565b6002610e36816001541415611846565b80600155610e4684303386610bdb565b600160a060020a03807f000000000000000000000000000000000000000000000000000000000000000016610e7c868287610af4565b817f0000000000000000000000000000000000000000000000000000000000000000168354610ea9610706565b600160a060020a0388168152600160a060020a038316602082015262ffffff8c166040828101919091523060608301528a60808301528260a08301528b60c0830152600092508260e0830152843b610eff578283fd5b80517fdb3e219800000000000000000000000000000000000000000000000000000000815260208182610f358660048601610697565b0383878a5af1925082610f4a57610f4a611893565b838315610f6a57610f5b3d8361086d565b610f673d830183610643565b90505b88549350853b610f78578485fd5b82517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526004810185905291508482602481838a5af1955085610fbe57610fbe611893565b8515610fda57610fce3d8361086d565b610fda3d8301836103eb565b885495508485868551898c8f165af19550610ff361080a565b50610ffd866116a0565b611007818d6107f3565b95505050611013610706565b600160a060020a038a1681529150600160a060020a037f0000000000000000000000000000000000000000000000000000000000000000871616602083015262ffffff8e16828201523060608301528a60808301528360a08301528e60c08301528260e0830152843b611084578283fd5b805195507f414bf389000000000000000000000000000000000000000000000000000000008652602086876110bc8560048b01610697565b038886895af19450846110d1576110d1611893565b82935084156110f3576110e43d8761086d565b6110f03d870187610643565b93505b600160a060020a0388166000908152600360205260409020955061111884875461077c565b909555505092549151868152602081018390526040810184905291928585337f0860654ad3d0539dbac86150676768b53a47900bb45c5eb8d8d000ffbc4f67e6606087a45050505061116960018055565b5050505050505050565b61117b610987565b61118a60026001541415611846565b6002600155600160a060020a038082163314806111ba576111b58260005416600160a060020a031690565b331490505b6111c381611786565b5082516111d285518214611713565b506000805b845160ff82168181106111eb57505061124f565b6111ff6111f8828a610ce8565b518561077c565b935061123d61123661122a61121d611217858c610ce8565b516114b4565b54600160a060020a031690565b600160a060020a031690565b151561156d565b505061124881610cc8565b90506111d7565b5061127a61127184600160a060020a0316600090815260036020526040902090565b5482111561162d565b600080837f00000000000000000000000000000000000000000000000000000000000000001693505b855160ff82168181106112b7575050611460565b6112c1818a610ce8565b5191506112ec856112e689600160a060020a0316600090815260036020526040902090565b546107f3565b61131261130c61130688611300868f610ce8565b51610794565b836107b9565b8461077c565b92505061131f88516107d8565b81141561134b57611348846112e689600160a060020a0316600090815260036020526040902090565b91505b61135b61121d611217838b610ce8565b863b61136657600080fd5b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a03821660048201526024810184905260208160448160008c5af19150816113bc576113bc611893565b600082156113dd576113ce3d8361086d565b6113da3d8301836105bd565b90505b6113e681611520565b5050506113f38189610ce8565b5161140461121d611217848c610ce8565b915061140f8161149b565b60405184815290915082828a7fb0657052acbf78260696b569dbe3a1f1f39287b5a3c378f5bca0c20fbf062dec602085a450505061144d818461077c565b92505061145981610cc8565b90506112a3565b5061148a61148285600160a060020a0316600090815260036020526040902090565b5482146115e0565b50505061149660018055565b505050565b6000604051806114ab828561065c565b03902092915050565b60006040516114c3818461065c565b60048152819003602001902092915050565b60e060020a634e487b7102600052601160045260246000fd5b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052604160045260246000fd5b806103e85760405160e560020a62461bcd02815260206004820152602060248201527f55534443207472616e7366657220746f2063686172697479206661696c65642e6044820152606481fd5b806103e85760405160e560020a62461bcd02815260206004820152602560248201527f417474656d707420746f20646f6e61746520746f20756e6b6e6f776e2063686160448201527f726974792e0000000000000000000000000000000000000000000000000000006064820152608481fd5b806103e85760405160e560020a62461bcd02815260206004820152601c60248201527f4d7573742066696e616c697a6520656e746972652062616c616e6365000000006044820152606481fd5b806103e85760405160e560020a62461bcd02815260206004820152602260248201527f546f74616c2066696e616c697a6174696f6e20616d6f756e7420746f6f20686960448201527f67680000000000000000000000000000000000000000000000000000000000006064820152608481fd5b806103e85760405160e560020a62461bcd02815260206004820152602760248201527f4661696c656420746f2073656e642067617320746f20657068656d6572616c2060448201527f77616c6c65742e000000000000000000000000000000000000000000000000006064820152608481fd5b806103e85760405160e560020a62461bcd02815260206004820152603160248201527f43686172697469657320616e6420616d6f756e747320617272617973206f662060448201527f646966666572656e74206c656e6774682e0000000000000000000000000000006064820152608481fd5b806103e85760405160e560020a62461bcd02815260206004820152601d60248201527f556e617574686f72697a6174696f6e2066696e616c697a6174696f6e2e0000006044820152606481fd5b806103e85760405160e560020a62461bcd02815260206004820152602360248201527f43686172697479206164647265737320616c726561647920726567697374657260448201527f65642e00000000000000000000000000000000000000000000000000000000006064820152608481fd5b806103e85760405160e560020a62461bcd02815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606481fd5b6040513d6000823e3d81fdfea36469706673582212204207b2f49da0e02bc912fe2a58cef7fdcb3fa0b023f1bc011691da8686f295206c6578706572696d656e74616cf564736f6c63430008070041",
							"opcodes": "PUSH1 0xE0 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH3 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1A7A DUP1 CODESIZE SUB PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND PUSH1 0xE0 ADD PUSH1 0xE0 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x67 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MSTORE DUP1 DUP3 PUSH1 0xE0 CODECOPY PUSH1 0x80 DUP2 SLT ISZERO PUSH3 0x7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0xE0 MLOAD PUSH3 0x8E DUP2 PUSH3 0x17D JUMP JUMPDEST PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH3 0xA1 DUP2 PUSH3 0x17D JUMP JUMPDEST PUSH2 0x140 MLOAD PUSH3 0xB0 DUP2 PUSH3 0x17D JUMP JUMPDEST PUSH3 0xBE DUP2 DUP4 DUP6 DUP8 PUSH3 0x109 JUMP JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD PUSH2 0x18E3 DUP1 PUSH3 0x197 DUP4 CODECOPY PUSH1 0x80 MLOAD DUP3 DUP2 DUP2 PUSH1 0xF5 ADD MSTORE PUSH2 0xE7F ADD MSTORE PUSH1 0xA0 MLOAD DUP3 DUP2 DUP2 PUSH2 0x1EB ADD MSTORE DUP2 DUP2 PUSH2 0x102B ADD MSTORE PUSH2 0x1280 ADD MSTORE PUSH1 0xC0 MLOAD DUP3 DUP2 DUP2 PUSH2 0x25C ADD MSTORE PUSH2 0xE51 ADD MSTORE DUP1 DUP3 RETURN JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT DUP3 AND DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x1 PUSH1 0xA8 PUSH1 0x2 EXP SUB NOT AND CALLER PUSH1 0xA0 PUSH1 0x2 EXP PUSH1 0xFF MUL NOT AND OR PUSH1 0x0 SSTORE PUSH1 0x1 DUP1 SSTORE PUSH1 0xC0 MSTORE PUSH1 0x2 SSTORE PUSH1 0x80 MSTORE PUSH1 0xA0 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND DUP2 EQ PUSH3 0x193 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2E4 JUMPI PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 DUP2 CALLDATALOAD DIV PUSH4 0x480A6FDC DUP2 EQ PUSH2 0xAE JUMPI PUSH4 0x4AA4A4FC DUP2 EQ PUSH2 0xDE JUMPI PUSH4 0x5C975ABB DUP2 EQ PUSH2 0x128 JUMPI PUSH4 0x715018A6 DUP2 EQ PUSH2 0x16A JUMPI PUSH4 0x745284CE DUP2 EQ PUSH2 0x18A JUMPI PUSH4 0x7AED7746 DUP2 EQ PUSH2 0x1B0 JUMPI PUSH4 0x89A30271 DUP2 EQ PUSH2 0x1D4 JUMPI PUSH4 0x8DA5CB5B DUP2 EQ PUSH2 0x21A JUMPI PUSH4 0xC31C9C07 DUP2 EQ PUSH2 0x245 JUMPI PUSH4 0xF2FDE38B DUP2 EQ PUSH2 0x28B JUMPI PUSH4 0xF8B2CB4F DUP2 EQ PUSH2 0x2A6 JUMPI PUSH2 0x2E1 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0xB8 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xC1 CALLDATASIZE PUSH2 0x431 JUMP JUMPDEST PUSH2 0xD1 DUP2 DUP4 DUP6 DUP8 DUP10 DUP12 DUP14 DUP16 PUSH2 0xE1E JUMP JUMPDEST POP POP POP POP POP POP POP POP DUP2 DUP4 MLOAD RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0xE8 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xF1 CALLDATASIZE PUSH2 0x3D6 JUMP JUMPDEST DUP3 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 RETURN JUMPDEST SUB DUP2 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x132 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x13B CALLDATASIZE PUSH2 0x3D6 JUMP JUMPDEST PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 DUP4 SLOAD DIV AND DUP4 MLOAD DUP1 PUSH2 0x124 DUP4 DUP4 SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x174 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x17D CALLDATASIZE PUSH2 0x3D6 JUMP JUMPDEST PUSH2 0x185 PUSH2 0xD05 JUMP JUMPDEST DUP2 DUP4 MLOAD RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x194 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x19D CALLDATASIZE PUSH2 0x4CC JUMP JUMPDEST PUSH2 0x1A8 DUP2 DUP4 DUP6 PUSH2 0x1173 JUMP JUMPDEST POP POP POP DUP2 DUP4 MLOAD RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x1BA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1C3 CALLDATASIZE PUSH2 0x5E6 JUMP JUMPDEST PUSH2 0x1CD DUP2 DUP4 PUSH2 0x9F3 JUMP JUMPDEST POP POP DUP2 DUP4 MLOAD RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x1DE JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1E7 CALLDATASIZE PUSH2 0x3D6 JUMP JUMPDEST DUP3 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x224 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x22D CALLDATASIZE PUSH2 0x3D6 JUMP JUMPDEST DUP2 SLOAD DUP4 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND DUP1 DUP3 MSTORE SWAP1 PUSH1 0x20 DUP2 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x24F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x258 CALLDATASIZE PUSH2 0x3D6 JUMP JUMPDEST DUP3 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x295 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x185 PUSH2 0x2A1 CALLDATASIZE PUSH2 0x3FF JUMP JUMPDEST PUSH2 0xD54 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x2B0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2D7 PUSH2 0x2BC CALLDATASIZE PUSH2 0x3FF JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST DUP4 MLOAD DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 RETURN JUMPDEST POP POP JUMPDEST POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND DUP2 EQ PUSH2 0x302 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x321 DUP2 PUSH2 0x730 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x32E DUP3 DUP3 PUSH2 0x86D JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 POP DUP6 DUP2 ADD DUP2 DUP6 MUL DUP8 ADD DUP3 ADD DUP9 LT ISZERO PUSH2 0x34E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x36D JUMPI DUP2 CALLDATALOAD DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x351 JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x38B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x396 DUP2 PUSH2 0x754 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A3 DUP3 DUP3 PUSH2 0x86D JUMP JUMPDEST DUP3 DUP2 MSTORE DUP6 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x3B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP3 DUP2 ADD PUSH1 0x20 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 NOT DUP3 ADD SLT ISZERO PUSH2 0x3E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SUB SLT ISZERO PUSH2 0x3FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x3 NOT DUP4 ADD SLT ISZERO PUSH2 0x413 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND DUP2 EQ PUSH2 0x42B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x100 PUSH1 0x3 NOT DUP11 ADD SLT ISZERO PUSH2 0x44D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP3 AND DUP3 EQ PUSH2 0x466 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP9 POP PUSH1 0x24 CALLDATALOAD SWAP1 DUP1 DUP3 AND DUP3 EQ PUSH2 0x47B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP7 POP PUSH1 0x44 CALLDATALOAD SWAP6 POP PUSH1 0x64 CALLDATALOAD SWAP5 POP PUSH1 0x84 CALLDATALOAD SWAP4 POP PUSH1 0xA4 CALLDATALOAD PUSH3 0xFFFFFF DUP1 DUP3 AND DUP3 EQ PUSH2 0x4A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 POP PUSH1 0xC4 CALLDATALOAD SWAP1 DUP1 DUP3 AND DUP3 EQ PUSH2 0x4B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 SWAP3 POP POP PUSH1 0xE4 CALLDATALOAD SWAP1 POP SWAP2 SWAP4 SWAP6 SWAP8 POP SWAP2 SWAP4 SWAP6 SWAP8 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x60 PUSH1 0x3 NOT DUP6 ADD SLT ISZERO PUSH2 0x4E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4EA PUSH2 0x2EA JUMP JUMPDEST SWAP3 POP PUSH1 0x24 DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x506 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x23 DUP4 ADD SLT PUSH2 0x515 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x4 ADD CALLDATALOAD PUSH2 0x523 DUP2 PUSH2 0x730 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x530 DUP3 DUP3 PUSH2 0x86D JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 POP DUP6 DUP8 ADD DUP2 DUP6 MUL DUP8 ADD DUP9 ADD DUP13 LT ISZERO PUSH2 0x550 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x58B JUMPI DUP2 CALLDATALOAD DUP8 DUP2 GT ISZERO PUSH2 0x56A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x578 DUP15 DUP12 DUP4 DUP13 ADD ADD PUSH2 0x37A JUMP JUMPDEST DUP7 MSTORE POP SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x553 JUMP JUMPDEST POP SWAP2 SWAP9 POP POP PUSH1 0x44 CALLDATALOAD SWAP6 POP POP POP POP DUP1 DUP4 GT ISZERO PUSH2 0x5A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH2 0x5B4 DUP6 DUP3 PUSH1 0x4 ADD PUSH2 0x305 JUMP JUMPDEST SWAP4 SWAP6 SWAP3 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x5DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 PUSH1 0x3 NOT DUP5 ADD SLT ISZERO PUSH2 0x5FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x620 DUP5 DUP3 PUSH1 0x4 ADD PUSH2 0x37A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND DUP2 EQ PUSH2 0x63B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP4 SWAP2 SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x655 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x67D JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD MSTORE ADD PUSH2 0x663 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x68C JUMPI PUSH1 0x0 DUP3 DUP7 ADD MSTORE JUMPDEST POP SWAP3 SWAP1 SWAP3 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 ADD SWAP1 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP5 MLOAD AND DUP4 MSTORE DUP1 PUSH1 0x20 DUP6 ADD MLOAD AND PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0xFFFFFF PUSH1 0x40 DUP6 ADD MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE DUP1 PUSH1 0x60 DUP6 ADD MLOAD AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP5 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE DUP1 PUSH1 0xE0 DUP6 ADD MLOAD AND PUSH1 0xE0 DUP5 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x72A JUMPI PUSH2 0x72A PUSH2 0x1507 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x74A JUMPI PUSH2 0x74A PUSH2 0x1507 JUMP JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x76E JUMPI PUSH2 0x76E PUSH2 0x1507 JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x78F JUMPI PUSH2 0x78F PUSH2 0x14D5 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x7B4 JUMPI PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x7D3 JUMPI PUSH2 0x7D3 PUSH2 0x14D5 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 LT ISZERO PUSH2 0x7EB JUMPI PUSH2 0x7EB PUSH2 0x14D5 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x805 JUMPI PUSH2 0x805 PUSH2 0x14D5 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 RETURNDATASIZE DUP1 ISZERO PUSH2 0x83F JUMPI RETURNDATASIZE PUSH2 0x81D DUP2 PUSH2 0x754 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x82A DUP3 DUP3 PUSH2 0x86D JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP5 POP RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP4 ADD RETURNDATACOPY POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x867 JUMPI PUSH2 0x867 PUSH2 0x1507 JUMP JUMPDEST PUSH1 0x40 MSTORE POP JUMP JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x893 JUMPI PUSH2 0x893 PUSH2 0x1507 JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO PUSH1 0x0 DUP2 EQ PUSH2 0x925 JUMPI PUSH1 0x6 SLOAD PUSH9 0x10000000000000000 DUP2 LT PUSH2 0x8CE JUMPI PUSH2 0x8CE PUSH2 0x1507 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD DUP1 PUSH1 0x6 SSTORE DUP1 DUP3 LT PUSH2 0x8E5 JUMPI PUSH2 0x8E5 PUSH2 0x14EE JUMP JUMPDEST POP PUSH32 0xF652222313E28459528D920B65115C16C04F3EFC82AAEDC97BE59F3F377C0D3F ADD DUP5 SWAP1 SSTORE POP PUSH1 0x6 SLOAD SWAP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE POP PUSH1 0x1 SWAP1 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x0 SLOAD AND CALLER DUP2 EQ PUSH2 0x3E8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 REVERT JUMPDEST PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 PUSH1 0x0 SLOAD DIV AND ISZERO PUSH2 0x9F1 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA00 DUP2 DUP4 PUSH2 0x65C JUMP JUMPDEST PUSH1 0x4 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 PUSH1 0x20 DUP5 DUP5 SUB ADD DUP5 KECCAK256 SLOAD AND ISZERO PUSH2 0xA64 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43686172697479206E616D6520616C726561647920726567697374657265642E PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 REVERT JUMPDEST DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP3 POP PUSH1 0x1 DUP2 AND SWAP2 POP PUSH1 0x2 SWAP1 DIV DUP2 PUSH2 0xA8B JUMPI PUSH1 0x7F AND JUMPDEST PUSH1 0x20 DUP2 LT DUP3 EQ ISZERO PUSH2 0xAAF JUMPI PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xAB9 DUP2 ISZERO PUSH2 0x17D3 JUMP JUMPDEST POP POP PUSH2 0xAE5 DUP4 PUSH2 0xAC8 DUP5 PUSH2 0x14B4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT DUP3 SLOAD AND OR DUP2 SSTORE POP POP JUMP JUMPDEST PUSH2 0xAEE DUP2 PUSH2 0x89A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP7 SWAP1 MSTORE DUP3 MSTORE PUSH1 0x64 PUSH2 0xB44 DUP2 DUP5 PUSH2 0x86D JUMP JUMPDEST POP PUSH1 0x0 DUP1 DUP4 MLOAD DUP4 PUSH1 0x0 DUP8 GAS CALL SWAP2 POP POP PUSH2 0xB5B PUSH2 0x80A JUMP JUMPDEST DUP2 DUP3 ISZERO PUSH2 0xB84 JUMPI DUP2 MLOAD DUP1 ISZERO DUP1 PUSH2 0xB80 JUMPI PUSH2 0xB7D PUSH1 0x20 DUP4 DUP7 ADD ADD PUSH1 0x20 DUP7 ADD PUSH2 0x5BD JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 POP POP JUMPDEST DUP1 PUSH2 0xBD3 JUMPI PUSH1 0x40 MLOAD SWAP3 POP PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP5 ADD MSTORE PUSH32 0x5341000000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x64 DUP4 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND PUSH1 0x24 DUP5 ADD MSTORE DUP1 DUP7 AND PUSH1 0x44 DUP5 ADD MSTORE POP DUP6 PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x64 DUP3 MSTORE PUSH2 0xC31 DUP3 PUSH2 0x847 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 MLOAD DUP4 PUSH1 0x0 DUP8 GAS CALL SWAP2 POP POP PUSH2 0xC47 PUSH2 0x80A JUMP JUMPDEST DUP2 DUP3 ISZERO PUSH2 0xC70 JUMPI DUP2 MLOAD DUP1 ISZERO DUP1 PUSH2 0xC6C JUMPI PUSH2 0xC69 PUSH1 0x20 DUP4 DUP7 ADD ADD PUSH1 0x20 DUP7 ADD PUSH2 0x5BD JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 POP POP JUMPDEST DUP1 PUSH2 0xCBF JUMPI PUSH1 0x40 MLOAD SWAP3 POP PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP5 ADD MSTORE PUSH32 0x5354460000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x64 DUP4 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP2 EQ ISZERO PUSH2 0xCDF JUMPI PUSH2 0xCDF PUSH2 0x14D5 JUMP JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 LT PUSH2 0xCFA JUMPI PUSH2 0xCFA PUSH2 0x14EE JUMP JUMPDEST POP PUSH1 0x20 SWAP2 DUP3 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0xD0D PUSH2 0x92C JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT DUP2 AND PUSH1 0x0 SSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 PUSH1 0x40 MLOAD LOG3 POP JUMP JUMPDEST PUSH2 0xD5C PUSH2 0x92C JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP3 AND DUP1 PUSH2 0xDDA JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 REVERT JUMPDEST PUSH1 0x0 SLOAD DUP2 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT DUP3 AND OR PUSH1 0x0 SSTORE DUP4 DUP4 DUP3 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 PUSH1 0x40 MLOAD LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0xE26 PUSH2 0x987 JUMP JUMPDEST PUSH1 0x2 PUSH2 0xE36 DUP2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x1846 JUMP JUMPDEST DUP1 PUSH1 0x1 SSTORE PUSH2 0xE46 DUP5 ADDRESS CALLER DUP7 PUSH2 0xBDB JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 PUSH32 0x0 AND PUSH2 0xE7C DUP7 DUP3 DUP8 PUSH2 0xAF4 JUMP JUMPDEST DUP2 PUSH32 0x0 AND DUP4 SLOAD PUSH2 0xEA9 PUSH2 0x706 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF DUP13 AND PUSH1 0x40 DUP3 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE ADDRESS PUSH1 0x60 DUP4 ADD MSTORE DUP11 PUSH1 0x80 DUP4 ADD MSTORE DUP3 PUSH1 0xA0 DUP4 ADD MSTORE DUP12 PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x0 SWAP3 POP DUP3 PUSH1 0xE0 DUP4 ADD MSTORE DUP5 EXTCODESIZE PUSH2 0xEFF JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH32 0xDB3E219800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 DUP2 DUP3 PUSH2 0xF35 DUP7 PUSH1 0x4 DUP7 ADD PUSH2 0x697 JUMP JUMPDEST SUB DUP4 DUP8 DUP11 GAS CALL SWAP3 POP DUP3 PUSH2 0xF4A JUMPI PUSH2 0xF4A PUSH2 0x1893 JUMP JUMPDEST DUP4 DUP4 ISZERO PUSH2 0xF6A JUMPI PUSH2 0xF5B RETURNDATASIZE DUP4 PUSH2 0x86D JUMP JUMPDEST PUSH2 0xF67 RETURNDATASIZE DUP4 ADD DUP4 PUSH2 0x643 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP9 SLOAD SWAP4 POP DUP6 EXTCODESIZE PUSH2 0xF78 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP3 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE SWAP2 POP DUP5 DUP3 PUSH1 0x24 DUP2 DUP4 DUP11 GAS CALL SWAP6 POP DUP6 PUSH2 0xFBE JUMPI PUSH2 0xFBE PUSH2 0x1893 JUMP JUMPDEST DUP6 ISZERO PUSH2 0xFDA JUMPI PUSH2 0xFCE RETURNDATASIZE DUP4 PUSH2 0x86D JUMP JUMPDEST PUSH2 0xFDA RETURNDATASIZE DUP4 ADD DUP4 PUSH2 0x3EB JUMP JUMPDEST DUP9 SLOAD SWAP6 POP DUP5 DUP6 DUP7 DUP6 MLOAD DUP10 DUP13 DUP16 AND GAS CALL SWAP6 POP PUSH2 0xFF3 PUSH2 0x80A JUMP JUMPDEST POP PUSH2 0xFFD DUP7 PUSH2 0x16A0 JUMP JUMPDEST PUSH2 0x1007 DUP2 DUP14 PUSH2 0x7F3 JUMP JUMPDEST SWAP6 POP POP POP PUSH2 0x1013 PUSH2 0x706 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP11 AND DUP2 MSTORE SWAP2 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH32 0x0 DUP8 AND AND PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0xFFFFFF DUP15 AND DUP3 DUP3 ADD MSTORE ADDRESS PUSH1 0x60 DUP4 ADD MSTORE DUP11 PUSH1 0x80 DUP4 ADD MSTORE DUP4 PUSH1 0xA0 DUP4 ADD MSTORE DUP15 PUSH1 0xC0 DUP4 ADD MSTORE DUP3 PUSH1 0xE0 DUP4 ADD MSTORE DUP5 EXTCODESIZE PUSH2 0x1084 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD SWAP6 POP PUSH32 0x414BF38900000000000000000000000000000000000000000000000000000000 DUP7 MSTORE PUSH1 0x20 DUP7 DUP8 PUSH2 0x10BC DUP6 PUSH1 0x4 DUP12 ADD PUSH2 0x697 JUMP JUMPDEST SUB DUP9 DUP7 DUP10 GAS CALL SWAP5 POP DUP5 PUSH2 0x10D1 JUMPI PUSH2 0x10D1 PUSH2 0x1893 JUMP JUMPDEST DUP3 SWAP4 POP DUP5 ISZERO PUSH2 0x10F3 JUMPI PUSH2 0x10E4 RETURNDATASIZE DUP8 PUSH2 0x86D JUMP JUMPDEST PUSH2 0x10F0 RETURNDATASIZE DUP8 ADD DUP8 PUSH2 0x643 JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP6 POP PUSH2 0x1118 DUP5 DUP8 SLOAD PUSH2 0x77C JUMP JUMPDEST SWAP1 SWAP6 SSTORE POP POP SWAP3 SLOAD SWAP2 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE SWAP2 SWAP3 DUP6 DUP6 CALLER PUSH32 0x860654AD3D0539DBAC86150676768B53A47900BB45C5EB8D8D000FFBC4F67E6 PUSH1 0x60 DUP8 LOG4 POP POP POP POP PUSH2 0x1169 PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x117B PUSH2 0x987 JUMP JUMPDEST PUSH2 0x118A PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x1846 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP3 AND CALLER EQ DUP1 PUSH2 0x11BA JUMPI PUSH2 0x11B5 DUP3 PUSH1 0x0 SLOAD AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST CALLER EQ SWAP1 POP JUMPDEST PUSH2 0x11C3 DUP2 PUSH2 0x1786 JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x11D2 DUP6 MLOAD DUP3 EQ PUSH2 0x1713 JUMP JUMPDEST POP PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD PUSH1 0xFF DUP3 AND DUP2 DUP2 LT PUSH2 0x11EB JUMPI POP POP PUSH2 0x124F JUMP JUMPDEST PUSH2 0x11FF PUSH2 0x11F8 DUP3 DUP11 PUSH2 0xCE8 JUMP JUMPDEST MLOAD DUP6 PUSH2 0x77C JUMP JUMPDEST SWAP4 POP PUSH2 0x123D PUSH2 0x1236 PUSH2 0x122A PUSH2 0x121D PUSH2 0x1217 DUP6 DUP13 PUSH2 0xCE8 JUMP JUMPDEST MLOAD PUSH2 0x14B4 JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x156D JUMP JUMPDEST POP POP PUSH2 0x1248 DUP2 PUSH2 0xCC8 JUMP JUMPDEST SWAP1 POP PUSH2 0x11D7 JUMP JUMPDEST POP PUSH2 0x127A PUSH2 0x1271 DUP5 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD DUP3 GT ISZERO PUSH2 0x162D JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH32 0x0 AND SWAP4 POP JUMPDEST DUP6 MLOAD PUSH1 0xFF DUP3 AND DUP2 DUP2 LT PUSH2 0x12B7 JUMPI POP POP PUSH2 0x1460 JUMP JUMPDEST PUSH2 0x12C1 DUP2 DUP11 PUSH2 0xCE8 JUMP JUMPDEST MLOAD SWAP2 POP PUSH2 0x12EC DUP6 PUSH2 0x12E6 DUP10 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH2 0x7F3 JUMP JUMPDEST PUSH2 0x1312 PUSH2 0x130C PUSH2 0x1306 DUP9 PUSH2 0x1300 DUP7 DUP16 PUSH2 0xCE8 JUMP JUMPDEST MLOAD PUSH2 0x794 JUMP JUMPDEST DUP4 PUSH2 0x7B9 JUMP JUMPDEST DUP5 PUSH2 0x77C JUMP JUMPDEST SWAP3 POP POP PUSH2 0x131F DUP9 MLOAD PUSH2 0x7D8 JUMP JUMPDEST DUP2 EQ ISZERO PUSH2 0x134B JUMPI PUSH2 0x1348 DUP5 PUSH2 0x12E6 DUP10 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x135B PUSH2 0x121D PUSH2 0x1217 DUP4 DUP12 PUSH2 0xCE8 JUMP JUMPDEST DUP7 EXTCODESIZE PUSH2 0x1366 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x20 DUP2 PUSH1 0x44 DUP2 PUSH1 0x0 DUP13 GAS CALL SWAP2 POP DUP2 PUSH2 0x13BC JUMPI PUSH2 0x13BC PUSH2 0x1893 JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO PUSH2 0x13DD JUMPI PUSH2 0x13CE RETURNDATASIZE DUP4 PUSH2 0x86D JUMP JUMPDEST PUSH2 0x13DA RETURNDATASIZE DUP4 ADD DUP4 PUSH2 0x5BD JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x13E6 DUP2 PUSH2 0x1520 JUMP JUMPDEST POP POP POP PUSH2 0x13F3 DUP2 DUP10 PUSH2 0xCE8 JUMP JUMPDEST MLOAD PUSH2 0x1404 PUSH2 0x121D PUSH2 0x1217 DUP5 DUP13 PUSH2 0xCE8 JUMP JUMPDEST SWAP2 POP PUSH2 0x140F DUP2 PUSH2 0x149B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 DUP2 MSTORE SWAP1 SWAP2 POP DUP3 DUP3 DUP11 PUSH32 0xB0657052ACBF78260696B569DBE3A1F1F39287B5A3C378F5BCA0C20FBF062DEC PUSH1 0x20 DUP6 LOG4 POP POP POP PUSH2 0x144D DUP2 DUP5 PUSH2 0x77C JUMP JUMPDEST SWAP3 POP POP PUSH2 0x1459 DUP2 PUSH2 0xCC8 JUMP JUMPDEST SWAP1 POP PUSH2 0x12A3 JUMP JUMPDEST POP PUSH2 0x148A PUSH2 0x1482 DUP6 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD DUP3 EQ PUSH2 0x15E0 JUMP JUMPDEST POP POP POP PUSH2 0x1496 PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH2 0x14AB DUP3 DUP6 PUSH2 0x65C JUMP JUMPDEST SUB SWAP1 KECCAK256 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH2 0x14C3 DUP2 DUP5 PUSH2 0x65C JUMP JUMPDEST PUSH1 0x4 DUP2 MSTORE DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 PUSH2 0x3E8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x55534443207472616E7366657220746F2063686172697479206661696C65642E PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 REVERT JUMPDEST DUP1 PUSH2 0x3E8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x417474656D707420746F20646F6E61746520746F20756E6B6E6F776E20636861 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x726974792E000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 REVERT JUMPDEST DUP1 PUSH2 0x3E8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742066696E616C697A6520656E746972652062616C616E636500000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 REVERT JUMPDEST DUP1 PUSH2 0x3E8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F74616C2066696E616C697A6174696F6E20616D6F756E7420746F6F206869 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6768000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 REVERT JUMPDEST DUP1 PUSH2 0x3E8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4661696C656420746F2073656E642067617320746F20657068656D6572616C20 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x77616C6C65742E00000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 REVERT JUMPDEST DUP1 PUSH2 0x3E8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43686172697469657320616E6420616D6F756E747320617272617973206F6620 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x646966666572656E74206C656E6774682E000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 REVERT JUMPDEST DUP1 PUSH2 0x3E8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E617574686F72697A6174696F6E2066696E616C697A6174696F6E2E000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 REVERT JUMPDEST DUP1 PUSH2 0x3E8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43686172697479206164647265737320616C7265616479207265676973746572 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x65642E0000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 REVERT JUMPDEST DUP1 PUSH2 0x3E8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE DUP2 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 TIMESTAMP SMOD 0xB2 DELEGATECALL SWAP14 LOG0 0xE0 0x2B 0xC9 SLT INVALID 0x2A PC 0xCE 0xF7 REVERT 0xCB EXTCODEHASH LOG0 0xB0 0x23 CALL 0xBC ADD AND SWAP2 0xDA DUP7 DUP7 CALLCODE SWAP6 KECCAK256 PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP COINBASE ",
							"sourceMap": "531:7611:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;531:7611:9;;;;;-1:-1:-1;531:7611:9;;;;;;;;;;;;;;-1:-1:-1;;531:7611:9;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;1942:246;2525:6:0;531:7611:9;;719:10:4;-1:-1:-1;;;;;;531:7611:9;;;;;;;;;;719:10:4;;-1:-1:-1;;;;;531:7611:9;;;2573:40:0;;;-1:-1:-1;;;;;;531:7611:9;719:10:4;-1:-1:-1;;;;;;531:7611:9;;2525:6:0;531:7611:9;;;;2051:24;;531:7611;;2145:14;;531:7611;2169:12;1942:246::o;531:7611::-;-1:-1:-1;;;;;531:7611:9;;;;;;;;;;;:::o"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {
								"1267": [
									{
										"length": 32,
										"start": 245
									},
									{
										"length": 32,
										"start": 3711
									}
								],
								"1270": [
									{
										"length": 32,
										"start": 491
									},
									{
										"length": 32,
										"start": 4139
									},
									{
										"length": 32,
										"start": 4736
									}
								],
								"1273": [
									{
										"length": 32,
										"start": 604
									},
									{
										"length": 32,
										"start": 3665
									}
								]
							},
							"linkReferences": {},
							"object": "604060808152600436106102e45760007c010000000000000000000000000000000000000000000000000000000081350463480a6fdc81146100ae57634aa4a4fc81146100de57635c975abb81146101285763715018a6811461016a5763745284ce811461018a57637aed774681146101b0576389a3027181146101d457638da5cb5b811461021a5763c31c9c0781146102455763f2fde38b811461028b5763f8b2cb4f81146102a6576102e1565b34156100b8578182fd5b6100c136610431565b6100d181838587898b8d8f610e1e565b5050505050505050818351f35b34156100e8578182fd5b6100f1366103d6565b82517f0000000000000000000000000000000000000000000000000000000000000000600160a060020a03168152602081f35b0381f35b3415610132578182fd5b61013b366103d6565b60ff74010000000000000000000000000000000000000000835404168351806101248383901515815260200190565b3415610174578182fd5b61017d366103d6565b610185610d05565b818351f35b3415610194578182fd5b61019d366104cc565b6101a8818385611173565b505050818351f35b34156101ba578182fd5b6101c3366105e6565b6101cd81836109f3565b5050818351f35b34156101de578182fd5b6101e7366103d6565b82517f0000000000000000000000000000000000000000000000000000000000000000600160a060020a03168152602081f35b3415610224578182fd5b61022d366103d6565b81548351600160a060020a0390911680825290602081f35b341561024f578182fd5b610258366103d6565b82517f0000000000000000000000000000000000000000000000000000000000000000600160a060020a03168152602081f35b3415610295578182fd5b6101856102a1366103ff565b610d54565b34156102b0578182fd5b6102d76102bc366103ff565b600160a060020a031660009081526003602052604090205490565b8351818152602081f35b50505b50600080fd5b600435600160a060020a038116811461030257600080fd5b90565b600082601f83011261031657600080fd5b813561032181610730565b60405161032e828261086d565b828152602080820192508581018185028701820188101561034e57600080fd5b60005b8581101561036d57813585529382019390820190600101610351565b5091979650505050505050565b600082601f83011261038b57600080fd5b813561039681610754565b6040516103a3828261086d565b8281528560208487010111156103b857600080fd5b82602086016020830137600092810160200192909252509392505050565b6000600319820112156103e857600080fd5b50565b600081830312156103fb57600080fd5b5050565b600060206003198301121561041357600080fd5b600435600160a060020a038116811461042b57600080fd5b92915050565b6000808080808080806101006003198a01121561044d57600080fd5b600435600160a060020a03808216821461046657600080fd5b90985060243590808216821461047b57600080fd5b50965060443595506064359450608435935060a43562ffffff80821682146104a257600080fd5b90935060c4359080821682146104b757600080fd5b508092505060e4359050919395975091939597565b600080806060600319850112156104e257600080fd5b6104ea6102ea565b92506024803567ffffffffffffffff8082111561050657600080fd5b86602383011261051557600080fd5b816004013561052381610730565b604051610530828261086d565b82815260208082019250858701818502870188018c101561055057600080fd5b60005b8581101561058b5781358781111561056a57600080fd5b6105788e8b838c010161037a565b8652509382019390820190600101610553565b50919850506044359550505050808311156105a557600080fd5b50506105b48582600401610305565b93959294505050565b6000602082840312156105cf57600080fd5b815180151581146105df57600080fd5b9392505050565b6000806040600319840112156105fb57600080fd5b60043567ffffffffffffffff81111561061357600080fd5b610620848260040161037a565b925050602435600160a060020a038116811461063b57600080fd5b919391925050565b60006020828403121561065557600080fd5b5051919050565b6000815160005b8181101561067d5760208185018101518683015201610663565b8181111561068c576000828601525b509290920192915050565b600061010082019050600160a060020a0380845116835280602085015116602084015262ffffff60408501511660408401528060608501511660608401526080840151608084015260a084015160a084015260c084015160c08401528060e08501511660e08401525092915050565b604051610100810167ffffffffffffffff8111828210171561072a5761072a611507565b60405290565b600067ffffffffffffffff82111561074a5761074a611507565b5060209081020190565b600067ffffffffffffffff82111561076e5761076e611507565b50601f01601f191660200190565b6000821982111561078f5761078f6114d5565b500190565b6000826107b45760e060020a634e487b7102600052601260045260246000fd5b500490565b60008160001904831182151516156107d3576107d36114d5565b500290565b600060018210156107eb576107eb6114d5565b506000190190565b600082821015610805576108056114d5565b500390565b60003d801561083f573d61081d81610754565b60405161082a828261086d565b8281528094503d6000602083013e5050505090565b606091505090565b60a0810181811067ffffffffffffffff8211171561086757610867611507565b60405250565b601f8201601f1916810167ffffffffffffffff8111828210171561089357610893611507565b6040525050565b600080828152600760205260408120541560008114610925576006546801000000000000000081106108ce576108ce611507565b60018101806006558082106108e5576108e56114ee565b507ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01849055506006549281526007602052604090209190915550600190565b5092915050565b600160a060020a03600054163381146103e85760405160e560020a62461bcd02815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606481fd5b60ff740100000000000000000000000000000000000000006000540416156109f15760405160e560020a62461bcd02815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606481fd5b565b604051610a00818361065c565b60048152600160a060020a03806020848403018420541615610a645760405160e560020a62461bcd02815260206004820152602060248201527f43686172697479206e616d6520616c726561647920726567697374657265642e6044820152606481fd5b84166000818152600560205260409020549092506001811691506002900481610a8b57607f165b60208110821415610aaf5760e060020a634e487b7102600052602260045260246000fd5b610ab981156117d3565b5050610ae583610ac8846114b4565b600160a060020a038216600160a060020a03198254161781555050565b610aee8161089a565b50505050565b6040517f095ea7b30000000000000000000000000000000000000000000000000000000060208201908152600160a060020a0384166024830152604480830186905282526064610b44818461086d565b506000808351836000875af1915050610b5b61080a565b818215610b84578151801580610b8057610b7d602083860101602086016105bd565b90505b9150505b80610bd357604051925060e560020a62461bcd02835260206004840152600260248401527f53410000000000000000000000000000000000000000000000000000000000006044840152606483fd5b505050505050565b604051602081017f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a03808516602484015280861660448401525085606483015260648252610c3182610847565b6000808351836000875af1915050610c4761080a565b818215610c70578151801580610c6c57610c69602083860101602086016105bd565b90505b9150505b80610cbf57604051925060e560020a62461bcd02835260206004840152600360248401527f53544600000000000000000000000000000000000000000000000000000000006044840152606483fd5b50505050505050565b600060ff821660ff811415610cdf57610cdf6114d5565b60010192915050565b600081518310610cfa57610cfa6114ee565b506020918202010190565b610d0d61092c565b600054600160a060020a031981166000556000600160a060020a0382167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a350565b610d5c61092c565b600160a060020a0380821680610dda5760405160e560020a62461bcd02815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608481fd5b60005481600160a060020a0319821617600055838382167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a350505050565b610e26610987565b6002610e36816001541415611846565b80600155610e4684303386610bdb565b600160a060020a03807f000000000000000000000000000000000000000000000000000000000000000016610e7c868287610af4565b817f0000000000000000000000000000000000000000000000000000000000000000168354610ea9610706565b600160a060020a0388168152600160a060020a038316602082015262ffffff8c166040828101919091523060608301528a60808301528260a08301528b60c0830152600092508260e0830152843b610eff578283fd5b80517fdb3e219800000000000000000000000000000000000000000000000000000000815260208182610f358660048601610697565b0383878a5af1925082610f4a57610f4a611893565b838315610f6a57610f5b3d8361086d565b610f673d830183610643565b90505b88549350853b610f78578485fd5b82517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526004810185905291508482602481838a5af1955085610fbe57610fbe611893565b8515610fda57610fce3d8361086d565b610fda3d8301836103eb565b885495508485868551898c8f165af19550610ff361080a565b50610ffd866116a0565b611007818d6107f3565b95505050611013610706565b600160a060020a038a1681529150600160a060020a037f0000000000000000000000000000000000000000000000000000000000000000871616602083015262ffffff8e16828201523060608301528a60808301528360a08301528e60c08301528260e0830152843b611084578283fd5b805195507f414bf389000000000000000000000000000000000000000000000000000000008652602086876110bc8560048b01610697565b038886895af19450846110d1576110d1611893565b82935084156110f3576110e43d8761086d565b6110f03d870187610643565b93505b600160a060020a0388166000908152600360205260409020955061111884875461077c565b909555505092549151868152602081018390526040810184905291928585337f0860654ad3d0539dbac86150676768b53a47900bb45c5eb8d8d000ffbc4f67e6606087a45050505061116960018055565b5050505050505050565b61117b610987565b61118a60026001541415611846565b6002600155600160a060020a038082163314806111ba576111b58260005416600160a060020a031690565b331490505b6111c381611786565b5082516111d285518214611713565b506000805b845160ff82168181106111eb57505061124f565b6111ff6111f8828a610ce8565b518561077c565b935061123d61123661122a61121d611217858c610ce8565b516114b4565b54600160a060020a031690565b600160a060020a031690565b151561156d565b505061124881610cc8565b90506111d7565b5061127a61127184600160a060020a0316600090815260036020526040902090565b5482111561162d565b600080837f00000000000000000000000000000000000000000000000000000000000000001693505b855160ff82168181106112b7575050611460565b6112c1818a610ce8565b5191506112ec856112e689600160a060020a0316600090815260036020526040902090565b546107f3565b61131261130c61130688611300868f610ce8565b51610794565b836107b9565b8461077c565b92505061131f88516107d8565b81141561134b57611348846112e689600160a060020a0316600090815260036020526040902090565b91505b61135b61121d611217838b610ce8565b863b61136657600080fd5b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a03821660048201526024810184905260208160448160008c5af19150816113bc576113bc611893565b600082156113dd576113ce3d8361086d565b6113da3d8301836105bd565b90505b6113e681611520565b5050506113f38189610ce8565b5161140461121d611217848c610ce8565b915061140f8161149b565b60405184815290915082828a7fb0657052acbf78260696b569dbe3a1f1f39287b5a3c378f5bca0c20fbf062dec602085a450505061144d818461077c565b92505061145981610cc8565b90506112a3565b5061148a61148285600160a060020a0316600090815260036020526040902090565b5482146115e0565b50505061149660018055565b505050565b6000604051806114ab828561065c565b03902092915050565b60006040516114c3818461065c565b60048152819003602001902092915050565b60e060020a634e487b7102600052601160045260246000fd5b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052604160045260246000fd5b806103e85760405160e560020a62461bcd02815260206004820152602060248201527f55534443207472616e7366657220746f2063686172697479206661696c65642e6044820152606481fd5b806103e85760405160e560020a62461bcd02815260206004820152602560248201527f417474656d707420746f20646f6e61746520746f20756e6b6e6f776e2063686160448201527f726974792e0000000000000000000000000000000000000000000000000000006064820152608481fd5b806103e85760405160e560020a62461bcd02815260206004820152601c60248201527f4d7573742066696e616c697a6520656e746972652062616c616e6365000000006044820152606481fd5b806103e85760405160e560020a62461bcd02815260206004820152602260248201527f546f74616c2066696e616c697a6174696f6e20616d6f756e7420746f6f20686960448201527f67680000000000000000000000000000000000000000000000000000000000006064820152608481fd5b806103e85760405160e560020a62461bcd02815260206004820152602760248201527f4661696c656420746f2073656e642067617320746f20657068656d6572616c2060448201527f77616c6c65742e000000000000000000000000000000000000000000000000006064820152608481fd5b806103e85760405160e560020a62461bcd02815260206004820152603160248201527f43686172697469657320616e6420616d6f756e747320617272617973206f662060448201527f646966666572656e74206c656e6774682e0000000000000000000000000000006064820152608481fd5b806103e85760405160e560020a62461bcd02815260206004820152601d60248201527f556e617574686f72697a6174696f6e2066696e616c697a6174696f6e2e0000006044820152606481fd5b806103e85760405160e560020a62461bcd02815260206004820152602360248201527f43686172697479206164647265737320616c726561647920726567697374657260448201527f65642e00000000000000000000000000000000000000000000000000000000006064820152608481fd5b806103e85760405160e560020a62461bcd02815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606481fd5b6040513d6000823e3d81fdfea36469706673582212204207b2f49da0e02bc912fe2a58cef7fdcb3fa0b023f1bc011691da8686f295206c6578706572696d656e74616cf564736f6c63430008070041",
							"opcodes": "PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2E4 JUMPI PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 DUP2 CALLDATALOAD DIV PUSH4 0x480A6FDC DUP2 EQ PUSH2 0xAE JUMPI PUSH4 0x4AA4A4FC DUP2 EQ PUSH2 0xDE JUMPI PUSH4 0x5C975ABB DUP2 EQ PUSH2 0x128 JUMPI PUSH4 0x715018A6 DUP2 EQ PUSH2 0x16A JUMPI PUSH4 0x745284CE DUP2 EQ PUSH2 0x18A JUMPI PUSH4 0x7AED7746 DUP2 EQ PUSH2 0x1B0 JUMPI PUSH4 0x89A30271 DUP2 EQ PUSH2 0x1D4 JUMPI PUSH4 0x8DA5CB5B DUP2 EQ PUSH2 0x21A JUMPI PUSH4 0xC31C9C07 DUP2 EQ PUSH2 0x245 JUMPI PUSH4 0xF2FDE38B DUP2 EQ PUSH2 0x28B JUMPI PUSH4 0xF8B2CB4F DUP2 EQ PUSH2 0x2A6 JUMPI PUSH2 0x2E1 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0xB8 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xC1 CALLDATASIZE PUSH2 0x431 JUMP JUMPDEST PUSH2 0xD1 DUP2 DUP4 DUP6 DUP8 DUP10 DUP12 DUP14 DUP16 PUSH2 0xE1E JUMP JUMPDEST POP POP POP POP POP POP POP POP DUP2 DUP4 MLOAD RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0xE8 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xF1 CALLDATASIZE PUSH2 0x3D6 JUMP JUMPDEST DUP3 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 RETURN JUMPDEST SUB DUP2 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x132 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x13B CALLDATASIZE PUSH2 0x3D6 JUMP JUMPDEST PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 DUP4 SLOAD DIV AND DUP4 MLOAD DUP1 PUSH2 0x124 DUP4 DUP4 SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x174 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x17D CALLDATASIZE PUSH2 0x3D6 JUMP JUMPDEST PUSH2 0x185 PUSH2 0xD05 JUMP JUMPDEST DUP2 DUP4 MLOAD RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x194 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x19D CALLDATASIZE PUSH2 0x4CC JUMP JUMPDEST PUSH2 0x1A8 DUP2 DUP4 DUP6 PUSH2 0x1173 JUMP JUMPDEST POP POP POP DUP2 DUP4 MLOAD RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x1BA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1C3 CALLDATASIZE PUSH2 0x5E6 JUMP JUMPDEST PUSH2 0x1CD DUP2 DUP4 PUSH2 0x9F3 JUMP JUMPDEST POP POP DUP2 DUP4 MLOAD RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x1DE JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1E7 CALLDATASIZE PUSH2 0x3D6 JUMP JUMPDEST DUP3 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x224 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x22D CALLDATASIZE PUSH2 0x3D6 JUMP JUMPDEST DUP2 SLOAD DUP4 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND DUP1 DUP3 MSTORE SWAP1 PUSH1 0x20 DUP2 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x24F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x258 CALLDATASIZE PUSH2 0x3D6 JUMP JUMPDEST DUP3 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x295 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x185 PUSH2 0x2A1 CALLDATASIZE PUSH2 0x3FF JUMP JUMPDEST PUSH2 0xD54 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x2B0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2D7 PUSH2 0x2BC CALLDATASIZE PUSH2 0x3FF JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST DUP4 MLOAD DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 RETURN JUMPDEST POP POP JUMPDEST POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND DUP2 EQ PUSH2 0x302 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x321 DUP2 PUSH2 0x730 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x32E DUP3 DUP3 PUSH2 0x86D JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 POP DUP6 DUP2 ADD DUP2 DUP6 MUL DUP8 ADD DUP3 ADD DUP9 LT ISZERO PUSH2 0x34E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x36D JUMPI DUP2 CALLDATALOAD DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x351 JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x38B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x396 DUP2 PUSH2 0x754 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A3 DUP3 DUP3 PUSH2 0x86D JUMP JUMPDEST DUP3 DUP2 MSTORE DUP6 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x3B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP3 DUP2 ADD PUSH1 0x20 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 NOT DUP3 ADD SLT ISZERO PUSH2 0x3E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SUB SLT ISZERO PUSH2 0x3FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x3 NOT DUP4 ADD SLT ISZERO PUSH2 0x413 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND DUP2 EQ PUSH2 0x42B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x100 PUSH1 0x3 NOT DUP11 ADD SLT ISZERO PUSH2 0x44D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP3 AND DUP3 EQ PUSH2 0x466 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP9 POP PUSH1 0x24 CALLDATALOAD SWAP1 DUP1 DUP3 AND DUP3 EQ PUSH2 0x47B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP7 POP PUSH1 0x44 CALLDATALOAD SWAP6 POP PUSH1 0x64 CALLDATALOAD SWAP5 POP PUSH1 0x84 CALLDATALOAD SWAP4 POP PUSH1 0xA4 CALLDATALOAD PUSH3 0xFFFFFF DUP1 DUP3 AND DUP3 EQ PUSH2 0x4A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 POP PUSH1 0xC4 CALLDATALOAD SWAP1 DUP1 DUP3 AND DUP3 EQ PUSH2 0x4B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 SWAP3 POP POP PUSH1 0xE4 CALLDATALOAD SWAP1 POP SWAP2 SWAP4 SWAP6 SWAP8 POP SWAP2 SWAP4 SWAP6 SWAP8 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x60 PUSH1 0x3 NOT DUP6 ADD SLT ISZERO PUSH2 0x4E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4EA PUSH2 0x2EA JUMP JUMPDEST SWAP3 POP PUSH1 0x24 DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x506 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x23 DUP4 ADD SLT PUSH2 0x515 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x4 ADD CALLDATALOAD PUSH2 0x523 DUP2 PUSH2 0x730 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x530 DUP3 DUP3 PUSH2 0x86D JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 POP DUP6 DUP8 ADD DUP2 DUP6 MUL DUP8 ADD DUP9 ADD DUP13 LT ISZERO PUSH2 0x550 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x58B JUMPI DUP2 CALLDATALOAD DUP8 DUP2 GT ISZERO PUSH2 0x56A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x578 DUP15 DUP12 DUP4 DUP13 ADD ADD PUSH2 0x37A JUMP JUMPDEST DUP7 MSTORE POP SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x553 JUMP JUMPDEST POP SWAP2 SWAP9 POP POP PUSH1 0x44 CALLDATALOAD SWAP6 POP POP POP POP DUP1 DUP4 GT ISZERO PUSH2 0x5A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH2 0x5B4 DUP6 DUP3 PUSH1 0x4 ADD PUSH2 0x305 JUMP JUMPDEST SWAP4 SWAP6 SWAP3 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x5DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 PUSH1 0x3 NOT DUP5 ADD SLT ISZERO PUSH2 0x5FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x620 DUP5 DUP3 PUSH1 0x4 ADD PUSH2 0x37A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND DUP2 EQ PUSH2 0x63B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP4 SWAP2 SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x655 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x67D JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD MSTORE ADD PUSH2 0x663 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x68C JUMPI PUSH1 0x0 DUP3 DUP7 ADD MSTORE JUMPDEST POP SWAP3 SWAP1 SWAP3 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 ADD SWAP1 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP5 MLOAD AND DUP4 MSTORE DUP1 PUSH1 0x20 DUP6 ADD MLOAD AND PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0xFFFFFF PUSH1 0x40 DUP6 ADD MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE DUP1 PUSH1 0x60 DUP6 ADD MLOAD AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP5 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE DUP1 PUSH1 0xE0 DUP6 ADD MLOAD AND PUSH1 0xE0 DUP5 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x72A JUMPI PUSH2 0x72A PUSH2 0x1507 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x74A JUMPI PUSH2 0x74A PUSH2 0x1507 JUMP JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x76E JUMPI PUSH2 0x76E PUSH2 0x1507 JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x78F JUMPI PUSH2 0x78F PUSH2 0x14D5 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x7B4 JUMPI PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x7D3 JUMPI PUSH2 0x7D3 PUSH2 0x14D5 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 LT ISZERO PUSH2 0x7EB JUMPI PUSH2 0x7EB PUSH2 0x14D5 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x805 JUMPI PUSH2 0x805 PUSH2 0x14D5 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 RETURNDATASIZE DUP1 ISZERO PUSH2 0x83F JUMPI RETURNDATASIZE PUSH2 0x81D DUP2 PUSH2 0x754 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x82A DUP3 DUP3 PUSH2 0x86D JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP5 POP RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP4 ADD RETURNDATACOPY POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x867 JUMPI PUSH2 0x867 PUSH2 0x1507 JUMP JUMPDEST PUSH1 0x40 MSTORE POP JUMP JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x893 JUMPI PUSH2 0x893 PUSH2 0x1507 JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO PUSH1 0x0 DUP2 EQ PUSH2 0x925 JUMPI PUSH1 0x6 SLOAD PUSH9 0x10000000000000000 DUP2 LT PUSH2 0x8CE JUMPI PUSH2 0x8CE PUSH2 0x1507 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD DUP1 PUSH1 0x6 SSTORE DUP1 DUP3 LT PUSH2 0x8E5 JUMPI PUSH2 0x8E5 PUSH2 0x14EE JUMP JUMPDEST POP PUSH32 0xF652222313E28459528D920B65115C16C04F3EFC82AAEDC97BE59F3F377C0D3F ADD DUP5 SWAP1 SSTORE POP PUSH1 0x6 SLOAD SWAP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE POP PUSH1 0x1 SWAP1 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x0 SLOAD AND CALLER DUP2 EQ PUSH2 0x3E8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 REVERT JUMPDEST PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 PUSH1 0x0 SLOAD DIV AND ISZERO PUSH2 0x9F1 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA00 DUP2 DUP4 PUSH2 0x65C JUMP JUMPDEST PUSH1 0x4 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 PUSH1 0x20 DUP5 DUP5 SUB ADD DUP5 KECCAK256 SLOAD AND ISZERO PUSH2 0xA64 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43686172697479206E616D6520616C726561647920726567697374657265642E PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 REVERT JUMPDEST DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP3 POP PUSH1 0x1 DUP2 AND SWAP2 POP PUSH1 0x2 SWAP1 DIV DUP2 PUSH2 0xA8B JUMPI PUSH1 0x7F AND JUMPDEST PUSH1 0x20 DUP2 LT DUP3 EQ ISZERO PUSH2 0xAAF JUMPI PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xAB9 DUP2 ISZERO PUSH2 0x17D3 JUMP JUMPDEST POP POP PUSH2 0xAE5 DUP4 PUSH2 0xAC8 DUP5 PUSH2 0x14B4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT DUP3 SLOAD AND OR DUP2 SSTORE POP POP JUMP JUMPDEST PUSH2 0xAEE DUP2 PUSH2 0x89A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP7 SWAP1 MSTORE DUP3 MSTORE PUSH1 0x64 PUSH2 0xB44 DUP2 DUP5 PUSH2 0x86D JUMP JUMPDEST POP PUSH1 0x0 DUP1 DUP4 MLOAD DUP4 PUSH1 0x0 DUP8 GAS CALL SWAP2 POP POP PUSH2 0xB5B PUSH2 0x80A JUMP JUMPDEST DUP2 DUP3 ISZERO PUSH2 0xB84 JUMPI DUP2 MLOAD DUP1 ISZERO DUP1 PUSH2 0xB80 JUMPI PUSH2 0xB7D PUSH1 0x20 DUP4 DUP7 ADD ADD PUSH1 0x20 DUP7 ADD PUSH2 0x5BD JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 POP POP JUMPDEST DUP1 PUSH2 0xBD3 JUMPI PUSH1 0x40 MLOAD SWAP3 POP PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP5 ADD MSTORE PUSH32 0x5341000000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x64 DUP4 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND PUSH1 0x24 DUP5 ADD MSTORE DUP1 DUP7 AND PUSH1 0x44 DUP5 ADD MSTORE POP DUP6 PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x64 DUP3 MSTORE PUSH2 0xC31 DUP3 PUSH2 0x847 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 MLOAD DUP4 PUSH1 0x0 DUP8 GAS CALL SWAP2 POP POP PUSH2 0xC47 PUSH2 0x80A JUMP JUMPDEST DUP2 DUP3 ISZERO PUSH2 0xC70 JUMPI DUP2 MLOAD DUP1 ISZERO DUP1 PUSH2 0xC6C JUMPI PUSH2 0xC69 PUSH1 0x20 DUP4 DUP7 ADD ADD PUSH1 0x20 DUP7 ADD PUSH2 0x5BD JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 POP POP JUMPDEST DUP1 PUSH2 0xCBF JUMPI PUSH1 0x40 MLOAD SWAP3 POP PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP5 ADD MSTORE PUSH32 0x5354460000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x64 DUP4 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP2 EQ ISZERO PUSH2 0xCDF JUMPI PUSH2 0xCDF PUSH2 0x14D5 JUMP JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 LT PUSH2 0xCFA JUMPI PUSH2 0xCFA PUSH2 0x14EE JUMP JUMPDEST POP PUSH1 0x20 SWAP2 DUP3 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0xD0D PUSH2 0x92C JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT DUP2 AND PUSH1 0x0 SSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 PUSH1 0x40 MLOAD LOG3 POP JUMP JUMPDEST PUSH2 0xD5C PUSH2 0x92C JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP3 AND DUP1 PUSH2 0xDDA JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 REVERT JUMPDEST PUSH1 0x0 SLOAD DUP2 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT DUP3 AND OR PUSH1 0x0 SSTORE DUP4 DUP4 DUP3 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 PUSH1 0x40 MLOAD LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0xE26 PUSH2 0x987 JUMP JUMPDEST PUSH1 0x2 PUSH2 0xE36 DUP2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x1846 JUMP JUMPDEST DUP1 PUSH1 0x1 SSTORE PUSH2 0xE46 DUP5 ADDRESS CALLER DUP7 PUSH2 0xBDB JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 PUSH32 0x0 AND PUSH2 0xE7C DUP7 DUP3 DUP8 PUSH2 0xAF4 JUMP JUMPDEST DUP2 PUSH32 0x0 AND DUP4 SLOAD PUSH2 0xEA9 PUSH2 0x706 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF DUP13 AND PUSH1 0x40 DUP3 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE ADDRESS PUSH1 0x60 DUP4 ADD MSTORE DUP11 PUSH1 0x80 DUP4 ADD MSTORE DUP3 PUSH1 0xA0 DUP4 ADD MSTORE DUP12 PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x0 SWAP3 POP DUP3 PUSH1 0xE0 DUP4 ADD MSTORE DUP5 EXTCODESIZE PUSH2 0xEFF JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH32 0xDB3E219800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 DUP2 DUP3 PUSH2 0xF35 DUP7 PUSH1 0x4 DUP7 ADD PUSH2 0x697 JUMP JUMPDEST SUB DUP4 DUP8 DUP11 GAS CALL SWAP3 POP DUP3 PUSH2 0xF4A JUMPI PUSH2 0xF4A PUSH2 0x1893 JUMP JUMPDEST DUP4 DUP4 ISZERO PUSH2 0xF6A JUMPI PUSH2 0xF5B RETURNDATASIZE DUP4 PUSH2 0x86D JUMP JUMPDEST PUSH2 0xF67 RETURNDATASIZE DUP4 ADD DUP4 PUSH2 0x643 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP9 SLOAD SWAP4 POP DUP6 EXTCODESIZE PUSH2 0xF78 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP3 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE SWAP2 POP DUP5 DUP3 PUSH1 0x24 DUP2 DUP4 DUP11 GAS CALL SWAP6 POP DUP6 PUSH2 0xFBE JUMPI PUSH2 0xFBE PUSH2 0x1893 JUMP JUMPDEST DUP6 ISZERO PUSH2 0xFDA JUMPI PUSH2 0xFCE RETURNDATASIZE DUP4 PUSH2 0x86D JUMP JUMPDEST PUSH2 0xFDA RETURNDATASIZE DUP4 ADD DUP4 PUSH2 0x3EB JUMP JUMPDEST DUP9 SLOAD SWAP6 POP DUP5 DUP6 DUP7 DUP6 MLOAD DUP10 DUP13 DUP16 AND GAS CALL SWAP6 POP PUSH2 0xFF3 PUSH2 0x80A JUMP JUMPDEST POP PUSH2 0xFFD DUP7 PUSH2 0x16A0 JUMP JUMPDEST PUSH2 0x1007 DUP2 DUP14 PUSH2 0x7F3 JUMP JUMPDEST SWAP6 POP POP POP PUSH2 0x1013 PUSH2 0x706 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP11 AND DUP2 MSTORE SWAP2 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH32 0x0 DUP8 AND AND PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0xFFFFFF DUP15 AND DUP3 DUP3 ADD MSTORE ADDRESS PUSH1 0x60 DUP4 ADD MSTORE DUP11 PUSH1 0x80 DUP4 ADD MSTORE DUP4 PUSH1 0xA0 DUP4 ADD MSTORE DUP15 PUSH1 0xC0 DUP4 ADD MSTORE DUP3 PUSH1 0xE0 DUP4 ADD MSTORE DUP5 EXTCODESIZE PUSH2 0x1084 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD SWAP6 POP PUSH32 0x414BF38900000000000000000000000000000000000000000000000000000000 DUP7 MSTORE PUSH1 0x20 DUP7 DUP8 PUSH2 0x10BC DUP6 PUSH1 0x4 DUP12 ADD PUSH2 0x697 JUMP JUMPDEST SUB DUP9 DUP7 DUP10 GAS CALL SWAP5 POP DUP5 PUSH2 0x10D1 JUMPI PUSH2 0x10D1 PUSH2 0x1893 JUMP JUMPDEST DUP3 SWAP4 POP DUP5 ISZERO PUSH2 0x10F3 JUMPI PUSH2 0x10E4 RETURNDATASIZE DUP8 PUSH2 0x86D JUMP JUMPDEST PUSH2 0x10F0 RETURNDATASIZE DUP8 ADD DUP8 PUSH2 0x643 JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP6 POP PUSH2 0x1118 DUP5 DUP8 SLOAD PUSH2 0x77C JUMP JUMPDEST SWAP1 SWAP6 SSTORE POP POP SWAP3 SLOAD SWAP2 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE SWAP2 SWAP3 DUP6 DUP6 CALLER PUSH32 0x860654AD3D0539DBAC86150676768B53A47900BB45C5EB8D8D000FFBC4F67E6 PUSH1 0x60 DUP8 LOG4 POP POP POP POP PUSH2 0x1169 PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x117B PUSH2 0x987 JUMP JUMPDEST PUSH2 0x118A PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x1846 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP3 AND CALLER EQ DUP1 PUSH2 0x11BA JUMPI PUSH2 0x11B5 DUP3 PUSH1 0x0 SLOAD AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST CALLER EQ SWAP1 POP JUMPDEST PUSH2 0x11C3 DUP2 PUSH2 0x1786 JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x11D2 DUP6 MLOAD DUP3 EQ PUSH2 0x1713 JUMP JUMPDEST POP PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD PUSH1 0xFF DUP3 AND DUP2 DUP2 LT PUSH2 0x11EB JUMPI POP POP PUSH2 0x124F JUMP JUMPDEST PUSH2 0x11FF PUSH2 0x11F8 DUP3 DUP11 PUSH2 0xCE8 JUMP JUMPDEST MLOAD DUP6 PUSH2 0x77C JUMP JUMPDEST SWAP4 POP PUSH2 0x123D PUSH2 0x1236 PUSH2 0x122A PUSH2 0x121D PUSH2 0x1217 DUP6 DUP13 PUSH2 0xCE8 JUMP JUMPDEST MLOAD PUSH2 0x14B4 JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x156D JUMP JUMPDEST POP POP PUSH2 0x1248 DUP2 PUSH2 0xCC8 JUMP JUMPDEST SWAP1 POP PUSH2 0x11D7 JUMP JUMPDEST POP PUSH2 0x127A PUSH2 0x1271 DUP5 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD DUP3 GT ISZERO PUSH2 0x162D JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH32 0x0 AND SWAP4 POP JUMPDEST DUP6 MLOAD PUSH1 0xFF DUP3 AND DUP2 DUP2 LT PUSH2 0x12B7 JUMPI POP POP PUSH2 0x1460 JUMP JUMPDEST PUSH2 0x12C1 DUP2 DUP11 PUSH2 0xCE8 JUMP JUMPDEST MLOAD SWAP2 POP PUSH2 0x12EC DUP6 PUSH2 0x12E6 DUP10 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH2 0x7F3 JUMP JUMPDEST PUSH2 0x1312 PUSH2 0x130C PUSH2 0x1306 DUP9 PUSH2 0x1300 DUP7 DUP16 PUSH2 0xCE8 JUMP JUMPDEST MLOAD PUSH2 0x794 JUMP JUMPDEST DUP4 PUSH2 0x7B9 JUMP JUMPDEST DUP5 PUSH2 0x77C JUMP JUMPDEST SWAP3 POP POP PUSH2 0x131F DUP9 MLOAD PUSH2 0x7D8 JUMP JUMPDEST DUP2 EQ ISZERO PUSH2 0x134B JUMPI PUSH2 0x1348 DUP5 PUSH2 0x12E6 DUP10 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x135B PUSH2 0x121D PUSH2 0x1217 DUP4 DUP12 PUSH2 0xCE8 JUMP JUMPDEST DUP7 EXTCODESIZE PUSH2 0x1366 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x20 DUP2 PUSH1 0x44 DUP2 PUSH1 0x0 DUP13 GAS CALL SWAP2 POP DUP2 PUSH2 0x13BC JUMPI PUSH2 0x13BC PUSH2 0x1893 JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO PUSH2 0x13DD JUMPI PUSH2 0x13CE RETURNDATASIZE DUP4 PUSH2 0x86D JUMP JUMPDEST PUSH2 0x13DA RETURNDATASIZE DUP4 ADD DUP4 PUSH2 0x5BD JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x13E6 DUP2 PUSH2 0x1520 JUMP JUMPDEST POP POP POP PUSH2 0x13F3 DUP2 DUP10 PUSH2 0xCE8 JUMP JUMPDEST MLOAD PUSH2 0x1404 PUSH2 0x121D PUSH2 0x1217 DUP5 DUP13 PUSH2 0xCE8 JUMP JUMPDEST SWAP2 POP PUSH2 0x140F DUP2 PUSH2 0x149B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 DUP2 MSTORE SWAP1 SWAP2 POP DUP3 DUP3 DUP11 PUSH32 0xB0657052ACBF78260696B569DBE3A1F1F39287B5A3C378F5BCA0C20FBF062DEC PUSH1 0x20 DUP6 LOG4 POP POP POP PUSH2 0x144D DUP2 DUP5 PUSH2 0x77C JUMP JUMPDEST SWAP3 POP POP PUSH2 0x1459 DUP2 PUSH2 0xCC8 JUMP JUMPDEST SWAP1 POP PUSH2 0x12A3 JUMP JUMPDEST POP PUSH2 0x148A PUSH2 0x1482 DUP6 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD DUP3 EQ PUSH2 0x15E0 JUMP JUMPDEST POP POP POP PUSH2 0x1496 PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH2 0x14AB DUP3 DUP6 PUSH2 0x65C JUMP JUMPDEST SUB SWAP1 KECCAK256 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH2 0x14C3 DUP2 DUP5 PUSH2 0x65C JUMP JUMPDEST PUSH1 0x4 DUP2 MSTORE DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 PUSH2 0x3E8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x55534443207472616E7366657220746F2063686172697479206661696C65642E PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 REVERT JUMPDEST DUP1 PUSH2 0x3E8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x417474656D707420746F20646F6E61746520746F20756E6B6E6F776E20636861 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x726974792E000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 REVERT JUMPDEST DUP1 PUSH2 0x3E8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742066696E616C697A6520656E746972652062616C616E636500000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 REVERT JUMPDEST DUP1 PUSH2 0x3E8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F74616C2066696E616C697A6174696F6E20616D6F756E7420746F6F206869 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6768000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 REVERT JUMPDEST DUP1 PUSH2 0x3E8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4661696C656420746F2073656E642067617320746F20657068656D6572616C20 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x77616C6C65742E00000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 REVERT JUMPDEST DUP1 PUSH2 0x3E8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43686172697469657320616E6420616D6F756E747320617272617973206F6620 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x646966666572656E74206C656E6774682E000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 REVERT JUMPDEST DUP1 PUSH2 0x3E8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E617574686F72697A6174696F6E2066696E616C697A6174696F6E2E000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 REVERT JUMPDEST DUP1 PUSH2 0x3E8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43686172697479206164647265737320616C7265616479207265676973746572 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x65642E0000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 REVERT JUMPDEST DUP1 PUSH2 0x3E8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE DUP2 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 TIMESTAMP SMOD 0xB2 DELEGATECALL SWAP14 LOG0 0xE0 0x2B 0xC9 SLT INVALID 0x2A PC 0xCE 0xF7 REVERT 0xCB EXTCODEHASH LOG0 0xB0 0x23 CALL 0xBC ADD AND SWAP2 0xDA DUP7 DUP7 CALLCODE SWAP6 KECCAK256 PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP COINBASE ",
							"sourceMap": "531:7611:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2194:3311;;;;;;;;;;:::i;:::-;;;;;;;;;531:7611;;;;;;;;;;;;;;;;:::i;:::-;;;768:28;-1:-1:-1;;;;;531:7611:9;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1831:101:0;;:::i;:::-;531:7611:9;;;;;;;;;;;;;;;;:::i;:::-;5717:1899;;;;;:::i;:::-;;;;531:7611;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;923:28;-1:-1:-1;;;;;531:7611:9;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;531:7611:9;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;1148:39;-1:-1:-1;;;;;531:7611:9;;;;;;;;;;;;;;;2081:198:0;531:7611:9;;;:::i;:::-;2081:198:0;:::i;531:7611:9:-;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;531:7611:9;-1:-1:-1;531:7611:9;;;8119:8;531:7611;;;;;;;8017:123;531:7611;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;531:7611:9;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;531:7611:9;;;;;;;;;;;-1:-1:-1;531:7611:9;;;-1:-1:-1;;531:7611:9;;-1:-1:-1;531:7611:9;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;531:7611:9;;;-1:-1:-1;;;;;;;531:7611:9:o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;531:7611:9;;1701:1:2;531:7611:9;;;;;;1701:1:2;-1:-1:-1;1701:1:2;;;531:7611:9;1701:1:2;;;;;-1:-1:-1;531:7611:9;;-1:-1:-1;;;531:7611:9:o;:::-;;-1:-1:-1;;531:7611:9;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;531:7611:9;;;;;;;;;;;;-1:-1:-1;;;;;531:7611:9;;;;;;-1:-1:-1;;531:7611:9;;;;-1:-1:-1;;531:7611:9:o;:::-;;;;;;;;;;-1:-1:-1;;531:7611:9;;;;;;;;;;;;-1:-1:-1;;;;;531:7611:9;;;;;;;-1:-1:-1;;531:7611:9;;;;-1:-1:-1;531:7611:9;;;;;;;;;;-1:-1:-1;;531:7611:9;;-1:-1:-1;531:7611:9;-1:-1:-1;531:7611:9;;;-1:-1:-1;531:7611:9;;;-1:-1:-1;531:7611:9;;;-1:-1:-1;531:7611:9;;;;;;;;;;-1:-1:-1;;531:7611:9;;;;-1:-1:-1;531:7611:9;;;;;;;;;;-1:-1:-1;;531:7611:9;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;-1:-1:-1;;531:7611:9;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;531:7611:9;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;531:7611:9;;;;;;;;;;;-1:-1:-1;531:7611:9;;;-1:-1:-1;;531:7611:9;;-1:-1:-1;531:7611:9;;;;;;;;;;;;;;;-1:-1:-1;;531:7611:9;;;;;;;;;;:::i;:::-;;;-1:-1:-1;531:7611:9;;;;;;;;;;;;;-1:-1:-1;531:7611:9;;-1:-1:-1;;531:7611:9;;;-1:-1:-1;;;;531:7611:9;;;;;;-1:-1:-1;;531:7611:9;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;531:7611:9:o;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;531:7611:9;;;;-1:-1:-1;;;531:7611:9:o;:::-;;;;-1:-1:-1;;531:7611:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;531:7611:9;;;;;;-1:-1:-1;;531:7611:9;;;;;;-1:-1:-1;;531:7611:9:o;:::-;;;;;;;;;;;;;;-1:-1:-1;531:7611:9;;;-1:-1:-1;531:7611:9:o;:::-;;;;1701:1:2;;;;;;;;531:7611:9;1701:1:2;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;531:7611:9;;;;;;-1:-1:-1;;531:7611:9:o;:::-;;;;;;;-1:-1:-1;;;;;531:7611:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;1701:1:2;;;;;;;;;;;;;;:::i;:::-;531:7611:9;1701:1:2;531:7611:9;:::o;:::-;;;;;;;;;;:::i;:::-;-1:-1:-1;531:7611:9;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;-1:-1:-1;531:7611:9;;-1:-1:-1;;531:7611:9;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;-1:-1:-1;531:7611:9;;:::o;:::-;;;;;-1:-1:-1;;;;;531:7611:9;;;;;;;;;-1:-1:-1;531:7611:9;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;531:7611:9;;:::o;:::-;;2325:7:2;531:7611:9;;;;;;;:::i;:::-;-1:-1:-1;;;531:7611:9;;:::o;:::-;;;;;;;;;;:::i;:::-;-1:-1:-1;531:7611:9;;:::o;1701:1:2:-;;;;;;;;531:7611:9;;;:::i;:::-;;;;;;;:::i;:::-;;;;1701:1:2;;;;-1:-1:-1;1701:1:2;;;;;;;;;:::o;:::-;531:7611:9;1701:1:2;;;;:::o;:::-;531:7611:9;1701:1:2;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;1701:1:2:o;:::-;531:7611:9;;;-1:-1:-1;;531:7611:9;1701:1:2;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;1701:1:2:o;2113:404:5:-;;-1:-1:-1;531:7611:9;-1:-1:-1;531:7611:9;4250:12:5;531:7611:9;;;-1:-1:-1;531:7611:9;;4250:24:5;2192:319;531:7611:9;;;;7966:16;531:7611;;;;;;;;:::i;:::-;4250:12:5;531:7611:9;;;7966:16;531:7611;;;;;;;;:::i;:::-;-1:-1:-1;531:7611:9;;;;;-1:-1:-1;7966:16:9;531:7611;;;;4250:12:5;531:7611:9;;;;;;;;;-1:-1:-1;4250:12:5;;2113:404::o;531:7611:9:-;-1:-1:-1;;2113:404:5;-1:-1:-1;;2113:404:5:o;1359:130:0:-;-1:-1:-1;;;;;1273:6:0;531:7611:9;;719:10:4;531:7611:9;1422:23:0;531:7611:9;;;;-1:-1:-1;;;;;531:7611:9;;;;;;;;;;;;;;;;;;;;1767:106:1;531:7611:9;;1685:7:1;531:7611:9;;;1836:9:1;531:7611:9;;;;-1:-1:-1;;;;;531:7611:9;;;;;;;;;;;;;;;;;;;;;1767:106:1:o;7622:387:9:-;531:7611;;;;;;:::i;:::-;7723:9;531:7611;;-1:-1:-1;;;;;531:7611:9;;;;;;;;;;7723:38;531:7611;;;;-1:-1:-1;;;;;531:7611:9;;;7723:9;531:7611;;;;;;;;;;;;;;;;;;;-1:-1:-1;531:7611:9;;;7822:16;531:7611;;;;;;;;-1:-1:-1;1701:1:2;;;;-1:-1:-1;1701:1:2;;;;;;;;;531:7611:9;1701:1:2;;;;;;;-1:-1:-1;;;;;;531:7611:9;;7723:9;531:7611;;-1:-1:-1;531:7611:9;1701:1:2;7808:99:9;7816:46;:51;7808:99;:::i;:::-;;;7917:39;;531:7611;7917:22;531:7611;:::i;:::-;-1:-1:-1;;;;;531:7611:9;;-1:-1:-1;;;;;531:7611:9;;;;;;;;;;7917:39;8121:50:5;531:7611:9;8121:50:5;:::i;:::-;;;7622:387:9;;:::o;1873:307:8:-;531:7611:9;;2055:23:8;2032:58;;;;;;-1:-1:-1;;;;;531:7611:9;;2032:58:8;;;531:7611:9;;;;;;;;2032:58:8;;531:7611:9;2032:58:8;531:7611:9;;2032:58:8;:::i;:::-;;2021:70;;;;;;;;;;;;;;:::i;:::-;2109:57;;;;;2121:11;531:7611:9;2121:16:8;;:44;;;2141:24;2032:58;2141:24;;;;2032:58;2141:24;;;:::i;:::-;2121:44;;;2109:57;-1:-1:-1;;2109:57:8;531:7611:9;;;;;;;-1:-1:-1;;;;;531:7611:9;;2032:58:8;531:7611:9;;;;;2032:58:8;531:7611:9;;;;;;;;;;;;;;;1873:307:8;;;:::o;561:358::-;531:7611:9;;759:69:8;;;782:28;759:69;;-1:-1:-1;;;;;531:7611:9;;;759:69:8;;;531:7611:9;;;;;759:69:8;531:7611:9;;;;;759:69:8;531:7611:9;;;759:69:8;;;;;:::i;:::-;-1:-1:-1;;748:81:8;;;-1:-1:-1;748:81:8;;;;;;;;:::i;:::-;847:57;;;;;859:11;531:7611:9;859:16:8;;:44;;;879:24;759:69;879:24;;;;759:69;879:24;;;:::i;:::-;859:44;;;847:57;-1:-1:-1;;847:57:8;531:7611:9;;;;;;;-1:-1:-1;;;;;531:7611:9;;759:69:8;531:7611:9;;;;;759:69:8;531:7611:9;;;;;;;;;;;;;;;561:358:8;;;;:::o;531:7611:9:-;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;531:7611:9:o;:::-;;;;;;;;;;:::i;:::-;-1:-1:-1;531:7611:9;;;;;;;:::o;1063:62:0:-;;;:::i;:::-;531:7611:9;;-1:-1:-1;;;;;531:7611:9;;;;;;-1:-1:-1;;;;;531:7611:9;;2573:40:0;531:7611:9;;;2573:40:0;;1063:62::o;:::-;;;:::i;:::-;-1:-1:-1;;;;;531:7611:9;2169:22:0;531:7611:9;;;;;;-1:-1:-1;;;;;531:7611:9;;;;;;;;;;;;;;;;;;;;;;;;;;2525:6:0;531:7611:9;;-1:-1:-1;;;;;531:7611:9;;;;2525:6:0;531:7611:9;2573:40:0;531:7611:9;;;2573:40:0;2525:6;531:7611:9;;2573:40:0;;;;1063:62;:::o;1204:72:1:-;;;:::i;:::-;1744:1:2;2317:63;1744:1;2325:7;531:7611:9;2325:19:2;;2317:63;:::i;:::-;1744:1;2325:7;531:7611:9;2787:13;;2780:4;2760:10;2787:13;;:::i;:::-;-1:-1:-1;;;;;531:7611:9;2932:10;531:7611;2945:13;;;;;:::i;:::-;531:7611;3219:5;531:7611;1744:1:2;531:7611:9;;;:::i;:::-;-1:-1:-1;;;;;531:7611:9;;;;-1:-1:-1;;;;;531:7611:9;;3113:634;;;531:7611;;;;3113:634;;;;531:7611;;;;2780:4;3113:634;;;531:7611;;3113:634;;;531:7611;;3113:634;;;531:7611;;3113:634;;;531:7611;;;;;3113:634;;;531:7611;3906:43;;;;531:7611;;;3906:43;3113:634;531:7611;;3906:43;;3113:634;3906:43;;;;;;;;:::i;:::-;;;531:7611;3906:43;;;;;;;;;;:::i;:::-;531:7611;3906:43;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;1744:1:2;531:7611:9;;;3984:39;;;;531:7611;;;3984:39;531:7611;;;3984:39;;3906:43;3984:39;;531:7611;;;;-1:-1:-1;531:7611:9;;;;;3984:39;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;1744:1:2;531:7611:9;;;;;;3113:634;531:7611;4125:72;531:7611;4125:31;531:7611;4125:72;;;;;;:::i;:::-;;4207:68;;;:::i;:::-;4378:41;;;;:::i;:::-;;;;;531:7611;;:::i;:::-;-1:-1:-1;;;;;531:7611:9;;;;4566:634;-1:-1:-1;;;;;;4671:4:9;531:7611;;;3113:634;4566;;531:7611;;;;4566:634;;;531:7611;2780:4;3113:634;4566;;531:7611;;3113:634;4566;;531:7611;;3113:634;4566;;531:7611;;3113:634;4566;;531:7611;;3113:634;4566;;531:7611;5263:35;;;;531:7611;;;5263:35;3113:634;531:7611;5263:35;;531:7611;5263:35;;3113:634;5263:35;;;;3906:43;5263:35;;;:::i;:::-;;;531:7611;5263:35;;;;;;;;;;:::i;:::-;531:7611;5263:35;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;531:7611:9;;-1:-1:-1;531:7611:9;;;5318:8;531:7611;;;;;5318:32;;:45;;;531:7611;5318:45;:::i;:::-;531:7611;;;-1:-1:-1;;531:7611:9;;;;;;;;;;;;;;;;;;;;;5387:111;;2760:10;5387:111;531:7611;;5387:111;;;;;2628:22:2;2325:7;;531:7611:9;;2628:22:2;1204:72:1;;;;;;;;:::o;:::-;;;:::i;:::-;2317:63:2;1744:1;2325:7;531:7611:9;2325:19:2;;2317:63;:::i;:::-;1744:1;2325:7;531:7611:9;-1:-1:-1;;;;;531:7611:9;5892:18;531:7611;5892:10;:18;:43;;;5914:21;531:7611;1273:6:0;531:7611:9;;-1:-1:-1;;;;;531:7611:9;;;5914:21;5892:10;5914:21;5892:43;;;5884:85;;;:::i;:::-;;5987:17;531:7611;5979:98;6008:15;531:7611;5987:36;;5979:98;:::i;:::-;;-1:-1:-1;;6129:209:9;6151:17;531:7611;;6147:21;531:7611;6147:21;;;;;;;;;;6189:34;6212:11;;;;:::i;:::-;531:7611;6189:34;;:::i;:::-;;;6237:90;6245:40;:24;531:7611;6255:13;;;;:::i;:::-;;531:7611;:::i;:::-;;-1:-1:-1;;;;;531:7611:9;;;6245:24;-1:-1:-1;;;;;531:7611:9;;;6245:40;;;6237:90;:::i;:::-;;;6170:3;;;:::i;:::-;;;6129:209;;;;6348:84;6379:14;;-1:-1:-1;;;;;531:7611:9;-1:-1:-1;531:7611:9;;;5318:8;531:7611;;;;;;;6379:14;531:7611;6356:37;;;6348:84;:::i;:::-;-1:-1:-1;;531:7611:9;7245:4;531:7611;7245:13;;6477:1051;6499:17;531:7611;;6495:21;531:7611;6495:21;;;;;;;;;;6880:11;;;;:::i;:::-;531:7611;;;6895:36;;:14;;-1:-1:-1;;;;;531:7611:9;-1:-1:-1;531:7611:9;;;5318:8;531:7611;;;;;;;6895:14;531:7611;6895:36;:::i;:::-;6880:90;6894:76;6936:33;;:11;;;;:::i;:::-;531:7611;6936:33;:::i;:::-;6894:76;;:::i;:::-;6880:90;;:::i;:::-;6855:115;;;7094:21;:17;531:7611;7094:21;:::i;:::-;7089:26;;7085:111;;;7152:29;;:14;;-1:-1:-1;;;;;531:7611:9;-1:-1:-1;531:7611:9;;;5318:8;531:7611;;;;;;;7152:29;7135:46;;7085:111;7259:24;531:7611;7269:13;;;;:::i;7259:24::-;7245:55;;;;-1:-1:-1;;531:7611:9;7245:55;531:7611;;;7245:55;;-1:-1:-1;;;;;531:7611:9;;6245:9;7245:55;;531:7611;;;;;;;7245:55;531:7611;;;-1:-1:-1;7245:55:9;;;;;;;;;;:::i;:::-;-1:-1:-1;7245:55:9;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;7314:60;;;:::i;:::-;;;;7416:13;;;;:::i;:::-;;7431:24;531:7611;7441:13;;;;:::i;7431:24::-;;;7393:79;;;:::i;:::-;531:7611;;;;;7393:79;;-1:-1:-1;7393:79:9;;;;531:7611;;7393:79;;;;7487:30;;;;:::i;:::-;;;;6518:3;;;:::i;:::-;;;6477:1051;;;;7538:71;7562:14;;-1:-1:-1;;;;;531:7611:9;-1:-1:-1;531:7611:9;;;5318:8;531:7611;;;;;;;7562:14;531:7611;7546:30;;7538:71;:::i;:::-;;;;2628:22:2;2325:7;;531:7611:9;;2628:22:2;1204:72:1;;;:::o;531:7611:9:-;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;531:7611:9:o;:::-;;;;;;;;:::i;:::-;7723:9;531:7611;;;;;;;;;;;-1:-1:-1;;531:7611:9:o;:::-;-1:-1:-1;;;;;531:7611:9;;;;;;;;;-1:-1:-1;;;;;531:7611:9;;;;;;;;;-1:-1:-1;;;;;531:7611:9;;;;;;;;;;;;;;-1:-1:-1;;;;;531:7611:9;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;531:7611:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;531:7611:9;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;531:7611:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;531:7611:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;531:7611:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;531:7611:9;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;531:7611:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;531:7611:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1274200",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"USDC()": "infinite",
								"WETH9()": "infinite",
								"deposit(address,address,uint256,uint256,uint256,uint24,uint24,uint256)": "infinite",
								"finalize(address,string[],uint256[])": "infinite",
								"getBalance(address)": "885",
								"owner()": "632",
								"paused()": "488",
								"registerCharity(string,address)": "infinite",
								"renounceOwnership()": "infinite",
								"swapRouter()": "infinite",
								"transferOwnership(address)": "22759"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "E0"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "CALLVALUE",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSHSIZE",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "CODESIZE",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "SUB",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "NOT",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "E0"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "E0"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "41"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "tag",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "E0"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "SLT",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "DUP1",
									"source": -1
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "tag",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "E0"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "5"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "tag",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "100"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "120"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "6"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "5"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "tag",
									"source": 9,
									"value": "6"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "140"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "7"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "5"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "tag",
									"source": 9,
									"value": "7"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "8"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP8",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "9"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "tag",
									"source": 9,
									"value": "8"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "ASSIGNIMMUTABLE",
									"source": 9,
									"value": "1267"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "A0"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "ASSIGNIMMUTABLE",
									"source": 9,
									"value": "1270"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "C0"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "ASSIGNIMMUTABLE",
									"source": 9,
									"value": "1273"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "RETURN",
									"source": 9
								},
								{
									"begin": 1942,
									"end": 2188,
									"name": "tag",
									"source": 9,
									"value": "9"
								},
								{
									"begin": 1942,
									"end": 2188,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "SLOAD",
									"source": 9
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "EXP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 719,
									"end": 729,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 719,
									"end": 729,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "EXP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "EXP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "EXP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FF"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MUL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 2051,
									"end": 2075,
									"name": "PUSH",
									"source": 9,
									"value": "C0"
								},
								{
									"begin": 2051,
									"end": 2075,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 2145,
									"end": 2159,
									"name": "PUSH",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 2145,
									"end": 2159,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "A0"
								},
								{
									"begin": 2169,
									"end": 2181,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 1942,
									"end": 2188,
									"name": "JUMP",
									"source": 9,
									"value": "[out]"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "tag",
									"source": 9,
									"value": "5"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "EXP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "13"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "tag",
									"source": 9,
									"value": "13"
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 531,
									"end": 8142,
									"name": "JUMP",
									"source": 9,
									"value": "[out]"
								}
							],
							".data": {
								"0": {
									".auxdata": "a36469706673582212204207b2f49da0e02bc912fe2a58cef7fdcb3fa0b023f1bc011691da8686f295206c6578706572696d656e74616cf564736f6c63430008070041",
									".code": [
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "480A6FDC"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4AA4A4FC"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "5C975ABB"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "715018A6"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "745284CE"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "7AED7746"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "89A30271"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "8DA5CB5B"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "C31C9C07"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "F2FDE38B"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "F8B2CB4F"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "13"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2194,
											"end": 5505,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 2194,
											"end": 5505,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2194,
											"end": 5505,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2194,
											"end": 5505,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2194,
											"end": 5505,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 2194,
											"end": 5505,
											"name": "DUP10",
											"source": 9
										},
										{
											"begin": 2194,
											"end": 5505,
											"name": "DUP12",
											"source": 9
										},
										{
											"begin": 2194,
											"end": 5505,
											"name": "DUP14",
											"source": 9
										},
										{
											"begin": 2194,
											"end": 5505,
											"name": "DUP16",
											"source": 9
										},
										{
											"begin": 2194,
											"end": 5505,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 2194,
											"end": 5505,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2194,
											"end": 5505,
											"name": "tag",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 2194,
											"end": 5505,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2194,
											"end": 5505,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2194,
											"end": 5505,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2194,
											"end": 5505,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2194,
											"end": 5505,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2194,
											"end": 5505,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2194,
											"end": 5505,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2194,
											"end": 5505,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2194,
											"end": 5505,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 768,
											"end": 796,
											"name": "PUSHIMMUTABLE",
											"source": 9,
											"value": "1267"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "10000000000000000000000000000000000000000"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "29"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "29"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5717,
											"end": 7616,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 5717,
											"end": 7616,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5717,
											"end": 7616,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5717,
											"end": 7616,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 5717,
											"end": 7616,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 5717,
											"end": 7616,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5717,
											"end": 7616,
											"name": "tag",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 5717,
											"end": 7616,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5717,
											"end": 7616,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5717,
											"end": 7616,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5717,
											"end": 7616,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "37"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "37"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "39"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "42"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "42"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "43"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "43"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 923,
											"end": 951,
											"name": "PUSHIMMUTABLE",
											"source": 9,
											"value": "1270"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "45"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "45"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "46"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "46"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "48"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "48"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "49"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "49"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1148,
											"end": 1187,
											"name": "PUSHIMMUTABLE",
											"source": 9,
											"value": "1273"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "53"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "54"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "53"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "13"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "56"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "56"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "57"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "54"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8119,
											"end": 8127,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8017,
											"end": 8140,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "57"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "63"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "66"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "69"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "70"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "69"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "71"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "72"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "71"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "73"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "73"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "74"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "76"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "74"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "76"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP8",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP7",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "77"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "79"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "79"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "81"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "82"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "72"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "82"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "83"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "83"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "CALLDATACOPY",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "85"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "85"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "88"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "88"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "54"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "90"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "90"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP11",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "93"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "93"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "94"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "94"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP9",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "95"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "95"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP7",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "A4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFF"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "96"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "96"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "C4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "97"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "97"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "E4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP8",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP8",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "99"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "99"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "63"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "101"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "101"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "102"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "102"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "70"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "104"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "72"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "104"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP13",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "105"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "105"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "106"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "108"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "109"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "109"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "110"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP15",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP12",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP13",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "77"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "110"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "106"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "108"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP9",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "111"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "111"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "112"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "66"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "112"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "115"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "115"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "116"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "116"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "39"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "119"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "119"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "77"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "121"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "121"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "124"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "124"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "tag",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "129"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "tag",
											"source": 2,
											"value": "129"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "130"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "tag",
											"source": 2,
											"value": "130"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFF"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "A0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "A0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "C0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "C0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "144"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "tag",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "70"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "147"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "147"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "144"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "147"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "81"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "144"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "151"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "154"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "154"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "155"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "154"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "156"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "158"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "158"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "159"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "162"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "162"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "155"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "162"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "163"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "166"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "166"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "155"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "166"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "167"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "170"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "170"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "155"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "170"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "tag",
											"source": 2,
											"value": "173"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "176"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "177"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "81"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "177"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "178"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "72"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "178"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "tag",
											"source": 2,
											"value": "176"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "tag",
											"source": 2,
											"value": "179"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "A0"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "182"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "182"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "144"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "tag",
											"source": 2,
											"value": "182"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "tag",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "185"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "185"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "144"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "tag",
											"source": 2,
											"value": "185"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2113,
											"end": 2517,
											"name": "tag",
											"source": 5,
											"value": "186"
										},
										{
											"begin": 2113,
											"end": 2517,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2113,
											"end": 2517,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4250,
											"end": 4262,
											"name": "PUSH",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4250,
											"end": 4274,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2192,
											"end": 2511,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "189"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7966,
											"end": 7982,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "10000000000000000"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "191"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "191"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "144"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "191"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4250,
											"end": 4262,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7966,
											"end": 7982,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "193"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "193"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "194"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "193"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "F652222313E28459528D920B65115C16C04F3EFC82AAEDC97BE59F3F377C0D3F"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7966,
											"end": 7982,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4250,
											"end": 4262,
											"name": "PUSH",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4250,
											"end": 4262,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 4250,
											"end": 4262,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2113,
											"end": 2517,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "189"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": 2113,
											"end": 2517,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2113,
											"end": 2517,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "tag",
											"source": 0,
											"value": "195"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "85"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1767,
											"end": 1873,
											"name": "tag",
											"source": 1,
											"value": "198"
										},
										{
											"begin": 1767,
											"end": 1873,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "10000000000000000000000000000000000000000"
										},
										{
											"begin": 1685,
											"end": 1692,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1836,
											"end": 1845,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "200"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "5061757361626C653A2070617573656400000000000000000000000000000000"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "200"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1767,
											"end": 1873,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 7622,
											"end": 8009,
											"name": "tag",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 7622,
											"end": 8009,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "203"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "203"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7723,
											"end": 7732,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7723,
											"end": 7761,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "204"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7723,
											"end": 7732,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "43686172697479206E616D6520616C726561647920726567697374657265642E"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "204"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7822,
											"end": 7838,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "205"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 2,
											"value": "7F"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "tag",
											"source": 2,
											"value": "205"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "206"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 7723,
											"end": 7732,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "tag",
											"source": 2,
											"value": "206"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7808,
											"end": 7907,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "207"
										},
										{
											"begin": 7816,
											"end": 7862,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7816,
											"end": 7867,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 7808,
											"end": 7907,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "208"
										},
										{
											"begin": 7808,
											"end": 7907,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7808,
											"end": 7907,
											"name": "tag",
											"source": 9,
											"value": "207"
										},
										{
											"begin": 7808,
											"end": 7907,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7808,
											"end": 7907,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7808,
											"end": 7907,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7917,
											"end": 7956,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "209"
										},
										{
											"begin": 7917,
											"end": 7956,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "210"
										},
										{
											"begin": 7917,
											"end": 7939,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "211"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "210"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7917,
											"end": 7956,
											"name": "tag",
											"source": 9,
											"value": "209"
										},
										{
											"begin": 7917,
											"end": 7956,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8121,
											"end": 8171,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "213"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8121,
											"end": 8171,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "186"
										},
										{
											"begin": 8121,
											"end": 8171,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 8121,
											"end": 8171,
											"name": "tag",
											"source": 5,
											"value": "213"
										},
										{
											"begin": 8121,
											"end": 8171,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8121,
											"end": 8171,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8121,
											"end": 8171,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7622,
											"end": 8009,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7622,
											"end": 8009,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7622,
											"end": 8009,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 1873,
											"end": 2180,
											"name": "tag",
											"source": 8,
											"value": "214"
										},
										{
											"begin": 1873,
											"end": 2180,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2055,
											"end": 2078,
											"name": "PUSH",
											"source": 8,
											"value": "95EA7B300000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "217"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "72"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "tag",
											"source": 8,
											"value": "217"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "CALL",
											"source": 8
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "218"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "173"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "tag",
											"source": 8,
											"value": "218"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2109,
											"end": 2166,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2109,
											"end": 2166,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2109,
											"end": 2166,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2109,
											"end": 2166,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "219"
										},
										{
											"begin": 2109,
											"end": 2166,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2121,
											"end": 2132,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2121,
											"end": 2137,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2121,
											"end": 2137,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2121,
											"end": 2165,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2121,
											"end": 2165,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "220"
										},
										{
											"begin": 2121,
											"end": 2165,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "221"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "113"
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "tag",
											"source": 8,
											"value": "221"
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2121,
											"end": 2165,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2121,
											"end": 2165,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2121,
											"end": 2165,
											"name": "tag",
											"source": 8,
											"value": "220"
										},
										{
											"begin": 2121,
											"end": 2165,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2109,
											"end": 2166,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2109,
											"end": 2166,
											"name": "tag",
											"source": 8,
											"value": "219"
										},
										{
											"begin": 2109,
											"end": 2166,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "222"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "5341000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "222"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1873,
											"end": 2180,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1873,
											"end": 2180,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1873,
											"end": 2180,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1873,
											"end": 2180,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 561,
											"end": 919,
											"name": "tag",
											"source": 8,
											"value": "223"
										},
										{
											"begin": 561,
											"end": 919,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 759,
											"end": 828,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 782,
											"end": 810,
											"name": "PUSH",
											"source": 8,
											"value": "23B872DD00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 759,
											"end": 828,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 759,
											"end": 828,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 759,
											"end": 828,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "225"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "179"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "tag",
											"source": 8,
											"value": "225"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 748,
											"end": 829,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 748,
											"end": 829,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 748,
											"end": 829,
											"name": "CALL",
											"source": 8
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "226"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "173"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "tag",
											"source": 8,
											"value": "226"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 847,
											"end": 904,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 847,
											"end": 904,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 847,
											"end": 904,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 847,
											"end": 904,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "227"
										},
										{
											"begin": 847,
											"end": 904,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 859,
											"end": 870,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 859,
											"end": 875,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 859,
											"end": 875,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 859,
											"end": 903,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 859,
											"end": 903,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 859,
											"end": 903,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 879,
											"end": 903,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "229"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 879,
											"end": 903,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 879,
											"end": 903,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 879,
											"end": 903,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 879,
											"end": 903,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 879,
											"end": 903,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 879,
											"end": 903,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 879,
											"end": 903,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "113"
										},
										{
											"begin": 879,
											"end": 903,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 879,
											"end": 903,
											"name": "tag",
											"source": 8,
											"value": "229"
										},
										{
											"begin": 879,
											"end": 903,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 859,
											"end": 903,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 859,
											"end": 903,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 859,
											"end": 903,
											"name": "tag",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 859,
											"end": 903,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 847,
											"end": 904,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 847,
											"end": 904,
											"name": "tag",
											"source": 8,
											"value": "227"
										},
										{
											"begin": 847,
											"end": 904,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "230"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "5354460000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "230"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 561,
											"end": 919,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 561,
											"end": 919,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 561,
											"end": 919,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 561,
											"end": 919,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 561,
											"end": 919,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "231"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "234"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "234"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "155"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "234"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "240"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "240"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "194"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "240"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "tag",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "242"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "195"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "tag",
											"source": 0,
											"value": "242"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "tag",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "244"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "195"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "tag",
											"source": 0,
											"value": "244"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "245"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "6464726573730000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "245"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "tag",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "247"
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "198"
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "tag",
											"source": 1,
											"value": "247"
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "248"
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "249"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 2,
											"value": "248"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2787,
											"end": 2800,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "250"
										},
										{
											"begin": 2787,
											"end": 2800,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2780,
											"end": 2784,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 2760,
											"end": 2770,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 2787,
											"end": 2800,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2787,
											"end": 2800,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "223"
										},
										{
											"begin": 2787,
											"end": 2800,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2787,
											"end": 2800,
											"name": "tag",
											"source": 9,
											"value": "250"
										},
										{
											"begin": 2787,
											"end": 2800,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2932,
											"end": 2942,
											"name": "PUSHIMMUTABLE",
											"source": 9,
											"value": "1273"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2945,
											"end": 2958,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "251"
										},
										{
											"begin": 2945,
											"end": 2958,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2945,
											"end": 2958,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2945,
											"end": 2958,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 2945,
											"end": 2958,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "214"
										},
										{
											"begin": 2945,
											"end": 2958,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2945,
											"end": 2958,
											"name": "tag",
											"source": 9,
											"value": "251"
										},
										{
											"begin": 2945,
											"end": 2958,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3219,
											"end": 3224,
											"name": "PUSHIMMUTABLE",
											"source": 9,
											"value": "1267"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "252"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "252"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFF"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP13",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2780,
											"end": 2784,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP11",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "PUSH",
											"source": 9,
											"value": "A0"
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP12",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "PUSH",
											"source": 9,
											"value": "C0"
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "EXTCODESIZE",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "259"
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "tag",
											"source": 9,
											"value": "259"
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "DB3E219800000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "260"
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "tag",
											"source": 9,
											"value": "260"
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "DUP11",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "262"
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "262"
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "263"
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "tag",
											"source": 9,
											"value": "262"
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "264"
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "265"
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "72"
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "tag",
											"source": 9,
											"value": "265"
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "266"
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "tag",
											"source": 9,
											"value": "266"
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "tag",
											"source": 9,
											"value": "264"
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "EXTCODESIZE",
											"source": 9
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "267"
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "tag",
											"source": 9,
											"value": "267"
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "2E1A7D4D00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "DUP11",
											"source": 9
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "270"
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "270"
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "263"
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "tag",
											"source": 9,
											"value": "270"
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "273"
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "272"
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "72"
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "tag",
											"source": 9,
											"value": "272"
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "273"
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "tag",
											"source": 9,
											"value": "273"
										},
										{
											"begin": 3984,
											"end": 4023,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 4125,
											"end": 4197,
											"name": "DUP10",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP13",
											"source": 9
										},
										{
											"begin": 4125,
											"end": 4156,
											"name": "DUP16",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4125,
											"end": 4197,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 4125,
											"end": 4197,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 4125,
											"end": 4197,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 4125,
											"end": 4197,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4125,
											"end": 4197,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "274"
										},
										{
											"begin": 4125,
											"end": 4197,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "173"
										},
										{
											"begin": 4125,
											"end": 4197,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4125,
											"end": 4197,
											"name": "tag",
											"source": 9,
											"value": "274"
										},
										{
											"begin": 4125,
											"end": 4197,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4125,
											"end": 4197,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4207,
											"end": 4275,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "275"
										},
										{
											"begin": 4207,
											"end": 4275,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 4207,
											"end": 4275,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "276"
										},
										{
											"begin": 4207,
											"end": 4275,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4207,
											"end": 4275,
											"name": "tag",
											"source": 9,
											"value": "275"
										},
										{
											"begin": 4207,
											"end": 4275,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4378,
											"end": 4419,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "277"
										},
										{
											"begin": 4378,
											"end": 4419,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4378,
											"end": 4419,
											"name": "DUP14",
											"source": 9
										},
										{
											"begin": 4378,
											"end": 4419,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "167"
										},
										{
											"begin": 4378,
											"end": 4419,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4378,
											"end": 4419,
											"name": "tag",
											"source": 9,
											"value": "277"
										},
										{
											"begin": 4378,
											"end": 4419,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4378,
											"end": 4419,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 4378,
											"end": 4419,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4378,
											"end": 4419,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4378,
											"end": 4419,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "278"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "278"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP11",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4566,
											"end": 5200,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4671,
											"end": 4675,
											"name": "PUSHIMMUTABLE",
											"source": 9,
											"value": "1270"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4566,
											"end": 5200,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4566,
											"end": 5200,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFF"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP15",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4566,
											"end": 5200,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4566,
											"end": 5200,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4566,
											"end": 5200,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2780,
											"end": 2784,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 4566,
											"end": 5200,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4566,
											"end": 5200,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP11",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 4566,
											"end": 5200,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4566,
											"end": 5200,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "PUSH",
											"source": 9,
											"value": "A0"
										},
										{
											"begin": 4566,
											"end": 5200,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4566,
											"end": 5200,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP15",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "PUSH",
											"source": 9,
											"value": "C0"
										},
										{
											"begin": 4566,
											"end": 5200,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4566,
											"end": 5200,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 4566,
											"end": 5200,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4566,
											"end": 5200,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "EXTCODESIZE",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "283"
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "tag",
											"source": 9,
											"value": "283"
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "414BF38900000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3747,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "284"
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 3906,
											"end": 3949,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "DUP12",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "tag",
											"source": 9,
											"value": "284"
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "DUP10",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "286"
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "286"
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "263"
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "tag",
											"source": 9,
											"value": "286"
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "287"
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "288"
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "72"
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "tag",
											"source": 9,
											"value": "288"
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "289"
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "tag",
											"source": 9,
											"value": "289"
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "tag",
											"source": 9,
											"value": "287"
										},
										{
											"begin": 5263,
											"end": 5298,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5318,
											"end": 5326,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 5318,
											"end": 5350,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 5318,
											"end": 5350,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5318,
											"end": 5363,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "291"
										},
										{
											"begin": 5318,
											"end": 5363,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 5318,
											"end": 5363,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 5318,
											"end": 5363,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "151"
										},
										{
											"begin": 5318,
											"end": 5363,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5318,
											"end": 5363,
											"name": "tag",
											"source": 9,
											"value": "291"
										},
										{
											"begin": 5318,
											"end": 5363,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 5387,
											"end": 5498,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 5387,
											"end": 5498,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2760,
											"end": 2770,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 5387,
											"end": 5498,
											"name": "PUSH",
											"source": 9,
											"value": "860654AD3D0539DBAC86150676768B53A47900BB45C5EB8D8D000FFBC4F67E6"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 5387,
											"end": 5498,
											"name": "LOG4",
											"source": 9
										},
										{
											"begin": 5387,
											"end": 5498,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5387,
											"end": 5498,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5387,
											"end": 5498,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5387,
											"end": 5498,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "293"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "tag",
											"source": 2,
											"value": "293"
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "tag",
											"source": 1,
											"value": "36"
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "296"
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "198"
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "tag",
											"source": 1,
											"value": "296"
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "297"
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "249"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 2,
											"value": "297"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5892,
											"end": 5910,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5892,
											"end": 5902,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 5892,
											"end": 5910,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 5892,
											"end": 5935,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5892,
											"end": 5935,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "298"
										},
										{
											"begin": 5892,
											"end": 5935,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5914,
											"end": 5935,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "299"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5914,
											"end": 5935,
											"name": "tag",
											"source": 9,
											"value": "299"
										},
										{
											"begin": 5914,
											"end": 5935,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5892,
											"end": 5902,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 5914,
											"end": 5935,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 5892,
											"end": 5935,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5892,
											"end": 5935,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5892,
											"end": 5935,
											"name": "tag",
											"source": 9,
											"value": "298"
										},
										{
											"begin": 5892,
											"end": 5935,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5884,
											"end": 5969,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "300"
										},
										{
											"begin": 5884,
											"end": 5969,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5884,
											"end": 5969,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "301"
										},
										{
											"begin": 5884,
											"end": 5969,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5884,
											"end": 5969,
											"name": "tag",
											"source": 9,
											"value": "300"
										},
										{
											"begin": 5884,
											"end": 5969,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5884,
											"end": 5969,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5987,
											"end": 6004,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 5979,
											"end": 6077,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "302"
										},
										{
											"begin": 6008,
											"end": 6023,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 5987,
											"end": 6023,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5987,
											"end": 6023,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 5979,
											"end": 6077,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "303"
										},
										{
											"begin": 5979,
											"end": 6077,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5979,
											"end": 6077,
											"name": "tag",
											"source": 9,
											"value": "302"
										},
										{
											"begin": 5979,
											"end": 6077,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5979,
											"end": 6077,
											"name": "POP",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 6129,
											"end": 6338,
											"name": "tag",
											"source": 9,
											"value": "304"
										},
										{
											"begin": 6129,
											"end": 6338,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6151,
											"end": 6168,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 6147,
											"end": 6168,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6147,
											"end": 6168,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6147,
											"end": 6168,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6147,
											"end": 6168,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 6147,
											"end": 6168,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "307"
										},
										{
											"begin": 6147,
											"end": 6168,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6147,
											"end": 6168,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6147,
											"end": 6168,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6147,
											"end": 6168,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "306"
										},
										{
											"begin": 6147,
											"end": 6168,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6147,
											"end": 6168,
											"name": "tag",
											"source": 9,
											"value": "307"
										},
										{
											"begin": 6147,
											"end": 6168,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6189,
											"end": 6223,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "308"
										},
										{
											"begin": 6212,
											"end": 6223,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "309"
										},
										{
											"begin": 6212,
											"end": 6223,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6212,
											"end": 6223,
											"name": "DUP11",
											"source": 9
										},
										{
											"begin": 6212,
											"end": 6223,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 6212,
											"end": 6223,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6212,
											"end": 6223,
											"name": "tag",
											"source": 9,
											"value": "309"
										},
										{
											"begin": 6212,
											"end": 6223,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6189,
											"end": 6223,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 6189,
											"end": 6223,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "151"
										},
										{
											"begin": 6189,
											"end": 6223,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6189,
											"end": 6223,
											"name": "tag",
											"source": 9,
											"value": "308"
										},
										{
											"begin": 6189,
											"end": 6223,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6189,
											"end": 6223,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 6189,
											"end": 6223,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6237,
											"end": 6327,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "310"
										},
										{
											"begin": 6245,
											"end": 6285,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "311"
										},
										{
											"begin": 6245,
											"end": 6269,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "312"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "313"
										},
										{
											"begin": 6255,
											"end": 6268,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "314"
										},
										{
											"begin": 6255,
											"end": 6268,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 6255,
											"end": 6268,
											"name": "DUP13",
											"source": 9
										},
										{
											"begin": 6255,
											"end": 6268,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 6255,
											"end": 6268,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6255,
											"end": 6268,
											"name": "tag",
											"source": 9,
											"value": "314"
										},
										{
											"begin": 6255,
											"end": 6268,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6255,
											"end": 6268,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "211"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "313"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6245,
											"end": 6269,
											"name": "tag",
											"source": 9,
											"value": "312"
										},
										{
											"begin": 6245,
											"end": 6269,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6245,
											"end": 6285,
											"name": "tag",
											"source": 9,
											"value": "311"
										},
										{
											"begin": 6245,
											"end": 6285,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6245,
											"end": 6285,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 6245,
											"end": 6285,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 6237,
											"end": 6327,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "316"
										},
										{
											"begin": 6237,
											"end": 6327,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6237,
											"end": 6327,
											"name": "tag",
											"source": 9,
											"value": "310"
										},
										{
											"begin": 6237,
											"end": 6327,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6237,
											"end": 6327,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6237,
											"end": 6327,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6170,
											"end": 6173,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "317"
										},
										{
											"begin": 6170,
											"end": 6173,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6170,
											"end": 6173,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "231"
										},
										{
											"begin": 6170,
											"end": 6173,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6170,
											"end": 6173,
											"name": "tag",
											"source": 9,
											"value": "317"
										},
										{
											"begin": 6170,
											"end": 6173,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6170,
											"end": 6173,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6170,
											"end": 6173,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6129,
											"end": 6338,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "304"
										},
										{
											"begin": 6129,
											"end": 6338,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6129,
											"end": 6338,
											"name": "tag",
											"source": 9,
											"value": "306"
										},
										{
											"begin": 6129,
											"end": 6338,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6129,
											"end": 6338,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6348,
											"end": 6432,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "318"
										},
										{
											"begin": 6379,
											"end": 6393,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "319"
										},
										{
											"begin": 6379,
											"end": 6393,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5318,
											"end": 5326,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6379,
											"end": 6393,
											"name": "tag",
											"source": 9,
											"value": "319"
										},
										{
											"begin": 6379,
											"end": 6393,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 6356,
											"end": 6393,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6356,
											"end": 6393,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 6356,
											"end": 6393,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 6348,
											"end": 6432,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "320"
										},
										{
											"begin": 6348,
											"end": 6432,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6348,
											"end": 6432,
											"name": "tag",
											"source": 9,
											"value": "318"
										},
										{
											"begin": 6348,
											"end": 6432,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7249,
											"name": "PUSHIMMUTABLE",
											"source": 9,
											"value": "1270"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7258,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7258,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6477,
											"end": 7528,
											"name": "tag",
											"source": 9,
											"value": "321"
										},
										{
											"begin": 6477,
											"end": 7528,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6499,
											"end": 6516,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 6495,
											"end": 6516,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6495,
											"end": 6516,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6495,
											"end": 6516,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6495,
											"end": 6516,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 6495,
											"end": 6516,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "324"
										},
										{
											"begin": 6495,
											"end": 6516,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6495,
											"end": 6516,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6495,
											"end": 6516,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6495,
											"end": 6516,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "323"
										},
										{
											"begin": 6495,
											"end": 6516,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6495,
											"end": 6516,
											"name": "tag",
											"source": 9,
											"value": "324"
										},
										{
											"begin": 6495,
											"end": 6516,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6880,
											"end": 6891,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "325"
										},
										{
											"begin": 6880,
											"end": 6891,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6880,
											"end": 6891,
											"name": "DUP11",
											"source": 9
										},
										{
											"begin": 6880,
											"end": 6891,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 6880,
											"end": 6891,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6880,
											"end": 6891,
											"name": "tag",
											"source": 9,
											"value": "325"
										},
										{
											"begin": 6880,
											"end": 6891,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6895,
											"end": 6931,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "326"
										},
										{
											"begin": 6895,
											"end": 6931,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 6895,
											"end": 6909,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "327"
										},
										{
											"begin": 6895,
											"end": 6909,
											"name": "DUP10",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5318,
											"end": 5326,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6895,
											"end": 6909,
											"name": "tag",
											"source": 9,
											"value": "327"
										},
										{
											"begin": 6895,
											"end": 6909,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 6895,
											"end": 6931,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "167"
										},
										{
											"begin": 6895,
											"end": 6931,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6895,
											"end": 6931,
											"name": "tag",
											"source": 9,
											"value": "326"
										},
										{
											"begin": 6895,
											"end": 6931,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6880,
											"end": 6970,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "328"
										},
										{
											"begin": 6894,
											"end": 6970,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "329"
										},
										{
											"begin": 6936,
											"end": 6969,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "330"
										},
										{
											"begin": 6936,
											"end": 6969,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 6936,
											"end": 6947,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "331"
										},
										{
											"begin": 6936,
											"end": 6947,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 6936,
											"end": 6947,
											"name": "DUP16",
											"source": 9
										},
										{
											"begin": 6936,
											"end": 6947,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 6936,
											"end": 6947,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6936,
											"end": 6947,
											"name": "tag",
											"source": 9,
											"value": "331"
										},
										{
											"begin": 6936,
											"end": 6947,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6936,
											"end": 6969,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "156"
										},
										{
											"begin": 6936,
											"end": 6969,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6936,
											"end": 6969,
											"name": "tag",
											"source": 9,
											"value": "330"
										},
										{
											"begin": 6936,
											"end": 6969,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 6970,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 6970,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "159"
										},
										{
											"begin": 6894,
											"end": 6970,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6894,
											"end": 6970,
											"name": "tag",
											"source": 9,
											"value": "329"
										},
										{
											"begin": 6894,
											"end": 6970,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6880,
											"end": 6970,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 6880,
											"end": 6970,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "151"
										},
										{
											"begin": 6880,
											"end": 6970,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6880,
											"end": 6970,
											"name": "tag",
											"source": 9,
											"value": "328"
										},
										{
											"begin": 6880,
											"end": 6970,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6855,
											"end": 6970,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 6855,
											"end": 6970,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6855,
											"end": 6970,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7094,
											"end": 7115,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "332"
										},
										{
											"begin": 7094,
											"end": 7111,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7094,
											"end": 7115,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "163"
										},
										{
											"begin": 7094,
											"end": 7115,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7094,
											"end": 7115,
											"name": "tag",
											"source": 9,
											"value": "332"
										},
										{
											"begin": 7094,
											"end": 7115,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7089,
											"end": 7115,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7089,
											"end": 7115,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 7085,
											"end": 7196,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 7085,
											"end": 7196,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "333"
										},
										{
											"begin": 7085,
											"end": 7196,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7152,
											"end": 7181,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "334"
										},
										{
											"begin": 7152,
											"end": 7181,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 7152,
											"end": 7166,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "327"
										},
										{
											"begin": 7152,
											"end": 7166,
											"name": "DUP10",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5318,
											"end": 5326,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7152,
											"end": 7181,
											"name": "tag",
											"source": 9,
											"value": "334"
										},
										{
											"begin": 7152,
											"end": 7181,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7135,
											"end": 7181,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7135,
											"end": 7181,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7085,
											"end": 7196,
											"name": "tag",
											"source": 9,
											"value": "333"
										},
										{
											"begin": 7085,
											"end": 7196,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7259,
											"end": 7283,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "336"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "313"
										},
										{
											"begin": 7269,
											"end": 7282,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "314"
										},
										{
											"begin": 7269,
											"end": 7282,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7269,
											"end": 7282,
											"name": "DUP12",
											"source": 9
										},
										{
											"begin": 7269,
											"end": 7282,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 7269,
											"end": 7282,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7259,
											"end": 7283,
											"name": "tag",
											"source": 9,
											"value": "336"
										},
										{
											"begin": 7259,
											"end": 7283,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "EXTCODESIZE",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "339"
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "tag",
											"source": 9,
											"value": "339"
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "A9059CBB00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6245,
											"end": 6254,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "DUP13",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "342"
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "342"
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "263"
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "tag",
											"source": 9,
											"value": "342"
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "343"
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "344"
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "72"
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "tag",
											"source": 9,
											"value": "344"
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "345"
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "tag",
											"source": 9,
											"value": "345"
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "tag",
											"source": 9,
											"value": "343"
										},
										{
											"begin": 7245,
											"end": 7300,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7314,
											"end": 7374,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "346"
										},
										{
											"begin": 7314,
											"end": 7374,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7314,
											"end": 7374,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "347"
										},
										{
											"begin": 7314,
											"end": 7374,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7314,
											"end": 7374,
											"name": "tag",
											"source": 9,
											"value": "346"
										},
										{
											"begin": 7314,
											"end": 7374,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7314,
											"end": 7374,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7314,
											"end": 7374,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7314,
											"end": 7374,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7416,
											"end": 7429,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "348"
										},
										{
											"begin": 7416,
											"end": 7429,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7416,
											"end": 7429,
											"name": "DUP10",
											"source": 9
										},
										{
											"begin": 7416,
											"end": 7429,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 7416,
											"end": 7429,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7416,
											"end": 7429,
											"name": "tag",
											"source": 9,
											"value": "348"
										},
										{
											"begin": 7416,
											"end": 7429,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7416,
											"end": 7429,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7431,
											"end": 7455,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "349"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "313"
										},
										{
											"begin": 7441,
											"end": 7454,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "314"
										},
										{
											"begin": 7441,
											"end": 7454,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 7441,
											"end": 7454,
											"name": "DUP13",
											"source": 9
										},
										{
											"begin": 7441,
											"end": 7454,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 7441,
											"end": 7454,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7431,
											"end": 7455,
											"name": "tag",
											"source": 9,
											"value": "349"
										},
										{
											"begin": 7431,
											"end": 7455,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7431,
											"end": 7455,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7431,
											"end": 7455,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7393,
											"end": 7472,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "352"
										},
										{
											"begin": 7393,
											"end": 7472,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7393,
											"end": 7472,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "353"
										},
										{
											"begin": 7393,
											"end": 7472,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7393,
											"end": 7472,
											"name": "tag",
											"source": 9,
											"value": "352"
										},
										{
											"begin": 7393,
											"end": 7472,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7393,
											"end": 7472,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7393,
											"end": 7472,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7393,
											"end": 7472,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7393,
											"end": 7472,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7393,
											"end": 7472,
											"name": "DUP11",
											"source": 9
										},
										{
											"begin": 7393,
											"end": 7472,
											"name": "PUSH",
											"source": 9,
											"value": "B0657052ACBF78260696B569DBE3A1F1F39287B5A3C378F5BCA0C20FBF062DEC"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 7393,
											"end": 7472,
											"name": "LOG4",
											"source": 9
										},
										{
											"begin": 7393,
											"end": 7472,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7393,
											"end": 7472,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7393,
											"end": 7472,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7487,
											"end": 7517,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "355"
										},
										{
											"begin": 7487,
											"end": 7517,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7487,
											"end": 7517,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 7487,
											"end": 7517,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "151"
										},
										{
											"begin": 7487,
											"end": 7517,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7487,
											"end": 7517,
											"name": "tag",
											"source": 9,
											"value": "355"
										},
										{
											"begin": 7487,
											"end": 7517,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7487,
											"end": 7517,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 7487,
											"end": 7517,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7487,
											"end": 7517,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6518,
											"end": 6521,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "356"
										},
										{
											"begin": 6518,
											"end": 6521,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6518,
											"end": 6521,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "231"
										},
										{
											"begin": 6518,
											"end": 6521,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6518,
											"end": 6521,
											"name": "tag",
											"source": 9,
											"value": "356"
										},
										{
											"begin": 6518,
											"end": 6521,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6518,
											"end": 6521,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6518,
											"end": 6521,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6477,
											"end": 7528,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "321"
										},
										{
											"begin": 6477,
											"end": 7528,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6477,
											"end": 7528,
											"name": "tag",
											"source": 9,
											"value": "323"
										},
										{
											"begin": 6477,
											"end": 7528,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6477,
											"end": 7528,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7538,
											"end": 7609,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "357"
										},
										{
											"begin": 7562,
											"end": 7576,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "358"
										},
										{
											"begin": 7562,
											"end": 7576,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "AND",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5318,
											"end": 5326,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7562,
											"end": 7576,
											"name": "tag",
											"source": 9,
											"value": "358"
										},
										{
											"begin": 7562,
											"end": 7576,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 7546,
											"end": 7576,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7546,
											"end": 7576,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 7538,
											"end": 7609,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "359"
										},
										{
											"begin": 7538,
											"end": 7609,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7538,
											"end": 7609,
											"name": "tag",
											"source": 9,
											"value": "357"
										},
										{
											"begin": 7538,
											"end": 7609,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7538,
											"end": 7609,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7538,
											"end": 7609,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7538,
											"end": 7609,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "360"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "tag",
											"source": 2,
											"value": "360"
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "353"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "362"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "362"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "211"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "364"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "364"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7723,
											"end": 7732,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "155"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "194"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "144"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "347"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "85"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "55534443207472616E7366657220746F2063686172697479206661696C65642E"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "316"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "85"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "417474656D707420746F20646F6E61746520746F20756E6B6E6F776E20636861"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "726974792E000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "359"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "85"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "1C"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4D7573742066696E616C697A6520656E746972652062616C616E636500000000"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "320"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "85"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "546F74616C2066696E616C697A6174696F6E20616D6F756E7420746F6F206869"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "6768000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "276"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "85"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "27"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4661696C656420746F2073656E642067617320746F20657068656D6572616C20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "77616C6C65742E00000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "303"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "85"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "43686172697469657320616E6420616D6F756E747320617272617973206F6620"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "646966666572656E74206C656E6774682E000000000000000000000000000000"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "301"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "85"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "1D"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "556E617574686F72697A6174696F6E2066696E616C697A6174696F6E2E000000"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "208"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "85"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "43686172697479206164647265737320616C7265616479207265676973746572"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "65642E0000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "249"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "85"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "tag",
											"source": 9,
											"value": "263"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 531,
											"end": 8142,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"USDC()": "89a30271",
							"WETH9()": "4aa4a4fc",
							"deposit(address,address,uint256,uint256,uint256,uint24,uint24,uint256)": "480a6fdc",
							"finalize(address,string[],uint256[])": "745284ce",
							"getBalance(address)": "f8b2cb4f",
							"owner()": "8da5cb5b",
							"paused()": "5c975abb",
							"registerCharity(string,address)": "7aed7746",
							"renounceOwnership()": "715018a6",
							"swapRouter()": "c31c9c07",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ephemeralGasMoneyAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IWETH\",\"name\":\"_weth9\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_usdc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ephemeralWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcOut\",\"type\":\"uint256\"}],\"name\":\"FountainDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"charity\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"charityAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"name\":\"FountainDonation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"name\":\"FountainFinalization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ephemeralWalletAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethSwapAmountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"ethSwapPoolFee\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"usdcSwapPoolFee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"usdcSwapAmountOutMinimum\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"charities_\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userBalance_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"charityName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"charityAddress\",\"type\":\"address\"}],\"name\":\"registerCharity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/fountain.sol\":\"Serenity\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/security/Pausable.sol\":{\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ddabb16009cd17eaca3143feadf450ac13e72919ebe2ca50e00f61cb78bc004\",\"dweb:/ipfs/QmSPwPxX7d6TTWakN5jy5wsaGkS1y9TW8fuhGSraMkLk2B\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d4831d777a29ebdf9f2caecd70e74b97bff1b70e53622fd0a02aed01e21c8271\",\"dweb:/ipfs/QmUqurVVnCc7XkMxb2k23TVQUtuhHZduJ3hTZarTJrqU24\"]},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a8a2c3e55965b61bcd91993d8e1d5d34b8b8a63e0fdfce87a85f6af92526fd53\",\"dweb:/ipfs/QmQj2CSCSwqDSU4KMNWxGsN2336Cy64WgpV1X1EHXNZWxM\"]},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://da1d1e81e5bf534f0bf2934b3193db6cb1933f91ec006d2b88e9ad10a617a2d2\",\"dweb:/ipfs/QmcPBk47QLMFWcX2y2S9eMFsJgoYWBd3R8ey55Bgmv6w6v\"]},\"contracts/fountain.sol\":{\"keccak256\":\"0xc9fd688cc0c7c26a6f7199f0a6a93073f196c7855a698dfec2f2c4a6613b4e86\",\"license\":\"Proprietary\",\"urls\":[\"bzz-raw://b1b75f20519b56a675d3bec26f4f3a6b55f7e56433a4175e286ca865fba82997\",\"dweb:/ipfs/QmZ7rdghFwUwePFwiAgCnK3fABEoedWejUBmA7EHg68cvE\"]},\"contracts/weth.sol\":{\"keccak256\":\"0x787a702bddb9202ee518db255fbdc5a84db2b23b1a2a7ddf45c13655ad335428\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3684e9dc5511f81125501f4c00d5eabacc7188ee8903a48f0b108d625f529430\",\"dweb:/ipfs/QmXTz4u2ZfhiwiPnvU3qKUytmk9wGsXinStgbVEivwqKUk\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "contracts/fountain.sol:Serenity",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 130,
								"contract": "contracts/fountain.sol:Serenity",
								"label": "_paused",
								"offset": 20,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 231,
								"contract": "contracts/fountain.sol:Serenity",
								"label": "_status",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 1275,
								"contract": "contracts/fountain.sol:Serenity",
								"label": "ephemeralGasMoneyAmount",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 1279,
								"contract": "contracts/fountain.sol:Serenity",
								"label": "balances",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 1283,
								"contract": "contracts/fountain.sol:Serenity",
								"label": "charities",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_string_memory_ptr,t_address)"
							},
							{
								"astId": 1287,
								"contract": "contracts/fountain.sol:Serenity",
								"label": "charitiesReverse",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_string_storage)"
							},
							{
								"astId": 1290,
								"contract": "contracts/fountain.sol:Serenity",
								"label": "charityAddresses",
								"offset": 0,
								"slot": "6",
								"type": "t_struct(AddressSet)672_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_bytes32)dyn_storage": {
								"base": "t_bytes32",
								"encoding": "dynamic_array",
								"label": "bytes32[]",
								"numberOfBytes": "32"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_address,t_string_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => string)",
								"numberOfBytes": "32",
								"value": "t_string_storage"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_bytes32,t_uint256)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_string_memory_ptr,t_address)": {
								"encoding": "mapping",
								"key": "t_string_memory_ptr",
								"label": "mapping(string => address)",
								"numberOfBytes": "32",
								"value": "t_address"
							},
							"t_string_memory_ptr": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(AddressSet)672_storage": {
								"encoding": "inplace",
								"label": "struct EnumerableSet.AddressSet",
								"members": [
									{
										"astId": 671,
										"contract": "contracts/fountain.sol:Serenity",
										"label": "_inner",
										"offset": 0,
										"slot": "0",
										"type": "t_struct(Set)371_storage"
									}
								],
								"numberOfBytes": "64"
							},
							"t_struct(Set)371_storage": {
								"encoding": "inplace",
								"label": "struct EnumerableSet.Set",
								"members": [
									{
										"astId": 366,
										"contract": "contracts/fountain.sol:Serenity",
										"label": "_values",
										"offset": 0,
										"slot": "0",
										"type": "t_array(t_bytes32)dyn_storage"
									},
									{
										"astId": 370,
										"contract": "contracts/fountain.sol:Serenity",
										"label": "_indexes",
										"offset": 0,
										"slot": "1",
										"type": "t_mapping(t_bytes32,t_uint256)"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/weth.sol": {
				"IWETH": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "deposit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"deposit()": "d0e30db0",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"withdraw(uint256)": "2e1a7d4d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/weth.sol\":\"IWETH\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"contracts/weth.sol\":{\"keccak256\":\"0x787a702bddb9202ee518db255fbdc5a84db2b23b1a2a7ddf45c13655ad335428\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3684e9dc5511f81125501f4c00d5eabacc7188ee8903a48f0b108d625f529430\",\"dweb:/ipfs/QmXTz4u2ZfhiwiPnvU3qKUytmk9wGsXinStgbVEivwqKUk\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							360
						],
						"Ownable": [
							112
						]
					},
					"id": 113,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 113,
							"sourceUnit": 361,
							"src": "127:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 360,
										"src": "683:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "683:7:0"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "159:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 112,
							"linearizedBaseContracts": [
								112,
								360
							],
							"name": "Ownable",
							"nameLocation": "672:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "713:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 112,
									"src": "697:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "697:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "732:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "769:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "753:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "800:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "784:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:0"
									},
									"src": "726:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "926:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 350,
																"src": "955:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "955:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "936:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "936:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "936:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "816:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "926:0:0"
									},
									"scope": 112,
									"src": "912:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 30,
										"nodeType": "Block",
										"src": "1084:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 26,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "1094:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 27,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1094:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 28,
												"nodeType": "ExpressionStatement",
												"src": "1094:13:0"
											},
											{
												"id": 29,
												"nodeType": "PlaceholderStatement",
												"src": "1117:1:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "981:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 31,
									"name": "onlyOwner",
									"nameLocation": "1072:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1081:2:0"
									},
									"src": "1063:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "1256:30:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1273:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 36,
												"id": 38,
												"nodeType": "Return",
												"src": "1266:13:0"
											}
										]
									},
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "1131:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 40,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1210:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1215:2:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "1247:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1247:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1246:9:0"
									},
									"scope": 112,
									"src": "1201:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1404:85:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 49,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 45,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 40,
																	"src": "1422:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1422:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 47,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 350,
																	"src": "1433:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 48,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1433:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1422:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 50,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1447:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 44,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1414:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1414:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "1414:68:0"
											}
										]
									},
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1292:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1368:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1379:2:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1404:0:0"
									},
									"scope": 112,
									"src": "1359:130:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1885:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 63,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1922:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1914:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 61,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1914:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1914:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 60,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "1895:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1895:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "1895:30:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1495:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 58,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 57,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1875:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1875:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1840:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1857:2:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1885:0:0"
									},
									"scope": 112,
									"src": "1831:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 90,
										"nodeType": "Block",
										"src": "2151:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 77,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 71,
																"src": "2169:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 80,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2189:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 79,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2181:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 78,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2181:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 81,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2181:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2169:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 83,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2193:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 76,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2161:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2161:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 85,
												"nodeType": "ExpressionStatement",
												"src": "2161:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 87,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 71,
															"src": "2263:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 86,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "2244:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 88,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2244:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 89,
												"nodeType": "ExpressionStatement",
												"src": "2244:28:0"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1938:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 91,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 74,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 73,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2141:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2141:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2090:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2116:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "2108:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2108:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2107:18:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2151:0:0"
									},
									"scope": 112,
									"src": "2081:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "2496:124:0",
										"statements": [
											{
												"assignments": [
													98
												],
												"declarations": [
													{
														"constant": false,
														"id": 98,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2514:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 110,
														"src": "2506:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 97,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2506:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 100,
												"initialValue": {
													"id": 99,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2525:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2506:25:0"
											},
											{
												"expression": {
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 101,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2541:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 102,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 94,
														"src": "2550:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2541:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "2541:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 106,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 98,
															"src": "2594:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 107,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 94,
															"src": "2604:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 105,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2573:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2573:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 109,
												"nodeType": "EmitStatement",
												"src": "2568:45:0"
											}
										]
									},
									"documentation": {
										"id": 92,
										"nodeType": "StructuredDocumentation",
										"src": "2285:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2442:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2469:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "2461:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 93,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2461:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2460:18:0"
									},
									"returnParameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2496:0:0"
									},
									"scope": 112,
									"src": "2433:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 113,
							"src": "654:1968:0",
							"usedErrors": []
						}
					],
					"src": "102:2521:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/security/Pausable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/Pausable.sol",
					"exportedSymbols": {
						"Context": [
							360
						],
						"Pausable": [
							220
						]
					},
					"id": 221,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 114,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 115,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 221,
							"sourceUnit": 361,
							"src": "130:30:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 117,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 360,
										"src": "632:7:1"
									},
									"id": 118,
									"nodeType": "InheritanceSpecifier",
									"src": "632:7:1"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 116,
								"nodeType": "StructuredDocumentation",
								"src": "162:439:1",
								"text": " @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."
							},
							"fullyImplemented": true,
							"id": 220,
							"linearizedBaseContracts": [
								220,
								360
							],
							"name": "Pausable",
							"nameLocation": "620:8:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 119,
										"nodeType": "StructuredDocumentation",
										"src": "646:73:1",
										"text": " @dev Emitted when the pause is triggered by `account`."
									},
									"id": 123,
									"name": "Paused",
									"nameLocation": "730:6:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 121,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "745:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 123,
												"src": "737:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 120,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "737:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "736:17:1"
									},
									"src": "724:30:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 124,
										"nodeType": "StructuredDocumentation",
										"src": "760:70:1",
										"text": " @dev Emitted when the pause is lifted by `account`."
									},
									"id": 128,
									"name": "Unpaused",
									"nameLocation": "841:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 126,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "858:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "850:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 125,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "850:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "849:17:1"
									},
									"src": "835:32:1"
								},
								{
									"constant": false,
									"id": 130,
									"mutability": "mutable",
									"name": "_paused",
									"nameLocation": "886:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 220,
									"src": "873:20:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 129,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "873:4:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 138,
										"nodeType": "Block",
										"src": "986:32:1",
										"statements": [
											{
												"expression": {
													"id": 136,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 134,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 130,
														"src": "996:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 135,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1006:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "996:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 137,
												"nodeType": "ExpressionStatement",
												"src": "996:15:1"
											}
										]
									},
									"documentation": {
										"id": 131,
										"nodeType": "StructuredDocumentation",
										"src": "900:67:1",
										"text": " @dev Initializes the contract in unpaused state."
									},
									"id": 139,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 132,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "983:2:1"
									},
									"returnParameters": {
										"id": 133,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "986:0:1"
									},
									"scope": 220,
									"src": "972:46:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 146,
										"nodeType": "Block",
										"src": "1229:47:1",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 142,
														"name": "_requireNotPaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 176,
														"src": "1239:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1239:19:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 144,
												"nodeType": "ExpressionStatement",
												"src": "1239:19:1"
											},
											{
												"id": 145,
												"nodeType": "PlaceholderStatement",
												"src": "1268:1:1"
											}
										]
									},
									"documentation": {
										"id": 140,
										"nodeType": "StructuredDocumentation",
										"src": "1024:175:1",
										"text": " @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."
									},
									"id": 147,
									"name": "whenNotPaused",
									"nameLocation": "1213:13:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 141,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1226:2:1"
									},
									"src": "1204:72:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 154,
										"nodeType": "Block",
										"src": "1476:44:1",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 150,
														"name": "_requirePaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 187,
														"src": "1486:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 151,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1486:16:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 152,
												"nodeType": "ExpressionStatement",
												"src": "1486:16:1"
											},
											{
												"id": 153,
												"nodeType": "PlaceholderStatement",
												"src": "1512:1:1"
											}
										]
									},
									"documentation": {
										"id": 148,
										"nodeType": "StructuredDocumentation",
										"src": "1282:167:1",
										"text": " @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."
									},
									"id": 155,
									"name": "whenPaused",
									"nameLocation": "1463:10:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 149,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1473:2:1"
									},
									"src": "1454:66:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 163,
										"nodeType": "Block",
										"src": "1668:31:1",
										"statements": [
											{
												"expression": {
													"id": 161,
													"name": "_paused",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 130,
													"src": "1685:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 160,
												"id": 162,
												"nodeType": "Return",
												"src": "1678:14:1"
											}
										]
									},
									"documentation": {
										"id": 156,
										"nodeType": "StructuredDocumentation",
										"src": "1526:84:1",
										"text": " @dev Returns true if the contract is paused, and false otherwise."
									},
									"functionSelector": "5c975abb",
									"id": 164,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "paused",
									"nameLocation": "1624:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1630:2:1"
									},
									"returnParameters": {
										"id": 160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 164,
												"src": "1662:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 158,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1662:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1661:6:1"
									},
									"scope": 220,
									"src": "1615:84:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 175,
										"nodeType": "Block",
										"src": "1818:55:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 171,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "1836:9:1",
															"subExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 169,
																	"name": "paused",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 164,
																	"src": "1837:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																		"typeString": "function () view returns (bool)"
																	}
																},
																"id": 170,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1837:8:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5061757361626c653a20706175736564",
															"id": 172,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1847:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a",
																"typeString": "literal_string \"Pausable: paused\""
															},
															"value": "Pausable: paused"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a",
																"typeString": "literal_string \"Pausable: paused\""
															}
														],
														"id": 168,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1828:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 173,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1828:38:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 174,
												"nodeType": "ExpressionStatement",
												"src": "1828:38:1"
											}
										]
									},
									"documentation": {
										"id": 165,
										"nodeType": "StructuredDocumentation",
										"src": "1705:57:1",
										"text": " @dev Throws if the contract is paused."
									},
									"id": 176,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requireNotPaused",
									"nameLocation": "1776:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 166,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1793:2:1"
									},
									"returnParameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1818:0:1"
									},
									"scope": 220,
									"src": "1767:106:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 186,
										"nodeType": "Block",
										"src": "1993:58:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 181,
																"name": "paused",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 164,
																"src": "2011:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																	"typeString": "function () view returns (bool)"
																}
															},
															"id": 182,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2011:8:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5061757361626c653a206e6f7420706175736564",
															"id": 183,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2021:22:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a",
																"typeString": "literal_string \"Pausable: not paused\""
															},
															"value": "Pausable: not paused"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a",
																"typeString": "literal_string \"Pausable: not paused\""
															}
														],
														"id": 180,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2003:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 184,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2003:41:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 185,
												"nodeType": "ExpressionStatement",
												"src": "2003:41:1"
											}
										]
									},
									"documentation": {
										"id": 177,
										"nodeType": "StructuredDocumentation",
										"src": "1879:61:1",
										"text": " @dev Throws if the contract is not paused."
									},
									"id": 187,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requirePaused",
									"nameLocation": "1954:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1968:2:1"
									},
									"returnParameters": {
										"id": 179,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1993:0:1"
									},
									"scope": 220,
									"src": "1945:106:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 202,
										"nodeType": "Block",
										"src": "2235:66:1",
										"statements": [
											{
												"expression": {
													"id": 195,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 193,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 130,
														"src": "2245:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 194,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2255:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "2245:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 196,
												"nodeType": "ExpressionStatement",
												"src": "2245:14:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 198,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 350,
																"src": "2281:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 199,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2281:12:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 197,
														"name": "Paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 123,
														"src": "2274:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 200,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2274:20:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 201,
												"nodeType": "EmitStatement",
												"src": "2269:25:1"
											}
										]
									},
									"documentation": {
										"id": 188,
										"nodeType": "StructuredDocumentation",
										"src": "2057:124:1",
										"text": " @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."
									},
									"id": 203,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 191,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 190,
												"name": "whenNotPaused",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 147,
												"src": "2221:13:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "2221:13:1"
										}
									],
									"name": "_pause",
									"nameLocation": "2195:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 189,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2201:2:1"
									},
									"returnParameters": {
										"id": 192,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2235:0:1"
									},
									"scope": 220,
									"src": "2186:115:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 218,
										"nodeType": "Block",
										"src": "2481:69:1",
										"statements": [
											{
												"expression": {
													"id": 211,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 209,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 130,
														"src": "2491:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 210,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2501:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "2491:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 212,
												"nodeType": "ExpressionStatement",
												"src": "2491:15:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 214,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 350,
																"src": "2530:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 215,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2530:12:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 213,
														"name": "Unpaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 128,
														"src": "2521:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 216,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2521:22:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 217,
												"nodeType": "EmitStatement",
												"src": "2516:27:1"
											}
										]
									},
									"documentation": {
										"id": 204,
										"nodeType": "StructuredDocumentation",
										"src": "2307:121:1",
										"text": " @dev Returns to normal state.\n Requirements:\n - The contract must be paused."
									},
									"id": 219,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 207,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 206,
												"name": "whenPaused",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 155,
												"src": "2470:10:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "2470:10:1"
										}
									],
									"name": "_unpause",
									"nameLocation": "2442:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 205,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2450:2:1"
									},
									"returnParameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2481:0:1"
									},
									"scope": 220,
									"src": "2433:117:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 221,
							"src": "602:1950:1",
							"usedErrors": []
						}
					],
					"src": "105:2448:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							260
						]
					},
					"id": 261,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 222,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "97:23:2"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 223,
								"nodeType": "StructuredDocumentation",
								"src": "122:750:2",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 260,
							"linearizedBaseContracts": [
								260
							],
							"name": "ReentrancyGuard",
							"nameLocation": "891:15:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 226,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1686:12:2",
									"nodeType": "VariableDeclaration",
									"scope": 260,
									"src": "1661:41:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 224,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1661:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 225,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1701:1:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 229,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1733:8:2",
									"nodeType": "VariableDeclaration",
									"scope": 260,
									"src": "1708:37:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 227,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1708:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 228,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1744:1:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 231,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1768:7:2",
									"nodeType": "VariableDeclaration",
									"scope": 260,
									"src": "1752:23:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 230,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1752:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 238,
										"nodeType": "Block",
										"src": "1796:39:2",
										"statements": [
											{
												"expression": {
													"id": 236,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 234,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 231,
														"src": "1806:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 235,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 226,
														"src": "1816:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1806:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 237,
												"nodeType": "ExpressionStatement",
												"src": "1806:22:2"
											}
										]
									},
									"id": 239,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 232,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1793:2:2"
									},
									"returnParameters": {
										"id": 233,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1796:0:2"
									},
									"scope": 260,
									"src": "1782:53:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 258,
										"nodeType": "Block",
										"src": "2236:421:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 245,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 243,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 231,
																"src": "2325:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 244,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 229,
																"src": "2336:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2325:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 246,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2346:33:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 242,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2317:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 247,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2317:63:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 248,
												"nodeType": "ExpressionStatement",
												"src": "2317:63:2"
											},
											{
												"expression": {
													"id": 251,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 249,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 231,
														"src": "2455:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 250,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 229,
														"src": "2465:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2455:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 252,
												"nodeType": "ExpressionStatement",
												"src": "2455:18:2"
											},
											{
												"id": 253,
												"nodeType": "PlaceholderStatement",
												"src": "2484:1:2"
											},
											{
												"expression": {
													"id": 256,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 254,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 231,
														"src": "2628:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 255,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 226,
														"src": "2638:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2628:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 257,
												"nodeType": "ExpressionStatement",
												"src": "2628:22:2"
											}
										]
									},
									"documentation": {
										"id": 240,
										"nodeType": "StructuredDocumentation",
										"src": "1841:366:2",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 259,
									"name": "nonReentrant",
									"nameLocation": "2221:12:2",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 241,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2233:2:2"
									},
									"src": "2212:445:2",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 261,
							"src": "873:1786:2",
							"usedErrors": []
						}
					],
					"src": "97:2563:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							338
						]
					},
					"id": 339,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 262,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 263,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:3",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 338,
							"linearizedBaseContracts": [
								338
							],
							"name": "IERC20",
							"nameLocation": "212:6:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 264,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:3",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 272,
									"name": "Transfer",
									"nameLocation": "394:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 266,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 272,
												"src": "403:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 265,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 268,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 272,
												"src": "425:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 267,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 270,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 272,
												"src": "445:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 269,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:3"
									},
									"src": "388:72:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 273,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:3",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 281,
									"name": "Approval",
									"nameLocation": "625:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 275,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 281,
												"src": "634:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 274,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 277,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 281,
												"src": "657:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 276,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 279,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 281,
												"src": "682:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 278,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:3"
									},
									"src": "619:78:3"
								},
								{
									"documentation": {
										"id": 282,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:3",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 287,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:3"
									},
									"returnParameters": {
										"id": 286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 285,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 287,
												"src": "820:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 284,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:3"
									},
									"scope": 338,
									"src": "774:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 288,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:3",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 295,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 295,
												"src": "931:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 289,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:3"
									},
									"returnParameters": {
										"id": 294,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 293,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 295,
												"src": "971:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 292,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:3"
									},
									"scope": 338,
									"src": "912:68:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 296,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:3",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 305,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 301,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 298,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "1211:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 297,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 300,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "1223:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 299,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:3"
									},
									"returnParameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 303,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "1257:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 302,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:3"
									},
									"scope": 338,
									"src": "1193:70:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 306,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:3",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 315,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 311,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 308,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 315,
												"src": "1557:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 307,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 310,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 315,
												"src": "1572:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 309,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:3"
									},
									"returnParameters": {
										"id": 314,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 313,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 315,
												"src": "1612:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 312,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:3"
									},
									"scope": 338,
									"src": "1538:83:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 316,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:3",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 325,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 321,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 318,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 325,
												"src": "2291:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 317,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 320,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 325,
												"src": "2308:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 319,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:3"
									},
									"returnParameters": {
										"id": 324,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 323,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 325,
												"src": "2342:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 322,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:3"
									},
									"scope": 338,
									"src": "2274:74:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 326,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:3",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 337,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 333,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 328,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2685:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 337,
												"src": "2677:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 327,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 330,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2707:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 337,
												"src": "2699:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 329,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 332,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2727:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 337,
												"src": "2719:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 331,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:72:3"
									},
									"returnParameters": {
										"id": 336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 335,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 337,
												"src": "2758:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 334,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2758:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2757:6:3"
									},
									"scope": 338,
									"src": "2646:118:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 339,
							"src": "202:2564:3",
							"usedErrors": []
						}
					],
					"src": "106:2661:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							360
						]
					},
					"id": 361,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 340,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:4"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 341,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:4",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 360,
							"linearizedBaseContracts": [
								360
							],
							"name": "Context",
							"nameLocation": "626:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 349,
										"nodeType": "Block",
										"src": "702:34:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 346,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 347,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 345,
												"id": 348,
												"nodeType": "Return",
												"src": "712:17:4"
											}
										]
									},
									"id": 350,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 342,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:4"
									},
									"returnParameters": {
										"id": 345,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 344,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 350,
												"src": "693:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 343,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:4"
									},
									"scope": 360,
									"src": "640:96:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 358,
										"nodeType": "Block",
										"src": "809:32:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 355,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 356,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 354,
												"id": 357,
												"nodeType": "Return",
												"src": "819:15:4"
											}
										]
									},
									"id": 359,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 351,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:4"
									},
									"returnParameters": {
										"id": 354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 353,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "793:14:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 352,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:4"
									},
									"scope": 360,
									"src": "742:99:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 361,
							"src": "608:235:4",
							"usedErrors": []
						}
					],
					"src": "86:758:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol",
					"exportedSymbols": {
						"EnumerableSet": [
							959
						]
					},
					"id": 960,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 362,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "115:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 363,
								"nodeType": "StructuredDocumentation",
								"src": "140:1087:5",
								"text": " @dev Library for managing\n https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n types.\n Sets have the following properties:\n - Elements are added, removed, and checked for existence in constant time\n (O(1)).\n - Elements are enumerated in O(n). No guarantees are made on the ordering.\n ```\n contract Example {\n     // Add the library methods\n     using EnumerableSet for EnumerableSet.AddressSet;\n     // Declare a set state variable\n     EnumerableSet.AddressSet private mySet;\n }\n ```\n As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n and `uint256` (`UintSet`) are supported.\n [WARNING]\n ====\n  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n ===="
							},
							"fullyImplemented": true,
							"id": 959,
							"linearizedBaseContracts": [
								959
							],
							"name": "EnumerableSet",
							"nameLocation": "1236:13:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "EnumerableSet.Set",
									"id": 371,
									"members": [
										{
											"constant": false,
											"id": 366,
											"mutability": "mutable",
											"name": "_values",
											"nameLocation": "1760:7:5",
											"nodeType": "VariableDeclaration",
											"scope": 371,
											"src": "1750:17:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
												"typeString": "bytes32[]"
											},
											"typeName": {
												"baseType": {
													"id": 364,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1750:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 365,
												"nodeType": "ArrayTypeName",
												"src": "1750:9:5",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
													"typeString": "bytes32[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 370,
											"mutability": "mutable",
											"name": "_indexes",
											"nameLocation": "1928:8:5",
											"nodeType": "VariableDeclaration",
											"scope": 371,
											"src": "1900:36:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
												"typeString": "mapping(bytes32 => uint256)"
											},
											"typeName": {
												"id": 369,
												"keyType": {
													"id": 367,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1908:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "Mapping",
												"src": "1900:27:5",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
													"typeString": "mapping(bytes32 => uint256)"
												},
												"valueType": {
													"id": 368,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1919:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Set",
									"nameLocation": "1703:3:5",
									"nodeType": "StructDefinition",
									"scope": 959,
									"src": "1696:247:5",
									"visibility": "public"
								},
								{
									"body": {
										"id": 412,
										"nodeType": "Block",
										"src": "2182:335:5",
										"statements": [
											{
												"condition": {
													"id": 386,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "2196:22:5",
													"subExpression": {
														"arguments": [
															{
																"id": 383,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 375,
																"src": "2207:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
																	"typeString": "struct EnumerableSet.Set storage pointer"
																}
															},
															{
																"id": 384,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 377,
																"src": "2212:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
																	"typeString": "struct EnumerableSet.Set storage pointer"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 382,
															"name": "_contains",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 516,
															"src": "2197:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$371_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
																"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
															}
														},
														"id": 385,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2197:21:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 410,
													"nodeType": "Block",
													"src": "2474:37:5",
													"statements": [
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 408,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2495:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 381,
															"id": 409,
															"nodeType": "Return",
															"src": "2488:12:5"
														}
													]
												},
												"id": 411,
												"nodeType": "IfStatement",
												"src": "2192:319:5",
												"trueBody": {
													"id": 407,
													"nodeType": "Block",
													"src": "2220:248:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 392,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 377,
																		"src": "2251:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"expression": {
																		"expression": {
																			"id": 387,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 375,
																			"src": "2234:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 390,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 366,
																		"src": "2234:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 391,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "push",
																	"nodeType": "MemberAccess",
																	"src": "2234:16:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$",
																		"typeString": "function (bytes32[] storage pointer,bytes32)"
																	}
																},
																"id": 393,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2234:23:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 394,
															"nodeType": "ExpressionStatement",
															"src": "2234:23:5"
														},
														{
															"expression": {
																"id": 403,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"expression": {
																			"id": 395,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 375,
																			"src": "2392:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 398,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_indexes",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 370,
																		"src": "2392:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																			"typeString": "mapping(bytes32 => uint256)"
																		}
																	},
																	"id": 399,
																	"indexExpression": {
																		"id": 397,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 377,
																		"src": "2405:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "2392:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"expression": {
																			"id": 400,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 375,
																			"src": "2414:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 401,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 366,
																		"src": "2414:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 402,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "2414:18:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2392:40:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 404,
															"nodeType": "ExpressionStatement",
															"src": "2392:40:5"
														},
														{
															"expression": {
																"hexValue": "74727565",
																"id": 405,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2453:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 381,
															"id": 406,
															"nodeType": "Return",
															"src": "2446:11:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 372,
										"nodeType": "StructuredDocumentation",
										"src": "1949:159:5",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 413,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_add",
									"nameLocation": "2122:4:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 378,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 375,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "2139:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 413,
												"src": "2127:15:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 374,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 373,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 371,
														"src": "2127:3:5"
													},
													"referencedDeclaration": 371,
													"src": "2127:3:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 377,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2152:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 413,
												"src": "2144:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 376,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2144:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2126:32:5"
									},
									"returnParameters": {
										"id": 381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 380,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 413,
												"src": "2176:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 379,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2176:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2175:6:5"
									},
									"scope": 959,
									"src": "2113:404:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 496,
										"nodeType": "Block",
										"src": "2757:1316:5",
										"statements": [
											{
												"assignments": [
													425
												],
												"declarations": [
													{
														"constant": false,
														"id": 425,
														"mutability": "mutable",
														"name": "valueIndex",
														"nameLocation": "2875:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 496,
														"src": "2867:18:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 424,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2867:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 430,
												"initialValue": {
													"baseExpression": {
														"expression": {
															"id": 426,
															"name": "set",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "2888:3:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
																"typeString": "struct EnumerableSet.Set storage pointer"
															}
														},
														"id": 427,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_indexes",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 370,
														"src": "2888:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
															"typeString": "mapping(bytes32 => uint256)"
														}
													},
													"id": 429,
													"indexExpression": {
														"id": 428,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 419,
														"src": "2901:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2888:19:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2867:40:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 433,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 431,
														"name": "valueIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 425,
														"src": "2922:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 432,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2936:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2922:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 494,
													"nodeType": "Block",
													"src": "4030:37:5",
													"statements": [
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 492,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4051:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 423,
															"id": 493,
															"nodeType": "Return",
															"src": "4044:12:5"
														}
													]
												},
												"id": 495,
												"nodeType": "IfStatement",
												"src": "2918:1149:5",
												"trueBody": {
													"id": 491,
													"nodeType": "Block",
													"src": "2939:1085:5",
													"statements": [
														{
															"assignments": [
																435
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 435,
																	"mutability": "mutable",
																	"name": "toDeleteIndex",
																	"nameLocation": "3299:13:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 491,
																	"src": "3291:21:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 434,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3291:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 439,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 438,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 436,
																	"name": "valueIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 425,
																	"src": "3315:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 437,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3328:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "3315:14:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3291:38:5"
														},
														{
															"assignments": [
																441
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 441,
																	"mutability": "mutable",
																	"name": "lastIndex",
																	"nameLocation": "3351:9:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 491,
																	"src": "3343:17:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 440,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3343:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 447,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 446,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"expression": {
																			"id": 442,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 417,
																			"src": "3363:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 443,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 366,
																		"src": "3363:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 444,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "3363:18:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 445,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3384:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "3363:22:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3343:42:5"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 450,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 448,
																	"name": "lastIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 441,
																	"src": "3404:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"id": 449,
																	"name": "toDeleteIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 435,
																	"src": "3417:13:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3404:26:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 475,
															"nodeType": "IfStatement",
															"src": "3400:398:5",
															"trueBody": {
																"id": 474,
																"nodeType": "Block",
																"src": "3432:366:5",
																"statements": [
																	{
																		"assignments": [
																			452
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 452,
																				"mutability": "mutable",
																				"name": "lastValue",
																				"nameLocation": "3458:9:5",
																				"nodeType": "VariableDeclaration",
																				"scope": 474,
																				"src": "3450:17:5",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				},
																				"typeName": {
																					"id": 451,
																					"name": "bytes32",
																					"nodeType": "ElementaryTypeName",
																					"src": "3450:7:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 457,
																		"initialValue": {
																			"baseExpression": {
																				"expression": {
																					"id": 453,
																					"name": "set",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 417,
																					"src": "3470:3:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
																						"typeString": "struct EnumerableSet.Set storage pointer"
																					}
																				},
																				"id": 454,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "_values",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 366,
																				"src": "3470:11:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																					"typeString": "bytes32[] storage ref"
																				}
																			},
																			"id": 456,
																			"indexExpression": {
																				"id": 455,
																				"name": "lastIndex",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 441,
																				"src": "3482:9:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "3470:22:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"nodeType": "VariableDeclarationStatement",
																		"src": "3450:42:5"
																	},
																	{
																		"expression": {
																			"id": 464,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"expression": {
																						"id": 458,
																						"name": "set",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 417,
																						"src": "3592:3:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
																							"typeString": "struct EnumerableSet.Set storage pointer"
																						}
																					},
																					"id": 461,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "_values",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 366,
																					"src": "3592:11:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																						"typeString": "bytes32[] storage ref"
																					}
																				},
																				"id": 462,
																				"indexExpression": {
																					"id": 460,
																					"name": "toDeleteIndex",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 435,
																					"src": "3604:13:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "3592:26:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 463,
																				"name": "lastValue",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 452,
																				"src": "3621:9:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"src": "3592:38:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"id": 465,
																		"nodeType": "ExpressionStatement",
																		"src": "3592:38:5"
																	},
																	{
																		"expression": {
																			"id": 472,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"expression": {
																						"id": 466,
																						"name": "set",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 417,
																						"src": "3704:3:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
																							"typeString": "struct EnumerableSet.Set storage pointer"
																						}
																					},
																					"id": 469,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "_indexes",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 370,
																					"src": "3704:12:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																						"typeString": "mapping(bytes32 => uint256)"
																					}
																				},
																				"id": 470,
																				"indexExpression": {
																					"id": 468,
																					"name": "lastValue",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 452,
																					"src": "3717:9:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "3704:23:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 471,
																				"name": "valueIndex",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 425,
																				"src": "3730:10:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3704:36:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 473,
																		"nodeType": "ExpressionStatement",
																		"src": "3704:36:5"
																	}
																]
															}
														},
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"expression": {
																			"id": 476,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 417,
																			"src": "3876:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 479,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 366,
																		"src": "3876:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 480,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "pop",
																	"nodeType": "MemberAccess",
																	"src": "3876:15:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_arraypop_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$",
																		"typeString": "function (bytes32[] storage pointer)"
																	}
																},
																"id": 481,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3876:17:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 482,
															"nodeType": "ExpressionStatement",
															"src": "3876:17:5"
														},
														{
															"expression": {
																"id": 487,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "delete",
																"prefix": true,
																"src": "3961:26:5",
																"subExpression": {
																	"baseExpression": {
																		"expression": {
																			"id": 483,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 417,
																			"src": "3968:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 484,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_indexes",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 370,
																		"src": "3968:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																			"typeString": "mapping(bytes32 => uint256)"
																		}
																	},
																	"id": 486,
																	"indexExpression": {
																		"id": 485,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 419,
																		"src": "3981:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "3968:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 488,
															"nodeType": "ExpressionStatement",
															"src": "3961:26:5"
														},
														{
															"expression": {
																"hexValue": "74727565",
																"id": 489,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4009:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 423,
															"id": 490,
															"nodeType": "Return",
															"src": "4002:11:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 414,
										"nodeType": "StructuredDocumentation",
										"src": "2523:157:5",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 497,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_remove",
									"nameLocation": "2694:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 420,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "2714:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "2702:15:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 416,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 415,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 371,
														"src": "2702:3:5"
													},
													"referencedDeclaration": 371,
													"src": "2702:3:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 419,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2727:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "2719:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 418,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2701:32:5"
									},
									"returnParameters": {
										"id": 423,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 422,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "2751:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 421,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2751:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2750:6:5"
									},
									"scope": 959,
									"src": "2685:1388:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 515,
										"nodeType": "Block",
										"src": "4233:48:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 513,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"expression": {
																"id": 508,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 501,
																"src": "4250:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
																	"typeString": "struct EnumerableSet.Set storage pointer"
																}
															},
															"id": 509,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_indexes",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 370,
															"src": "4250:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																"typeString": "mapping(bytes32 => uint256)"
															}
														},
														"id": 511,
														"indexExpression": {
															"id": 510,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 503,
															"src": "4263:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4250:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 512,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4273:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4250:24:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 507,
												"id": 514,
												"nodeType": "Return",
												"src": "4243:31:5"
											}
										]
									},
									"documentation": {
										"id": 498,
										"nodeType": "StructuredDocumentation",
										"src": "4079:70:5",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 516,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contains",
									"nameLocation": "4163:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 501,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "4185:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "4173:15:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 500,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 499,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 371,
														"src": "4173:3:5"
													},
													"referencedDeclaration": 371,
													"src": "4173:3:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 503,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4198:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "4190:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 502,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4190:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4172:32:5"
									},
									"returnParameters": {
										"id": 507,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 506,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "4227:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 505,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4227:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4226:6:5"
									},
									"scope": 959,
									"src": "4154:127:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 529,
										"nodeType": "Block",
										"src": "4427:42:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"expression": {
															"id": 525,
															"name": "set",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 520,
															"src": "4444:3:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
																"typeString": "struct EnumerableSet.Set storage pointer"
															}
														},
														"id": 526,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_values",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 366,
														"src": "4444:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
															"typeString": "bytes32[] storage ref"
														}
													},
													"id": 527,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "4444:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 524,
												"id": 528,
												"nodeType": "Return",
												"src": "4437:25:5"
											}
										]
									},
									"documentation": {
										"id": 517,
										"nodeType": "StructuredDocumentation",
										"src": "4287:70:5",
										"text": " @dev Returns the number of values on the set. O(1)."
									},
									"id": 530,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_length",
									"nameLocation": "4371:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 521,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 520,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "4391:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 530,
												"src": "4379:15:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 519,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 518,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 371,
														"src": "4379:3:5"
													},
													"referencedDeclaration": 371,
													"src": "4379:3:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4378:17:5"
									},
									"returnParameters": {
										"id": 524,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 523,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 530,
												"src": "4418:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 522,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4418:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4417:9:5"
									},
									"scope": 959,
									"src": "4362:107:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 546,
										"nodeType": "Block",
										"src": "4887:42:5",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"expression": {
															"id": 541,
															"name": "set",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 534,
															"src": "4904:3:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
																"typeString": "struct EnumerableSet.Set storage pointer"
															}
														},
														"id": 542,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_values",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 366,
														"src": "4904:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
															"typeString": "bytes32[] storage ref"
														}
													},
													"id": 544,
													"indexExpression": {
														"id": 543,
														"name": "index",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 536,
														"src": "4916:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4904:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 540,
												"id": 545,
												"nodeType": "Return",
												"src": "4897:25:5"
											}
										]
									},
									"documentation": {
										"id": 531,
										"nodeType": "StructuredDocumentation",
										"src": "4475:331:5",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 547,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_at",
									"nameLocation": "4820:3:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 537,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 534,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "4836:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 547,
												"src": "4824:15:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 533,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 532,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 371,
														"src": "4824:3:5"
													},
													"referencedDeclaration": 371,
													"src": "4824:3:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 536,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "4849:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 547,
												"src": "4841:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 535,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4841:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4823:32:5"
									},
									"returnParameters": {
										"id": 540,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 539,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 547,
												"src": "4878:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 538,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4878:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4877:9:5"
									},
									"scope": 959,
									"src": "4811:118:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 560,
										"nodeType": "Block",
										"src": "5543:35:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 557,
														"name": "set",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 551,
														"src": "5560:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
															"typeString": "struct EnumerableSet.Set storage pointer"
														}
													},
													"id": 558,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "_values",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 366,
													"src": "5560:11:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
														"typeString": "bytes32[] storage ref"
													}
												},
												"functionReturnParameters": 556,
												"id": 559,
												"nodeType": "Return",
												"src": "5553:18:5"
											}
										]
									},
									"documentation": {
										"id": 548,
										"nodeType": "StructuredDocumentation",
										"src": "4935:529:5",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 561,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_values",
									"nameLocation": "5478:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 552,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 551,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "5498:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 561,
												"src": "5486:15:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 550,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 549,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 371,
														"src": "5486:3:5"
													},
													"referencedDeclaration": 371,
													"src": "5486:3:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5485:17:5"
									},
									"returnParameters": {
										"id": 556,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 555,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 561,
												"src": "5525:16:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 553,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "5525:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 554,
													"nodeType": "ArrayTypeName",
													"src": "5525:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5524:18:5"
									},
									"scope": 959,
									"src": "5469:109:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"canonicalName": "EnumerableSet.Bytes32Set",
									"id": 565,
									"members": [
										{
											"constant": false,
											"id": 564,
											"mutability": "mutable",
											"name": "_inner",
											"nameLocation": "5635:6:5",
											"nodeType": "VariableDeclaration",
											"scope": 565,
											"src": "5631:10:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
												"typeString": "struct EnumerableSet.Set"
											},
											"typeName": {
												"id": 563,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 562,
													"name": "Set",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 371,
													"src": "5631:3:5"
												},
												"referencedDeclaration": 371,
												"src": "5631:3:5",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Bytes32Set",
									"nameLocation": "5610:10:5",
									"nodeType": "StructDefinition",
									"scope": 959,
									"src": "5603:45:5",
									"visibility": "public"
								},
								{
									"body": {
										"id": 582,
										"nodeType": "Block",
										"src": "5894:47:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 577,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 569,
																"src": "5916:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$565_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 578,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 564,
															"src": "5916:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 579,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 571,
															"src": "5928:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 576,
														"name": "_add",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 413,
														"src": "5911:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$371_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 580,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5911:23:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 575,
												"id": 581,
												"nodeType": "Return",
												"src": "5904:30:5"
											}
										]
									},
									"documentation": {
										"id": 566,
										"nodeType": "StructuredDocumentation",
										"src": "5654:159:5",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 583,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "5827:3:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 572,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 569,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "5850:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "5831:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$565_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 568,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 567,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 565,
														"src": "5831:10:5"
													},
													"referencedDeclaration": 565,
													"src": "5831:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$565_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 571,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5863:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "5855:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 570,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5855:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5830:39:5"
									},
									"returnParameters": {
										"id": 575,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 574,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "5888:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 573,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5888:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5887:6:5"
									},
									"scope": 959,
									"src": "5818:123:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 600,
										"nodeType": "Block",
										"src": "6188:50:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 595,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 587,
																"src": "6213:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$565_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 596,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 564,
															"src": "6213:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 597,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 589,
															"src": "6225:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 594,
														"name": "_remove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 497,
														"src": "6205:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$371_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 598,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6205:26:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 593,
												"id": 599,
												"nodeType": "Return",
												"src": "6198:33:5"
											}
										]
									},
									"documentation": {
										"id": 584,
										"nodeType": "StructuredDocumentation",
										"src": "5947:157:5",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 601,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "remove",
									"nameLocation": "6118:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 590,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 587,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "6144:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 601,
												"src": "6125:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$565_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 586,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 585,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 565,
														"src": "6125:10:5"
													},
													"referencedDeclaration": 565,
													"src": "6125:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$565_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 589,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6157:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 601,
												"src": "6149:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 588,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6149:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6124:39:5"
									},
									"returnParameters": {
										"id": 593,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 592,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 601,
												"src": "6182:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 591,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6182:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6181:6:5"
									},
									"scope": 959,
									"src": "6109:129:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 618,
										"nodeType": "Block",
										"src": "6405:52:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 613,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 605,
																"src": "6432:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$565_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 614,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 564,
															"src": "6432:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 615,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 607,
															"src": "6444:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 612,
														"name": "_contains",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 516,
														"src": "6422:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$371_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
														}
													},
													"id": 616,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6422:28:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 611,
												"id": 617,
												"nodeType": "Return",
												"src": "6415:35:5"
											}
										]
									},
									"documentation": {
										"id": 602,
										"nodeType": "StructuredDocumentation",
										"src": "6244:70:5",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 619,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "contains",
									"nameLocation": "6328:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 608,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 605,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "6356:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 619,
												"src": "6337:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$565_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 604,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 603,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 565,
														"src": "6337:10:5"
													},
													"referencedDeclaration": 565,
													"src": "6337:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$565_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 607,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6369:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 619,
												"src": "6361:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 606,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6361:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6336:39:5"
									},
									"returnParameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 610,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 619,
												"src": "6399:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 609,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6399:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6398:6:5"
									},
									"scope": 959,
									"src": "6319:138:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 633,
										"nodeType": "Block",
										"src": "6610:43:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 629,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 623,
																"src": "6635:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$565_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 630,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 564,
															"src": "6635:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 628,
														"name": "_length",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 530,
														"src": "6627:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$371_storage_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (uint256)"
														}
													},
													"id": 631,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6627:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 627,
												"id": 632,
												"nodeType": "Return",
												"src": "6620:26:5"
											}
										]
									},
									"documentation": {
										"id": 620,
										"nodeType": "StructuredDocumentation",
										"src": "6463:70:5",
										"text": " @dev Returns the number of values in the set. O(1)."
									},
									"id": 634,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "length",
									"nameLocation": "6547:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 624,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 623,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "6573:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 634,
												"src": "6554:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$565_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 622,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 621,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 565,
														"src": "6554:10:5"
													},
													"referencedDeclaration": 565,
													"src": "6554:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$565_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6553:24:5"
									},
									"returnParameters": {
										"id": 627,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 626,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 634,
												"src": "6601:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 625,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6601:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6600:9:5"
									},
									"scope": 959,
									"src": "6538:115:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 651,
										"nodeType": "Block",
										"src": "7078:46:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 646,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 638,
																"src": "7099:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$565_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 647,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 564,
															"src": "7099:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 648,
															"name": "index",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 640,
															"src": "7111:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 645,
														"name": "_at",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 547,
														"src": "7095:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$371_storage_ptr_$_t_uint256_$returns$_t_bytes32_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"
														}
													},
													"id": 649,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7095:22:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 644,
												"id": 650,
												"nodeType": "Return",
												"src": "7088:29:5"
											}
										]
									},
									"documentation": {
										"id": 635,
										"nodeType": "StructuredDocumentation",
										"src": "6659:331:5",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 652,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "at",
									"nameLocation": "7004:2:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 641,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 638,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "7026:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 652,
												"src": "7007:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$565_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 637,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 636,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 565,
														"src": "7007:10:5"
													},
													"referencedDeclaration": 565,
													"src": "7007:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$565_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 640,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "7039:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 652,
												"src": "7031:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 639,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7031:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7006:39:5"
									},
									"returnParameters": {
										"id": 644,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 643,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 652,
												"src": "7069:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 642,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7069:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7068:9:5"
									},
									"scope": 959,
									"src": "6995:129:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 667,
										"nodeType": "Block",
										"src": "7745:43:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 663,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 656,
																"src": "7770:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$565_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 664,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 564,
															"src": "7770:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 662,
														"name": "_values",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 561,
														"src": "7762:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$371_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"
														}
													},
													"id": 665,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7762:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"functionReturnParameters": 661,
												"id": 666,
												"nodeType": "Return",
												"src": "7755:26:5"
											}
										]
									},
									"documentation": {
										"id": 653,
										"nodeType": "StructuredDocumentation",
										"src": "7130:529:5",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 668,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "values",
									"nameLocation": "7673:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 657,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 656,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "7699:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 668,
												"src": "7680:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$565_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 655,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 654,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 565,
														"src": "7680:10:5"
													},
													"referencedDeclaration": 565,
													"src": "7680:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$565_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7679:24:5"
									},
									"returnParameters": {
										"id": 661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 668,
												"src": "7727:16:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 658,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "7727:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 659,
													"nodeType": "ArrayTypeName",
													"src": "7727:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7726:18:5"
									},
									"scope": 959,
									"src": "7664:124:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"canonicalName": "EnumerableSet.AddressSet",
									"id": 672,
									"members": [
										{
											"constant": false,
											"id": 671,
											"mutability": "mutable",
											"name": "_inner",
											"nameLocation": "7845:6:5",
											"nodeType": "VariableDeclaration",
											"scope": 672,
											"src": "7841:10:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
												"typeString": "struct EnumerableSet.Set"
											},
											"typeName": {
												"id": 670,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 669,
													"name": "Set",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 371,
													"src": "7841:3:5"
												},
												"referencedDeclaration": 371,
												"src": "7841:3:5",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AddressSet",
									"nameLocation": "7820:10:5",
									"nodeType": "StructDefinition",
									"scope": 959,
									"src": "7813:45:5",
									"visibility": "public"
								},
								{
									"body": {
										"id": 698,
										"nodeType": "Block",
										"src": "8104:74:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 684,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 676,
																"src": "8126:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$672_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 685,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 671,
															"src": "8126:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 692,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 678,
																					"src": "8162:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 691,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8154:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 690,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "8154:7:5",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 693,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8154:14:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		],
																		"id": 689,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8146:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 688,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "8146:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 694,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8146:23:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 687,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8138:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 686,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "8138:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 695,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8138:32:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 683,
														"name": "_add",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 413,
														"src": "8121:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$371_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 696,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8121:50:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 682,
												"id": 697,
												"nodeType": "Return",
												"src": "8114:57:5"
											}
										]
									},
									"documentation": {
										"id": 673,
										"nodeType": "StructuredDocumentation",
										"src": "7864:159:5",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 699,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "8037:3:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 679,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 676,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "8060:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 699,
												"src": "8041:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$672_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 675,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 674,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 672,
														"src": "8041:10:5"
													},
													"referencedDeclaration": 672,
													"src": "8041:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$672_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 678,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8073:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 699,
												"src": "8065:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 677,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8065:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8040:39:5"
									},
									"returnParameters": {
										"id": 682,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 681,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 699,
												"src": "8098:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 680,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8098:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8097:6:5"
									},
									"scope": 959,
									"src": "8028:150:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 725,
										"nodeType": "Block",
										"src": "8425:77:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 711,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 703,
																"src": "8450:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$672_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 712,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 671,
															"src": "8450:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 719,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 705,
																					"src": "8486:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 718,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8478:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 717,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "8478:7:5",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 720,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8478:14:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		],
																		"id": 716,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8470:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 715,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "8470:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 721,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8470:23:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 714,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8462:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 713,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "8462:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 722,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8462:32:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 710,
														"name": "_remove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 497,
														"src": "8442:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$371_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 723,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8442:53:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 709,
												"id": 724,
												"nodeType": "Return",
												"src": "8435:60:5"
											}
										]
									},
									"documentation": {
										"id": 700,
										"nodeType": "StructuredDocumentation",
										"src": "8184:157:5",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 726,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "remove",
									"nameLocation": "8355:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 706,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 703,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "8381:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 726,
												"src": "8362:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$672_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 702,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 701,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 672,
														"src": "8362:10:5"
													},
													"referencedDeclaration": 672,
													"src": "8362:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$672_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 705,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8394:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 726,
												"src": "8386:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 704,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8386:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8361:39:5"
									},
									"returnParameters": {
										"id": 709,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 708,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 726,
												"src": "8419:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 707,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8419:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8418:6:5"
									},
									"scope": 959,
									"src": "8346:156:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 752,
										"nodeType": "Block",
										"src": "8669:79:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 738,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 730,
																"src": "8696:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$672_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 739,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 671,
															"src": "8696:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 746,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 732,
																					"src": "8732:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 745,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8724:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 744,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "8724:7:5",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 747,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8724:14:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		],
																		"id": 743,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8716:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 742,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "8716:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 748,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8716:23:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 741,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8708:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 740,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "8708:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 749,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8708:32:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 737,
														"name": "_contains",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 516,
														"src": "8686:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$371_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
														}
													},
													"id": 750,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8686:55:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 736,
												"id": 751,
												"nodeType": "Return",
												"src": "8679:62:5"
											}
										]
									},
									"documentation": {
										"id": 727,
										"nodeType": "StructuredDocumentation",
										"src": "8508:70:5",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 753,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "contains",
									"nameLocation": "8592:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 733,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 730,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "8620:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "8601:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$672_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 729,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 728,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 672,
														"src": "8601:10:5"
													},
													"referencedDeclaration": 672,
													"src": "8601:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$672_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 732,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8633:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "8625:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 731,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8625:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8600:39:5"
									},
									"returnParameters": {
										"id": 736,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 735,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "8663:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 734,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8663:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8662:6:5"
									},
									"scope": 959,
									"src": "8583:165:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 767,
										"nodeType": "Block",
										"src": "8901:43:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 763,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 757,
																"src": "8926:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$672_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 764,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 671,
															"src": "8926:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 762,
														"name": "_length",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 530,
														"src": "8918:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$371_storage_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (uint256)"
														}
													},
													"id": 765,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8918:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 761,
												"id": 766,
												"nodeType": "Return",
												"src": "8911:26:5"
											}
										]
									},
									"documentation": {
										"id": 754,
										"nodeType": "StructuredDocumentation",
										"src": "8754:70:5",
										"text": " @dev Returns the number of values in the set. O(1)."
									},
									"id": 768,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "length",
									"nameLocation": "8838:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 758,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 757,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "8864:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 768,
												"src": "8845:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$672_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 756,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 755,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 672,
														"src": "8845:10:5"
													},
													"referencedDeclaration": 672,
													"src": "8845:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$672_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8844:24:5"
									},
									"returnParameters": {
										"id": 761,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 760,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 768,
												"src": "8892:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 759,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8892:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8891:9:5"
									},
									"scope": 959,
									"src": "8829:115:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 794,
										"nodeType": "Block",
										"src": "9369:73:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"expression": {
																						"id": 786,
																						"name": "set",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 772,
																						"src": "9414:3:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_AddressSet_$672_storage_ptr",
																							"typeString": "struct EnumerableSet.AddressSet storage pointer"
																						}
																					},
																					"id": 787,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "_inner",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 671,
																					"src": "9414:10:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Set_$371_storage",
																						"typeString": "struct EnumerableSet.Set storage ref"
																					}
																				},
																				{
																					"id": 788,
																					"name": "index",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 774,
																					"src": "9426:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_struct$_Set_$371_storage",
																						"typeString": "struct EnumerableSet.Set storage ref"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 785,
																				"name": "_at",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 547,
																				"src": "9410:3:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$371_storage_ptr_$_t_uint256_$returns$_t_bytes32_$",
																					"typeString": "function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"
																				}
																			},
																			"id": 789,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "9410:22:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 784,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "9402:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 783,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "9402:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 790,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9402:31:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 782,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9394:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint160_$",
																	"typeString": "type(uint160)"
																},
																"typeName": {
																	"id": 781,
																	"name": "uint160",
																	"nodeType": "ElementaryTypeName",
																	"src": "9394:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 791,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9394:40:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														],
														"id": 780,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "9386:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_$",
															"typeString": "type(address)"
														},
														"typeName": {
															"id": 779,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "9386:7:5",
															"typeDescriptions": {}
														}
													},
													"id": 792,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9386:49:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 778,
												"id": 793,
												"nodeType": "Return",
												"src": "9379:56:5"
											}
										]
									},
									"documentation": {
										"id": 769,
										"nodeType": "StructuredDocumentation",
										"src": "8950:331:5",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 795,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "at",
									"nameLocation": "9295:2:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 775,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 772,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "9317:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 795,
												"src": "9298:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$672_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 771,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 770,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 672,
														"src": "9298:10:5"
													},
													"referencedDeclaration": 672,
													"src": "9298:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$672_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 774,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "9330:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 795,
												"src": "9322:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 773,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9322:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9297:39:5"
									},
									"returnParameters": {
										"id": 778,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 777,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 795,
												"src": "9360:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 776,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9360:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9359:9:5"
									},
									"scope": 959,
									"src": "9286:156:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 824,
										"nodeType": "Block",
										"src": "10063:219:5",
										"statements": [
											{
												"assignments": [
													809
												],
												"declarations": [
													{
														"constant": false,
														"id": 809,
														"mutability": "mutable",
														"name": "store",
														"nameLocation": "10090:5:5",
														"nodeType": "VariableDeclaration",
														"scope": 824,
														"src": "10073:22:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 807,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "10073:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 808,
															"nodeType": "ArrayTypeName",
															"src": "10073:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 814,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 811,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 799,
																"src": "10106:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$672_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 812,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 671,
															"src": "10106:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 810,
														"name": "_values",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 561,
														"src": "10098:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$371_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"
														}
													},
													"id": 813,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10098:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10073:44:5"
											},
											{
												"assignments": [
													819
												],
												"declarations": [
													{
														"constant": false,
														"id": 819,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "10144:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 824,
														"src": "10127:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[]"
														},
														"typeName": {
															"baseType": {
																"id": 817,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10127:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 818,
															"nodeType": "ArrayTypeName",
															"src": "10127:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
																"typeString": "address[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 820,
												"nodeType": "VariableDeclarationStatement",
												"src": "10127:23:5"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "10213:39:5",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10227:15:5",
															"value": {
																"name": "store",
																"nodeType": "YulIdentifier",
																"src": "10237:5:5"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "10227:6:5"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "byzantium",
												"externalReferences": [
													{
														"declaration": 819,
														"isOffset": false,
														"isSlot": false,
														"src": "10227:6:5",
														"valueSize": 1
													},
													{
														"declaration": 809,
														"isOffset": false,
														"isSlot": false,
														"src": "10237:5:5",
														"valueSize": 1
													}
												],
												"id": 821,
												"nodeType": "InlineAssembly",
												"src": "10204:48:5"
											},
											{
												"expression": {
													"id": 822,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 819,
													"src": "10269:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
														"typeString": "address[] memory"
													}
												},
												"functionReturnParameters": 804,
												"id": 823,
												"nodeType": "Return",
												"src": "10262:13:5"
											}
										]
									},
									"documentation": {
										"id": 796,
										"nodeType": "StructuredDocumentation",
										"src": "9448:529:5",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 825,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "values",
									"nameLocation": "9991:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 800,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 799,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "10017:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 825,
												"src": "9998:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$672_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 798,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 797,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 672,
														"src": "9998:10:5"
													},
													"referencedDeclaration": 672,
													"src": "9998:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$672_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9997:24:5"
									},
									"returnParameters": {
										"id": 804,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 803,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 825,
												"src": "10045:16:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 801,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "10045:7:5",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 802,
													"nodeType": "ArrayTypeName",
													"src": "10045:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10044:18:5"
									},
									"scope": 959,
									"src": "9982:300:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"canonicalName": "EnumerableSet.UintSet",
									"id": 829,
									"members": [
										{
											"constant": false,
											"id": 828,
											"mutability": "mutable",
											"name": "_inner",
											"nameLocation": "10333:6:5",
											"nodeType": "VariableDeclaration",
											"scope": 829,
											"src": "10329:10:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
												"typeString": "struct EnumerableSet.Set"
											},
											"typeName": {
												"id": 827,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 826,
													"name": "Set",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 371,
													"src": "10329:3:5"
												},
												"referencedDeclaration": 371,
												"src": "10329:3:5",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$371_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "UintSet",
									"nameLocation": "10311:7:5",
									"nodeType": "StructDefinition",
									"scope": 959,
									"src": "10304:42:5",
									"visibility": "public"
								},
								{
									"body": {
										"id": 849,
										"nodeType": "Block",
										"src": "10589:56:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 841,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 833,
																"src": "10611:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$829_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 842,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 828,
															"src": "10611:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"id": 845,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 835,
																	"src": "10631:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 844,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10623:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 843,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "10623:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 846,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10623:14:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 840,
														"name": "_add",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 413,
														"src": "10606:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$371_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 847,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10606:32:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 839,
												"id": 848,
												"nodeType": "Return",
												"src": "10599:39:5"
											}
										]
									},
									"documentation": {
										"id": 830,
										"nodeType": "StructuredDocumentation",
										"src": "10352:159:5",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 850,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "10525:3:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 836,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 833,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "10545:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 850,
												"src": "10529:19:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$829_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 832,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 831,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 829,
														"src": "10529:7:5"
													},
													"referencedDeclaration": 829,
													"src": "10529:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$829_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 835,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10558:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 850,
												"src": "10550:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 834,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10550:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10528:36:5"
									},
									"returnParameters": {
										"id": 839,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 838,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 850,
												"src": "10583:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 837,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10583:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10582:6:5"
									},
									"scope": 959,
									"src": "10516:129:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 870,
										"nodeType": "Block",
										"src": "10889:59:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 862,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 854,
																"src": "10914:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$829_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 863,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 828,
															"src": "10914:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"id": 866,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 856,
																	"src": "10934:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 865,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10926:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 864,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "10926:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 867,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10926:14:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 861,
														"name": "_remove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 497,
														"src": "10906:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$371_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 868,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10906:35:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 860,
												"id": 869,
												"nodeType": "Return",
												"src": "10899:42:5"
											}
										]
									},
									"documentation": {
										"id": 851,
										"nodeType": "StructuredDocumentation",
										"src": "10651:157:5",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 871,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "remove",
									"nameLocation": "10822:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 857,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 854,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "10845:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 871,
												"src": "10829:19:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$829_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 853,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 852,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 829,
														"src": "10829:7:5"
													},
													"referencedDeclaration": 829,
													"src": "10829:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$829_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 856,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10858:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 871,
												"src": "10850:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 855,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10850:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10828:36:5"
									},
									"returnParameters": {
										"id": 860,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 859,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 871,
												"src": "10883:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 858,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10883:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10882:6:5"
									},
									"scope": 959,
									"src": "10813:135:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 891,
										"nodeType": "Block",
										"src": "11112:61:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 883,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 875,
																"src": "11139:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$829_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 884,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 828,
															"src": "11139:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"id": 887,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 877,
																	"src": "11159:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 886,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11151:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 885,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "11151:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 888,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11151:14:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 882,
														"name": "_contains",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 516,
														"src": "11129:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$371_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
														}
													},
													"id": 889,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11129:37:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 881,
												"id": 890,
												"nodeType": "Return",
												"src": "11122:44:5"
											}
										]
									},
									"documentation": {
										"id": 872,
										"nodeType": "StructuredDocumentation",
										"src": "10954:70:5",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 892,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "contains",
									"nameLocation": "11038:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 878,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 875,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "11063:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 892,
												"src": "11047:19:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$829_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 874,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 873,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 829,
														"src": "11047:7:5"
													},
													"referencedDeclaration": 829,
													"src": "11047:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$829_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 877,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11076:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 892,
												"src": "11068:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 876,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11068:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11046:36:5"
									},
									"returnParameters": {
										"id": 881,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 880,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 892,
												"src": "11106:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 879,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11106:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11105:6:5"
									},
									"scope": 959,
									"src": "11029:144:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 906,
										"nodeType": "Block",
										"src": "11323:43:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 902,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 896,
																"src": "11348:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$829_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 903,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 828,
															"src": "11348:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 901,
														"name": "_length",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 530,
														"src": "11340:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$371_storage_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (uint256)"
														}
													},
													"id": 904,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11340:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 900,
												"id": 905,
												"nodeType": "Return",
												"src": "11333:26:5"
											}
										]
									},
									"documentation": {
										"id": 893,
										"nodeType": "StructuredDocumentation",
										"src": "11179:70:5",
										"text": " @dev Returns the number of values on the set. O(1)."
									},
									"id": 907,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "length",
									"nameLocation": "11263:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 897,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 896,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "11286:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 907,
												"src": "11270:19:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$829_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 895,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 894,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 829,
														"src": "11270:7:5"
													},
													"referencedDeclaration": 829,
													"src": "11270:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$829_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11269:21:5"
									},
									"returnParameters": {
										"id": 900,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 899,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 907,
												"src": "11314:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 898,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11314:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11313:9:5"
									},
									"scope": 959,
									"src": "11254:112:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 927,
										"nodeType": "Block",
										"src": "11788:55:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 921,
																		"name": "set",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 911,
																		"src": "11817:3:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_UintSet_$829_storage_ptr",
																			"typeString": "struct EnumerableSet.UintSet storage pointer"
																		}
																	},
																	"id": 922,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "_inner",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 828,
																	"src": "11817:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Set_$371_storage",
																		"typeString": "struct EnumerableSet.Set storage ref"
																	}
																},
																{
																	"id": 923,
																	"name": "index",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 913,
																	"src": "11829:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_struct$_Set_$371_storage",
																		"typeString": "struct EnumerableSet.Set storage ref"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 920,
																"name": "_at",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 547,
																"src": "11813:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$371_storage_ptr_$_t_uint256_$returns$_t_bytes32_$",
																	"typeString": "function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"
																}
															},
															"id": 924,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11813:22:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 919,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "11805:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 918,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11805:7:5",
															"typeDescriptions": {}
														}
													},
													"id": 925,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11805:31:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 917,
												"id": 926,
												"nodeType": "Return",
												"src": "11798:38:5"
											}
										]
									},
									"documentation": {
										"id": 908,
										"nodeType": "StructuredDocumentation",
										"src": "11372:331:5",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 928,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "at",
									"nameLocation": "11717:2:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 914,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 911,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "11736:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "11720:19:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$829_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 910,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 909,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 829,
														"src": "11720:7:5"
													},
													"referencedDeclaration": 829,
													"src": "11720:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$829_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 913,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "11749:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "11741:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 912,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11741:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11719:36:5"
									},
									"returnParameters": {
										"id": 917,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 916,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "11779:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 915,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11779:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11778:9:5"
									},
									"scope": 959,
									"src": "11708:135:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 957,
										"nodeType": "Block",
										"src": "12461:219:5",
										"statements": [
											{
												"assignments": [
													942
												],
												"declarations": [
													{
														"constant": false,
														"id": 942,
														"mutability": "mutable",
														"name": "store",
														"nameLocation": "12488:5:5",
														"nodeType": "VariableDeclaration",
														"scope": 957,
														"src": "12471:22:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 940,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "12471:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 941,
															"nodeType": "ArrayTypeName",
															"src": "12471:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 947,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 944,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 932,
																"src": "12504:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$829_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 945,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 828,
															"src": "12504:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$371_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 943,
														"name": "_values",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 561,
														"src": "12496:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$371_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"
														}
													},
													"id": 946,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12496:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12471:44:5"
											},
											{
												"assignments": [
													952
												],
												"declarations": [
													{
														"constant": false,
														"id": 952,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "12542:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 957,
														"src": "12525:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
															"typeString": "uint256[]"
														},
														"typeName": {
															"baseType": {
																"id": 950,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "12525:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 951,
															"nodeType": "ArrayTypeName",
															"src": "12525:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																"typeString": "uint256[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 953,
												"nodeType": "VariableDeclarationStatement",
												"src": "12525:23:5"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "12611:39:5",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12625:15:5",
															"value": {
																"name": "store",
																"nodeType": "YulIdentifier",
																"src": "12635:5:5"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "12625:6:5"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "byzantium",
												"externalReferences": [
													{
														"declaration": 952,
														"isOffset": false,
														"isSlot": false,
														"src": "12625:6:5",
														"valueSize": 1
													},
													{
														"declaration": 942,
														"isOffset": false,
														"isSlot": false,
														"src": "12635:5:5",
														"valueSize": 1
													}
												],
												"id": 954,
												"nodeType": "InlineAssembly",
												"src": "12602:48:5"
											},
											{
												"expression": {
													"id": 955,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 952,
													"src": "12667:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
														"typeString": "uint256[] memory"
													}
												},
												"functionReturnParameters": 937,
												"id": 956,
												"nodeType": "Return",
												"src": "12660:13:5"
											}
										]
									},
									"documentation": {
										"id": 929,
										"nodeType": "StructuredDocumentation",
										"src": "11849:529:5",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 958,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "values",
									"nameLocation": "12392:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 933,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 932,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "12415:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "12399:19:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$829_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 931,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 930,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 829,
														"src": "12399:7:5"
													},
													"referencedDeclaration": 829,
													"src": "12399:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$829_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12398:21:5"
									},
									"returnParameters": {
										"id": 937,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 936,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "12443:16:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 934,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "12443:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 935,
													"nodeType": "ArrayTypeName",
													"src": "12443:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12442:18:5"
									},
									"scope": 959,
									"src": "12383:297:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 960,
							"src": "1228:11454:5",
							"usedErrors": []
						}
					],
					"src": "115:12568:5"
				},
				"id": 5
			},
			"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
					"exportedSymbols": {
						"IUniswapV3SwapCallback": [
							973
						]
					},
					"id": 974,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 961,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 962,
								"nodeType": "StructuredDocumentation",
								"src": "71:144:6",
								"text": "@title Callback for IUniswapV3PoolActions#swap\n @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface"
							},
							"fullyImplemented": false,
							"id": 973,
							"linearizedBaseContracts": [
								973
							],
							"name": "IUniswapV3SwapCallback",
							"nameLocation": "225:22:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 963,
										"nodeType": "StructuredDocumentation",
										"src": "254:898:6",
										"text": "@notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n @dev In the implementation you must pay the pool tokens owed for the swap.\n The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
									},
									"functionSelector": "fa461e33",
									"id": 972,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "uniswapV3SwapCallback",
									"nameLocation": "1166:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 970,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 965,
												"mutability": "mutable",
												"name": "amount0Delta",
												"nameLocation": "1204:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 972,
												"src": "1197:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 964,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1197:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 967,
												"mutability": "mutable",
												"name": "amount1Delta",
												"nameLocation": "1233:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 972,
												"src": "1226:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 966,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1226:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 969,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1270:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 972,
												"src": "1255:19:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 968,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1255:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1187:93:6"
									},
									"returnParameters": {
										"id": 971,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1289:0:6"
									},
									"scope": 973,
									"src": "1157:133:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 974,
							"src": "215:1077:6",
							"usedErrors": []
						}
					],
					"src": "45:1248:6"
				},
				"id": 6
			},
			"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol",
					"exportedSymbols": {
						"ISwapRouter": [
							1073
						],
						"IUniswapV3SwapCallback": [
							973
						]
					},
					"id": 1074,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 975,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:7"
						},
						{
							"id": 976,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "70:19:7"
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
							"file": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
							"id": 977,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1074,
							"sourceUnit": 974,
							"src": "91:83:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 979,
										"name": "IUniswapV3SwapCallback",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 973,
										"src": "305:22:7"
									},
									"id": 980,
									"nodeType": "InheritanceSpecifier",
									"src": "305:22:7"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 978,
								"nodeType": "StructuredDocumentation",
								"src": "176:104:7",
								"text": "@title Router token swapping functionality\n @notice Functions for swapping tokens via Uniswap V3"
							},
							"fullyImplemented": false,
							"id": 1073,
							"linearizedBaseContracts": [
								1073,
								973
							],
							"name": "ISwapRouter",
							"nameLocation": "290:11:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ISwapRouter.ExactInputSingleParams",
									"id": 997,
									"members": [
										{
											"constant": false,
											"id": 982,
											"mutability": "mutable",
											"name": "tokenIn",
											"nameLocation": "382:7:7",
											"nodeType": "VariableDeclaration",
											"scope": 997,
											"src": "374:15:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 981,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "374:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 984,
											"mutability": "mutable",
											"name": "tokenOut",
											"nameLocation": "407:8:7",
											"nodeType": "VariableDeclaration",
											"scope": 997,
											"src": "399:16:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 983,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "399:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 986,
											"mutability": "mutable",
											"name": "fee",
											"nameLocation": "432:3:7",
											"nodeType": "VariableDeclaration",
											"scope": 997,
											"src": "425:10:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 985,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "425:6:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 988,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "453:9:7",
											"nodeType": "VariableDeclaration",
											"scope": 997,
											"src": "445:17:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 987,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "445:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 990,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "480:8:7",
											"nodeType": "VariableDeclaration",
											"scope": 997,
											"src": "472:16:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 989,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "472:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 992,
											"mutability": "mutable",
											"name": "amountIn",
											"nameLocation": "506:8:7",
											"nodeType": "VariableDeclaration",
											"scope": 997,
											"src": "498:16:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 991,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "498:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 994,
											"mutability": "mutable",
											"name": "amountOutMinimum",
											"nameLocation": "532:16:7",
											"nodeType": "VariableDeclaration",
											"scope": 997,
											"src": "524:24:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 993,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "524:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 996,
											"mutability": "mutable",
											"name": "sqrtPriceLimitX96",
											"nameLocation": "566:17:7",
											"nodeType": "VariableDeclaration",
											"scope": 997,
											"src": "558:25:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 995,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "558:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactInputSingleParams",
									"nameLocation": "341:22:7",
									"nodeType": "StructDefinition",
									"scope": 1073,
									"src": "334:256:7",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 998,
										"nodeType": "StructuredDocumentation",
										"src": "596:250:7",
										"text": "@notice Swaps `amountIn` of one token for as much as possible of another token\n @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n @return amountOut The amount of the received token"
									},
									"functionSelector": "414bf389",
									"id": 1006,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactInputSingle",
									"nameLocation": "860:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1002,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1001,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "909:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1006,
												"src": "877:38:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactInputSingleParams_$997_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactInputSingleParams"
												},
												"typeName": {
													"id": 1000,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 999,
														"name": "ExactInputSingleParams",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 997,
														"src": "877:22:7"
													},
													"referencedDeclaration": 997,
													"src": "877:22:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactInputSingleParams_$997_storage_ptr",
														"typeString": "struct ISwapRouter.ExactInputSingleParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "876:40:7"
									},
									"returnParameters": {
										"id": 1005,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1004,
												"mutability": "mutable",
												"name": "amountOut",
												"nameLocation": "951:9:7",
												"nodeType": "VariableDeclaration",
												"scope": 1006,
												"src": "943:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1003,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "943:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "942:19:7"
									},
									"scope": 1073,
									"src": "851:111:7",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISwapRouter.ExactInputParams",
									"id": 1017,
									"members": [
										{
											"constant": false,
											"id": 1008,
											"mutability": "mutable",
											"name": "path",
											"nameLocation": "1008:4:7",
											"nodeType": "VariableDeclaration",
											"scope": 1017,
											"src": "1002:10:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 1007,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "1002:5:7",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1010,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "1030:9:7",
											"nodeType": "VariableDeclaration",
											"scope": 1017,
											"src": "1022:17:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1009,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1022:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1012,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "1057:8:7",
											"nodeType": "VariableDeclaration",
											"scope": 1017,
											"src": "1049:16:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1011,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1049:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1014,
											"mutability": "mutable",
											"name": "amountIn",
											"nameLocation": "1083:8:7",
											"nodeType": "VariableDeclaration",
											"scope": 1017,
											"src": "1075:16:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1013,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1075:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1016,
											"mutability": "mutable",
											"name": "amountOutMinimum",
											"nameLocation": "1109:16:7",
											"nodeType": "VariableDeclaration",
											"scope": 1017,
											"src": "1101:24:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1015,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1101:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactInputParams",
									"nameLocation": "975:16:7",
									"nodeType": "StructDefinition",
									"scope": 1073,
									"src": "968:164:7",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1018,
										"nodeType": "StructuredDocumentation",
										"src": "1138:273:7",
										"text": "@notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n @return amountOut The amount of the received token"
									},
									"functionSelector": "c04b8d59",
									"id": 1026,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactInput",
									"nameLocation": "1425:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1022,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1021,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "1462:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1026,
												"src": "1436:32:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactInputParams_$1017_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactInputParams"
												},
												"typeName": {
													"id": 1020,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1019,
														"name": "ExactInputParams",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1017,
														"src": "1436:16:7"
													},
													"referencedDeclaration": 1017,
													"src": "1436:16:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactInputParams_$1017_storage_ptr",
														"typeString": "struct ISwapRouter.ExactInputParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1435:34:7"
									},
									"returnParameters": {
										"id": 1025,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1024,
												"mutability": "mutable",
												"name": "amountOut",
												"nameLocation": "1504:9:7",
												"nodeType": "VariableDeclaration",
												"scope": 1026,
												"src": "1496:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1023,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1496:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1495:19:7"
									},
									"scope": 1073,
									"src": "1416:99:7",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISwapRouter.ExactOutputSingleParams",
									"id": 1043,
									"members": [
										{
											"constant": false,
											"id": 1028,
											"mutability": "mutable",
											"name": "tokenIn",
											"nameLocation": "1570:7:7",
											"nodeType": "VariableDeclaration",
											"scope": 1043,
											"src": "1562:15:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1027,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1562:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1030,
											"mutability": "mutable",
											"name": "tokenOut",
											"nameLocation": "1595:8:7",
											"nodeType": "VariableDeclaration",
											"scope": 1043,
											"src": "1587:16:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1029,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1587:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1032,
											"mutability": "mutable",
											"name": "fee",
											"nameLocation": "1620:3:7",
											"nodeType": "VariableDeclaration",
											"scope": 1043,
											"src": "1613:10:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 1031,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "1613:6:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1034,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "1641:9:7",
											"nodeType": "VariableDeclaration",
											"scope": 1043,
											"src": "1633:17:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1033,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1633:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1036,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "1668:8:7",
											"nodeType": "VariableDeclaration",
											"scope": 1043,
											"src": "1660:16:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1035,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1660:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1038,
											"mutability": "mutable",
											"name": "amountOut",
											"nameLocation": "1694:9:7",
											"nodeType": "VariableDeclaration",
											"scope": 1043,
											"src": "1686:17:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1037,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1686:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1040,
											"mutability": "mutable",
											"name": "amountInMaximum",
											"nameLocation": "1721:15:7",
											"nodeType": "VariableDeclaration",
											"scope": 1043,
											"src": "1713:23:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1039,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1713:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1042,
											"mutability": "mutable",
											"name": "sqrtPriceLimitX96",
											"nameLocation": "1754:17:7",
											"nodeType": "VariableDeclaration",
											"scope": 1043,
											"src": "1746:25:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 1041,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "1746:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactOutputSingleParams",
									"nameLocation": "1528:23:7",
									"nodeType": "StructDefinition",
									"scope": 1073,
									"src": "1521:257:7",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1044,
										"nodeType": "StructuredDocumentation",
										"src": "1784:250:7",
										"text": "@notice Swaps as little as possible of one token for `amountOut` of another token\n @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n @return amountIn The amount of the input token"
									},
									"functionSelector": "db3e2198",
									"id": 1052,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactOutputSingle",
									"nameLocation": "2048:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1048,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1047,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "2099:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1052,
												"src": "2066:39:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1043_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactOutputSingleParams"
												},
												"typeName": {
													"id": 1046,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1045,
														"name": "ExactOutputSingleParams",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1043,
														"src": "2066:23:7"
													},
													"referencedDeclaration": 1043,
													"src": "2066:23:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1043_storage_ptr",
														"typeString": "struct ISwapRouter.ExactOutputSingleParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2065:41:7"
									},
									"returnParameters": {
										"id": 1051,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1050,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "2141:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1052,
												"src": "2133:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1049,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2133:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2132:18:7"
									},
									"scope": 1073,
									"src": "2039:112:7",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISwapRouter.ExactOutputParams",
									"id": 1063,
									"members": [
										{
											"constant": false,
											"id": 1054,
											"mutability": "mutable",
											"name": "path",
											"nameLocation": "2198:4:7",
											"nodeType": "VariableDeclaration",
											"scope": 1063,
											"src": "2192:10:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 1053,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "2192:5:7",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1056,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "2220:9:7",
											"nodeType": "VariableDeclaration",
											"scope": 1063,
											"src": "2212:17:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1055,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2212:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1058,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "2247:8:7",
											"nodeType": "VariableDeclaration",
											"scope": 1063,
											"src": "2239:16:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1057,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2239:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1060,
											"mutability": "mutable",
											"name": "amountOut",
											"nameLocation": "2273:9:7",
											"nodeType": "VariableDeclaration",
											"scope": 1063,
											"src": "2265:17:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1059,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2265:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1062,
											"mutability": "mutable",
											"name": "amountInMaximum",
											"nameLocation": "2300:15:7",
											"nodeType": "VariableDeclaration",
											"scope": 1063,
											"src": "2292:23:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1061,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2292:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactOutputParams",
									"nameLocation": "2164:17:7",
									"nodeType": "StructDefinition",
									"scope": 1073,
									"src": "2157:165:7",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1064,
										"nodeType": "StructuredDocumentation",
										"src": "2328:284:7",
										"text": "@notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n @return amountIn The amount of the input token"
									},
									"functionSelector": "f28c0498",
									"id": 1072,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactOutput",
									"nameLocation": "2626:11:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1068,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1067,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "2665:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1072,
												"src": "2638:33:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactOutputParams_$1063_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactOutputParams"
												},
												"typeName": {
													"id": 1066,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1065,
														"name": "ExactOutputParams",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1063,
														"src": "2638:17:7"
													},
													"referencedDeclaration": 1063,
													"src": "2638:17:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactOutputParams_$1063_storage_ptr",
														"typeString": "struct ISwapRouter.ExactOutputParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2637:35:7"
									},
									"returnParameters": {
										"id": 1071,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1070,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "2707:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1072,
												"src": "2699:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1069,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2698:18:7"
									},
									"scope": 1073,
									"src": "2617:100:7",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1074,
							"src": "280:2439:7",
							"usedErrors": []
						}
					],
					"src": "45:2675:7"
				},
				"id": 7
			},
			"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol",
					"exportedSymbols": {
						"IERC20": [
							338
						],
						"TransferHelper": [
							1244
						]
					},
					"id": 1245,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1075,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:8"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 1076,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1245,
							"sourceUnit": 339,
							"src": "71:56:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 1244,
							"linearizedBaseContracts": [
								1244
							],
							"name": "TransferHelper",
							"nameLocation": "137:14:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1124,
										"nodeType": "Block",
										"src": "690:229:8",
										"statements": [
											{
												"assignments": [
													1089,
													1091
												],
												"declarations": [
													{
														"constant": false,
														"id": 1089,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "706:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 1124,
														"src": "701:12:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1088,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "701:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1091,
														"mutability": "mutable",
														"name": "data",
														"nameLocation": "728:4:8",
														"nodeType": "VariableDeclaration",
														"scope": 1124,
														"src": "715:17:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1090,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "715:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1104,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1096,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 338,
																			"src": "782:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$338_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1097,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 337,
																		"src": "782:19:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function IERC20.transferFrom(address,address,uint256) returns (bool)"
																		}
																	},
																	"id": 1098,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "782:28:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1099,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1081,
																	"src": "812:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1100,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1083,
																	"src": "818:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1101,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1085,
																	"src": "822:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1094,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "759:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1095,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "759:22:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1102,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "759:69:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1092,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1079,
															"src": "748:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1093,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "748:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "748:81:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "700:129:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1120,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1106,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1089,
																"src": "847:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 1118,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1110,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1107,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1091,
																					"src": "859:4:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 1108,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "859:11:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 1109,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "874:1:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "859:16:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 1113,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1091,
																					"src": "890:4:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 1115,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "897:4:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 1114,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "897:4:8",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 1116,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "896:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 1111,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "879:3:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 1112,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "879:10:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 1117,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "879:24:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "859:44:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 1119,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "858:46:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "847:57:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "535446",
															"id": 1121,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "906:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a1c4b1d67db284650e7cfb49cb11ce76848206ad466478425bd3418f8bbb9a86",
																"typeString": "literal_string \"STF\""
															},
															"value": "STF"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a1c4b1d67db284650e7cfb49cb11ce76848206ad466478425bd3418f8bbb9a86",
																"typeString": "literal_string \"STF\""
															}
														],
														"id": 1105,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "839:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1122,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "839:73:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1123,
												"nodeType": "ExpressionStatement",
												"src": "839:73:8"
											}
										]
									},
									"documentation": {
										"id": 1077,
										"nodeType": "StructuredDocumentation",
										"src": "158:398:8",
										"text": "@notice Transfers tokens from the targeted address to the given destination\n @notice Errors with 'STF' if transfer fails\n @param token The contract address of the token to be transferred\n @param from The originating address from which the tokens will be transferred\n @param to The destination address of the transfer\n @param value The amount to be transferred"
									},
									"id": 1125,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "570:16:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1086,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1079,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "604:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1125,
												"src": "596:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1078,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "596:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1081,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "627:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1125,
												"src": "619:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1080,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "619:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1083,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "649:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1125,
												"src": "641:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1082,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "641:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1085,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "669:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1125,
												"src": "661:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1084,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "661:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "586:94:8"
									},
									"returnParameters": {
										"id": 1087,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "690:0:8"
									},
									"scope": 1244,
									"src": "561:358:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1170,
										"nodeType": "Block",
										"src": "1314:206:8",
										"statements": [
											{
												"assignments": [
													1136,
													1138
												],
												"declarations": [
													{
														"constant": false,
														"id": 1136,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "1330:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 1170,
														"src": "1325:12:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1135,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1325:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1138,
														"mutability": "mutable",
														"name": "data",
														"nameLocation": "1352:4:8",
														"nodeType": "VariableDeclaration",
														"scope": 1170,
														"src": "1339:17:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1137,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1339:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1150,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1143,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 338,
																			"src": "1394:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$338_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1144,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 305,
																		"src": "1394:15:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function IERC20.transfer(address,uint256) returns (bool)"
																		}
																	},
																	"id": 1145,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1394:24:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1146,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1130,
																	"src": "1420:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1147,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1132,
																	"src": "1424:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1141,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1371:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1142,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1371:22:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1148,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1371:59:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1139,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1128,
															"src": "1360:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1140,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "1360:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1149,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1360:71:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1324:107:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1166,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1152,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1136,
																"src": "1449:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 1164,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1156,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1153,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1138,
																					"src": "1461:4:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 1154,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "1461:11:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 1155,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1476:1:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "1461:16:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 1159,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1138,
																					"src": "1492:4:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 1161,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "1499:4:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 1160,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "1499:4:8",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 1162,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "1498:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 1157,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "1481:3:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 1158,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "1481:10:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 1163,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1481:24:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "1461:44:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 1165,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1460:46:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1449:57:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5354",
															"id": 1167,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1508:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8e992d6a09e3feb7936717fa482f3a7086f18407e19b697f3153d17fd25870ca",
																"typeString": "literal_string \"ST\""
															},
															"value": "ST"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8e992d6a09e3feb7936717fa482f3a7086f18407e19b697f3153d17fd25870ca",
																"typeString": "literal_string \"ST\""
															}
														],
														"id": 1151,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1441:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1168,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1441:72:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1169,
												"nodeType": "ExpressionStatement",
												"src": "1441:72:8"
											}
										]
									},
									"documentation": {
										"id": 1126,
										"nodeType": "StructuredDocumentation",
										"src": "925:281:8",
										"text": "@notice Transfers tokens from msg.sender to a recipient\n @dev Errors with ST if transfer fails\n @param token The contract address of the token which will be transferred\n @param to The recipient of the transfer\n @param value The value of the transfer"
									},
									"id": 1171,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "1220:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1128,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1250:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1171,
												"src": "1242:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1127,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1242:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1130,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1273:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1171,
												"src": "1265:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1129,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1265:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1132,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1293:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1171,
												"src": "1285:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1131,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1285:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1232:72:8"
									},
									"returnParameters": {
										"id": 1134,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1314:0:8"
									},
									"scope": 1244,
									"src": "1211:309:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1216,
										"nodeType": "Block",
										"src": "1975:205:8",
										"statements": [
											{
												"assignments": [
													1182,
													1184
												],
												"declarations": [
													{
														"constant": false,
														"id": 1182,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "1991:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 1216,
														"src": "1986:12:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1181,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1986:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1184,
														"mutability": "mutable",
														"name": "data",
														"nameLocation": "2013:4:8",
														"nodeType": "VariableDeclaration",
														"scope": 1216,
														"src": "2000:17:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1183,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2000:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1196,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1189,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 338,
																			"src": "2055:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$338_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1190,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 325,
																		"src": "2055:14:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function IERC20.approve(address,uint256) returns (bool)"
																		}
																	},
																	"id": 1191,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2055:23:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1192,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1176,
																	"src": "2080:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1193,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1178,
																	"src": "2084:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1187,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2032:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1188,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2032:22:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1194,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2032:58:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1185,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1174,
															"src": "2021:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1186,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "2021:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1195,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2021:70:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1985:106:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1212,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1198,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1182,
																"src": "2109:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 1210,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1202,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1199,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1184,
																					"src": "2121:4:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 1200,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "2121:11:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 1201,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2136:1:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "2121:16:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 1205,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1184,
																					"src": "2152:4:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 1207,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "2159:4:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 1206,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "2159:4:8",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 1208,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "2158:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 1203,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "2141:3:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 1204,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "2141:10:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 1209,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2141:24:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "2121:44:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 1211,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2120:46:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "2109:57:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5341",
															"id": 1213,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2168:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0c382912095e7706ed01a66755a50c713445aceaf5a9168954498b03dd381faa",
																"typeString": "literal_string \"SA\""
															},
															"value": "SA"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0c382912095e7706ed01a66755a50c713445aceaf5a9168954498b03dd381faa",
																"typeString": "literal_string \"SA\""
															}
														],
														"id": 1197,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2101:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1214,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2101:72:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1215,
												"nodeType": "ExpressionStatement",
												"src": "2101:72:8"
											}
										]
									},
									"documentation": {
										"id": 1172,
										"nodeType": "StructuredDocumentation",
										"src": "1526:342:8",
										"text": "@notice Approves the stipulated contract to spend the given allowance in the given token\n @dev Errors with 'SA' if transfer fails\n @param token The contract address of the token to be approved\n @param to The target of the approval\n @param value The amount of the given token the target will be allowed to spend"
									},
									"id": 1217,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1882:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1179,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1174,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1911:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1217,
												"src": "1903:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1173,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1903:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1176,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1934:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1217,
												"src": "1926:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1175,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1926:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1178,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1954:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1217,
												"src": "1946:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1177,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1946:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1893:72:8"
									},
									"returnParameters": {
										"id": 1180,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1975:0:8"
									},
									"scope": 1244,
									"src": "1873:307:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1242,
										"nodeType": "Block",
										"src": "2431:104:8",
										"statements": [
											{
												"assignments": [
													1226,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1226,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2447:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 1242,
														"src": "2442:12:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1225,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2442:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1236,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1233,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2492:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1232,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "2482:9:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (bytes memory)"
																},
																"typeName": {
																	"id": 1231,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "2486:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_storage_ptr",
																		"typeString": "bytes"
																	}
																}
															},
															"id": 1234,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2482:12:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 1227,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1220,
																"src": "2460:2:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1228,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2460:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1230,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1229,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1222,
																"src": "2475:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2460:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1235,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2460:35:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2441:54:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1238,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1226,
															"src": "2513:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "535445",
															"id": 1239,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2522:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_48541fce89df928ec30caa1aed6c0cd94b8e2ef76b3c68b10b9a184ceadb93d4",
																"typeString": "literal_string \"STE\""
															},
															"value": "STE"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_48541fce89df928ec30caa1aed6c0cd94b8e2ef76b3c68b10b9a184ceadb93d4",
																"typeString": "literal_string \"STE\""
															}
														],
														"id": 1237,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2505:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1240,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2505:23:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1241,
												"nodeType": "ExpressionStatement",
												"src": "2505:23:8"
											}
										]
									},
									"documentation": {
										"id": 1218,
										"nodeType": "StructuredDocumentation",
										"src": "2186:179:8",
										"text": "@notice Transfers ETH to the recipient address\n @dev Fails with `STE`\n @param to The destination of the transfer\n @param value The value to be transferred"
									},
									"id": 1243,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferETH",
									"nameLocation": "2379:15:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1223,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1220,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2403:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1243,
												"src": "2395:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1219,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2395:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1222,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2415:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1243,
												"src": "2407:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1221,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2407:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2394:27:8"
									},
									"returnParameters": {
										"id": 1224,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2431:0:8"
									},
									"scope": 1244,
									"src": "2370:165:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1245,
							"src": "129:2408:8",
							"usedErrors": []
						}
					],
					"src": "45:2493:8"
				},
				"id": 8
			},
			"contracts/fountain.sol": {
				"ast": {
					"absolutePath": "contracts/fountain.sol",
					"exportedSymbols": {
						"Context": [
							360
						],
						"EnumerableSet": [
							959
						],
						"IERC20": [
							338
						],
						"ISwapRouter": [
							1073
						],
						"IUniswapV3SwapCallback": [
							973
						],
						"IWETH": [
							1759
						],
						"Ownable": [
							112
						],
						"Pausable": [
							220
						],
						"ReentrancyGuard": [
							260
						],
						"Serenity": [
							1745
						],
						"TransferHelper": [
							1244
						]
					},
					"id": 1746,
					"license": "Proprietary",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1246,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "41:31:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 1247,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1746,
							"sourceUnit": 113,
							"src": "74:52:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/Pausable.sol",
							"file": "@openzeppelin/contracts/security/Pausable.sol",
							"id": 1248,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1746,
							"sourceUnit": 221,
							"src": "127:55:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 1249,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1746,
							"sourceUnit": 261,
							"src": "183:62:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol",
							"file": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol",
							"id": 1250,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1746,
							"sourceUnit": 960,
							"src": "246:65:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 1251,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1746,
							"sourceUnit": 339,
							"src": "312:56:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol",
							"file": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol",
							"id": 1252,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1746,
							"sourceUnit": 1074,
							"src": "369:68:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol",
							"file": "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol",
							"id": 1253,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1746,
							"sourceUnit": 1245,
							"src": "438:70:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/weth.sol",
							"file": "./weth.sol",
							"id": 1254,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1746,
							"sourceUnit": 1760,
							"src": "509:20:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1255,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 112,
										"src": "552:7:9"
									},
									"id": 1256,
									"nodeType": "InheritanceSpecifier",
									"src": "552:7:9"
								},
								{
									"baseName": {
										"id": 1257,
										"name": "Pausable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 220,
										"src": "561:8:9"
									},
									"id": 1258,
									"nodeType": "InheritanceSpecifier",
									"src": "561:8:9"
								},
								{
									"baseName": {
										"id": 1259,
										"name": "ReentrancyGuard",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 260,
										"src": "571:15:9"
									},
									"id": 1260,
									"nodeType": "InheritanceSpecifier",
									"src": "571:15:9"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1745,
							"linearizedBaseContracts": [
								1745,
								260,
								220,
								112,
								360
							],
							"name": "Serenity",
							"nameLocation": "540:8:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1264,
									"libraryName": {
										"id": 1261,
										"name": "EnumerableSet",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 959,
										"src": "599:13:9"
									},
									"nodeType": "UsingForDirective",
									"src": "593:49:9",
									"typeName": {
										"id": 1263,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1262,
											"name": "EnumerableSet.AddressSet",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 672,
											"src": "617:24:9"
										},
										"referencedDeclaration": 672,
										"src": "617:24:9",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_AddressSet_$672_storage_ptr",
											"typeString": "struct EnumerableSet.AddressSet"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "4aa4a4fc",
									"id": 1267,
									"mutability": "immutable",
									"name": "WETH9",
									"nameLocation": "791:5:9",
									"nodeType": "VariableDeclaration",
									"scope": 1745,
									"src": "768:28:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IWETH_$1759",
										"typeString": "contract IWETH"
									},
									"typeName": {
										"id": 1266,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1265,
											"name": "IWETH",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1759,
											"src": "768:5:9"
										},
										"referencedDeclaration": 1759,
										"src": "768:5:9",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IWETH_$1759",
											"typeString": "contract IWETH"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "89a30271",
									"id": 1270,
									"mutability": "immutable",
									"name": "USDC",
									"nameLocation": "947:4:9",
									"nodeType": "VariableDeclaration",
									"scope": 1745,
									"src": "923:28:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$338",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 1269,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1268,
											"name": "IERC20",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 338,
											"src": "923:6:9"
										},
										"referencedDeclaration": 338,
										"src": "923:6:9",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$338",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "c31c9c07",
									"id": 1273,
									"mutability": "immutable",
									"name": "swapRouter",
									"nameLocation": "1177:10:9",
									"nodeType": "VariableDeclaration",
									"scope": 1745,
									"src": "1148:39:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_ISwapRouter_$1073",
										"typeString": "contract ISwapRouter"
									},
									"typeName": {
										"id": 1272,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1271,
											"name": "ISwapRouter",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1073,
											"src": "1148:11:9"
										},
										"referencedDeclaration": 1073,
										"src": "1148:11:9",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ISwapRouter_$1073",
											"typeString": "contract ISwapRouter"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 1275,
									"mutability": "mutable",
									"name": "ephemeralGasMoneyAmount",
									"nameLocation": "1202:23:9",
									"nodeType": "VariableDeclaration",
									"scope": 1745,
									"src": "1194:31:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1274,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1194:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1279,
									"mutability": "mutable",
									"name": "balances",
									"nameLocation": "1273:8:9",
									"nodeType": "VariableDeclaration",
									"scope": 1745,
									"src": "1236:45:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1278,
										"keyType": {
											"id": 1276,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1245:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1236:28:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 1277,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1256:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1283,
									"mutability": "mutable",
									"name": "charities",
									"nameLocation": "1324:9:9",
									"nodeType": "VariableDeclaration",
									"scope": 1745,
									"src": "1288:45:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_address_$",
										"typeString": "mapping(string => address)"
									},
									"typeName": {
										"id": 1282,
										"keyType": {
											"id": 1280,
											"name": "string",
											"nodeType": "ElementaryTypeName",
											"src": "1297:6:9",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											}
										},
										"nodeType": "Mapping",
										"src": "1288:27:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_address_$",
											"typeString": "mapping(string => address)"
										},
										"valueType": {
											"id": 1281,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1307:7:9",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1287,
									"mutability": "mutable",
									"name": "charitiesReverse",
									"nameLocation": "1375:16:9",
									"nodeType": "VariableDeclaration",
									"scope": 1745,
									"src": "1339:52:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_string_storage_$",
										"typeString": "mapping(address => string)"
									},
									"typeName": {
										"id": 1286,
										"keyType": {
											"id": 1284,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1348:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1339:27:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_string_storage_$",
											"typeString": "mapping(address => string)"
										},
										"valueType": {
											"id": 1285,
											"name": "string",
											"nodeType": "ElementaryTypeName",
											"src": "1359:6:9",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1290,
									"mutability": "mutable",
									"name": "charityAddresses",
									"nameLocation": "1430:16:9",
									"nodeType": "VariableDeclaration",
									"scope": 1745,
									"src": "1397:49:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_struct$_AddressSet_$672_storage",
										"typeString": "struct EnumerableSet.AddressSet"
									},
									"typeName": {
										"id": 1289,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1288,
											"name": "EnumerableSet.AddressSet",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 672,
											"src": "1397:24:9"
										},
										"referencedDeclaration": 672,
										"src": "1397:24:9",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_AddressSet_$672_storage_ptr",
											"typeString": "struct EnumerableSet.AddressSet"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 1304,
									"name": "FountainDeposit",
									"nameLocation": "1459:15:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1303,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1292,
												"indexed": true,
												"mutability": "mutable",
												"name": "donor",
												"nameLocation": "1500:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1304,
												"src": "1484:21:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1291,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1484:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1294,
												"indexed": true,
												"mutability": "mutable",
												"name": "ephemeralWallet",
												"nameLocation": "1532:15:9",
												"nodeType": "VariableDeclaration",
												"scope": 1304,
												"src": "1516:31:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1293,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1516:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1296,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenIn",
												"nameLocation": "1574:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1304,
												"src": "1558:23:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1295,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1558:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1298,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokenAmountIn",
												"nameLocation": "1600:13:9",
												"nodeType": "VariableDeclaration",
												"scope": 1304,
												"src": "1592:21:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1297,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1592:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1300,
												"indexed": false,
												"mutability": "mutable",
												"name": "gasOut",
												"nameLocation": "1631:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1304,
												"src": "1623:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1299,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1623:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1302,
												"indexed": false,
												"mutability": "mutable",
												"name": "usdcOut",
												"nameLocation": "1655:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1304,
												"src": "1647:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1301,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1647:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1474:194:9"
									},
									"src": "1453:216:9"
								},
								{
									"anonymous": false,
									"id": 1314,
									"name": "FountainDonation",
									"nameLocation": "1681:16:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1306,
												"indexed": true,
												"mutability": "mutable",
												"name": "donor",
												"nameLocation": "1723:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1314,
												"src": "1707:21:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1305,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1707:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1308,
												"indexed": true,
												"mutability": "mutable",
												"name": "charity",
												"nameLocation": "1754:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1314,
												"src": "1739:22:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1307,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1739:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1310,
												"indexed": true,
												"mutability": "mutable",
												"name": "charityAddress",
												"nameLocation": "1788:14:9",
												"nodeType": "VariableDeclaration",
												"scope": 1314,
												"src": "1772:30:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1309,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1772:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1312,
												"indexed": false,
												"mutability": "mutable",
												"name": "usdcAmount",
												"nameLocation": "1821:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 1314,
												"src": "1813:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1311,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1813:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1697:140:9"
									},
									"src": "1675:163:9"
								},
								{
									"anonymous": false,
									"id": 1320,
									"name": "FountainFinalization",
									"nameLocation": "1850:20:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1316,
												"indexed": true,
												"mutability": "mutable",
												"name": "donor",
												"nameLocation": "1896:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1320,
												"src": "1880:21:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1315,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1880:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1318,
												"indexed": false,
												"mutability": "mutable",
												"name": "usdcAmount",
												"nameLocation": "1919:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 1320,
												"src": "1911:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1317,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1911:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1870:65:9"
									},
									"src": "1844:92:9"
								},
								{
									"body": {
										"id": 1350,
										"nodeType": "Block",
										"src": "2041:147:9",
										"statements": [
											{
												"expression": {
													"id": 1336,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1334,
														"name": "swapRouter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1273,
														"src": "2051:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ISwapRouter_$1073",
															"typeString": "contract ISwapRouter"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1335,
														"name": "_swapRouter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1323,
														"src": "2064:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ISwapRouter_$1073",
															"typeString": "contract ISwapRouter"
														}
													},
													"src": "2051:24:9",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISwapRouter_$1073",
														"typeString": "contract ISwapRouter"
													}
												},
												"id": 1337,
												"nodeType": "ExpressionStatement",
												"src": "2051:24:9"
											},
											{
												"expression": {
													"id": 1340,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1338,
														"name": "ephemeralGasMoneyAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1275,
														"src": "2085:23:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1339,
														"name": "_ephemeralGasMoneyAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1325,
														"src": "2111:24:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2085:50:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1341,
												"nodeType": "ExpressionStatement",
												"src": "2085:50:9"
											},
											{
												"expression": {
													"id": 1344,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1342,
														"name": "WETH9",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1267,
														"src": "2145:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IWETH_$1759",
															"typeString": "contract IWETH"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1343,
														"name": "_weth9",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1328,
														"src": "2153:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IWETH_$1759",
															"typeString": "contract IWETH"
														}
													},
													"src": "2145:14:9",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IWETH_$1759",
														"typeString": "contract IWETH"
													}
												},
												"id": 1345,
												"nodeType": "ExpressionStatement",
												"src": "2145:14:9"
											},
											{
												"expression": {
													"id": 1348,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1346,
														"name": "USDC",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1270,
														"src": "2169:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$338",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1347,
														"name": "_usdc",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1331,
														"src": "2176:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$338",
															"typeString": "contract IERC20"
														}
													},
													"src": "2169:12:9",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$338",
														"typeString": "contract IERC20"
													}
												},
												"id": 1349,
												"nodeType": "ExpressionStatement",
												"src": "2169:12:9"
											}
										]
									},
									"id": 1351,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1332,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1323,
												"mutability": "mutable",
												"name": "_swapRouter",
												"nameLocation": "1966:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 1351,
												"src": "1954:23:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISwapRouter_$1073",
													"typeString": "contract ISwapRouter"
												},
												"typeName": {
													"id": 1322,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1321,
														"name": "ISwapRouter",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1073,
														"src": "1954:11:9"
													},
													"referencedDeclaration": 1073,
													"src": "1954:11:9",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISwapRouter_$1073",
														"typeString": "contract ISwapRouter"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1325,
												"mutability": "mutable",
												"name": "_ephemeralGasMoneyAmount",
												"nameLocation": "1987:24:9",
												"nodeType": "VariableDeclaration",
												"scope": 1351,
												"src": "1979:32:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1324,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1979:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1328,
												"mutability": "mutable",
												"name": "_weth9",
												"nameLocation": "2019:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1351,
												"src": "2013:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IWETH_$1759",
													"typeString": "contract IWETH"
												},
												"typeName": {
													"id": 1327,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1326,
														"name": "IWETH",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1759,
														"src": "2013:5:9"
													},
													"referencedDeclaration": 1759,
													"src": "2013:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IWETH_$1759",
														"typeString": "contract IWETH"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1331,
												"mutability": "mutable",
												"name": "_usdc",
												"nameLocation": "2034:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1351,
												"src": "2027:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$338",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1330,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1329,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 338,
														"src": "2027:6:9"
													},
													"referencedDeclaration": 338,
													"src": "2027:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$338",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1953:87:9"
									},
									"returnParameters": {
										"id": 1333,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2041:0:9"
									},
									"scope": 1745,
									"src": "1942:246:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1503,
										"nodeType": "Block",
										"src": "2640:2865:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1377,
															"name": "tokenIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1355,
															"src": "2751:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1378,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2760:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1379,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2760:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1382,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2780:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Serenity_$1745",
																		"typeString": "contract Serenity"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Serenity_$1745",
																		"typeString": "contract Serenity"
																	}
																],
																"id": 1381,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2772:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1380,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2772:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1383,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2772:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1384,
															"name": "totalAmountIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1357,
															"src": "2787:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1374,
															"name": "TransferHelper",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1244,
															"src": "2719:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TransferHelper_$1244_$",
																"typeString": "type(library TransferHelper)"
															}
														},
														"id": 1376,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1125,
														"src": "2719:31:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,address,uint256)"
														}
													},
													"id": 1385,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2719:82:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1386,
												"nodeType": "ExpressionStatement",
												"src": "2719:82:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1390,
															"name": "tokenIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1355,
															"src": "2915:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1393,
																	"name": "swapRouter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1273,
																	"src": "2932:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ISwapRouter_$1073",
																		"typeString": "contract ISwapRouter"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ISwapRouter_$1073",
																		"typeString": "contract ISwapRouter"
																	}
																],
																"id": 1392,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2924:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1391,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2924:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1394,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2924:19:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1395,
															"name": "totalAmountIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1357,
															"src": "2945:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1387,
															"name": "TransferHelper",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1244,
															"src": "2888:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TransferHelper_$1244_$",
																"typeString": "type(library TransferHelper)"
															}
														},
														"id": 1389,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeApprove",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1217,
														"src": "2888:26:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1396,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2888:71:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1397,
												"nodeType": "ExpressionStatement",
												"src": "2888:71:9"
											},
											{
												"assignments": [
													1402
												],
												"declarations": [
													{
														"constant": false,
														"id": 1402,
														"mutability": "mutable",
														"name": "ethSwapParams",
														"nameLocation": "3085:13:9",
														"nodeType": "VariableDeclaration",
														"scope": 1503,
														"src": "3042:56:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1043_memory_ptr",
															"typeString": "struct ISwapRouter.ExactOutputSingleParams"
														},
														"typeName": {
															"id": 1401,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1400,
																"name": "ISwapRouter.ExactOutputSingleParams",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1043,
																"src": "3042:35:9"
															},
															"referencedDeclaration": 1043,
															"src": "3042:35:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1043_storage_ptr",
																"typeString": "struct ISwapRouter.ExactOutputSingleParams"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1420,
												"initialValue": {
													"arguments": [
														{
															"id": 1405,
															"name": "tokenIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1355,
															"src": "3176:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1408,
																	"name": "WETH9",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1267,
																	"src": "3219:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IWETH_$1759",
																		"typeString": "contract IWETH"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IWETH_$1759",
																		"typeString": "contract IWETH"
																	}
																],
																"id": 1407,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3211:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1406,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3211:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1409,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3211:14:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1410,
															"name": "ethSwapPoolFee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1363,
															"src": "3248:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														},
														{
															"arguments": [
																{
																	"id": 1413,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3299:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Serenity_$1745",
																		"typeString": "contract Serenity"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Serenity_$1745",
																		"typeString": "contract Serenity"
																	}
																],
																"id": 1412,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3291:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1411,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3291:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1414,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3291:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1415,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1359,
															"src": "3332:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1416,
															"name": "ephemeralGasMoneyAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1275,
															"src": "3369:23:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1417,
															"name": "ethSwapAmountInMax",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1361,
															"src": "3427:18:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "30",
															"id": 1418,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3731:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"expression": {
															"id": 1403,
															"name": "ISwapRouter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1073,
															"src": "3113:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ISwapRouter_$1073_$",
																"typeString": "type(contract ISwapRouter)"
															}
														},
														"id": 1404,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "ExactOutputSingleParams",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1043,
														"src": "3113:35:9",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_ExactOutputSingleParams_$1043_storage_ptr_$",
															"typeString": "type(struct ISwapRouter.ExactOutputSingleParams storage pointer)"
														}
													},
													"id": 1419,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [
														"tokenIn",
														"tokenOut",
														"fee",
														"recipient",
														"deadline",
														"amountOut",
														"amountInMaximum",
														"sqrtPriceLimitX96"
													],
													"nodeType": "FunctionCall",
													"src": "3113:634:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1043_memory_ptr",
														"typeString": "struct ISwapRouter.ExactOutputSingleParams memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3042:705:9"
											},
											{
												"assignments": [
													1422
												],
												"declarations": [
													{
														"constant": false,
														"id": 1422,
														"mutability": "mutable",
														"name": "tokenAmountSpentOnEthSwap",
														"nameLocation": "3878:25:9",
														"nodeType": "VariableDeclaration",
														"scope": 1503,
														"src": "3870:33:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1421,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3870:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1427,
												"initialValue": {
													"arguments": [
														{
															"id": 1425,
															"name": "ethSwapParams",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1402,
															"src": "3935:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1043_memory_ptr",
																"typeString": "struct ISwapRouter.ExactOutputSingleParams memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1043_memory_ptr",
																"typeString": "struct ISwapRouter.ExactOutputSingleParams memory"
															}
														],
														"expression": {
															"id": 1423,
															"name": "swapRouter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1273,
															"src": "3906:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ISwapRouter_$1073",
																"typeString": "contract ISwapRouter"
															}
														},
														"id": 1424,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "exactOutputSingle",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1052,
														"src": "3906:28:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_payable$_t_struct$_ExactOutputSingleParams_$1043_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct ISwapRouter.ExactOutputSingleParams memory) payable external returns (uint256)"
														}
													},
													"id": 1426,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3906:43:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3870:79:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1431,
															"name": "ephemeralGasMoneyAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1275,
															"src": "3999:23:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1428,
															"name": "WETH9",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1267,
															"src": "3984:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IWETH_$1759",
																"typeString": "contract IWETH"
															}
														},
														"id": 1430,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "withdraw",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1758,
														"src": "3984:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256) external"
														}
													},
													"id": 1432,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3984:39:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1433,
												"nodeType": "ExpressionStatement",
												"src": "3984:39:9"
											},
											{
												"assignments": [
													1435,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1435,
														"mutability": "mutable",
														"name": "ephemeralGasSent",
														"nameLocation": "4103:16:9",
														"nodeType": "VariableDeclaration",
														"scope": 1503,
														"src": "4098:21:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1434,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4098:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1445,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 1443,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4194:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"arguments": [
																	{
																		"id": 1438,
																		"name": "ephemeralWalletAddress",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1353,
																		"src": "4133:22:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1437,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4125:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_payable_$",
																		"typeString": "type(address payable)"
																	},
																	"typeName": {
																		"id": 1436,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "4125:8:9",
																		"stateMutability": "payable",
																		"typeDescriptions": {}
																	}
																},
																"id": 1439,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4125:31:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 1440,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "4125:36:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1442,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1441,
																"name": "ephemeralGasMoneyAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1275,
																"src": "4169:23:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "4125:68:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1444,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4125:72:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4097:100:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1447,
															"name": "ephemeralGasSent",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1435,
															"src": "4215:16:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4661696c656420746f2073656e642067617320746f20657068656d6572616c2077616c6c65742e",
															"id": 1448,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4233:41:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_57af08fa0c45ce53db4fdccca5ce513144095272b76520aa6b6712a0c1a0a725",
																"typeString": "literal_string \"Failed to send gas to ephemeral wallet.\""
															},
															"value": "Failed to send gas to ephemeral wallet."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_57af08fa0c45ce53db4fdccca5ce513144095272b76520aa6b6712a0c1a0a725",
																"typeString": "literal_string \"Failed to send gas to ephemeral wallet.\""
															}
														],
														"id": 1446,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4207:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1449,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4207:68:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1450,
												"nodeType": "ExpressionStatement",
												"src": "4207:68:9"
											},
											{
												"assignments": [
													1452
												],
												"declarations": [
													{
														"constant": false,
														"id": 1452,
														"mutability": "mutable",
														"name": "remainingAmountIn",
														"nameLocation": "4358:17:9",
														"nodeType": "VariableDeclaration",
														"scope": 1503,
														"src": "4350:25:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1451,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4350:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1456,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1455,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1453,
														"name": "totalAmountIn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1357,
														"src": "4378:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 1454,
														"name": "tokenAmountSpentOnEthSwap",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1422,
														"src": "4394:25:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4378:41:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4350:69:9"
											},
											{
												"assignments": [
													1461
												],
												"declarations": [
													{
														"constant": false,
														"id": 1461,
														"mutability": "mutable",
														"name": "params",
														"nameLocation": "4545:6:9",
														"nodeType": "VariableDeclaration",
														"scope": 1503,
														"src": "4503:48:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ExactInputSingleParams_$997_memory_ptr",
															"typeString": "struct ISwapRouter.ExactInputSingleParams"
														},
														"typeName": {
															"id": 1460,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1459,
																"name": "ISwapRouter.ExactInputSingleParams",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 997,
																"src": "4503:34:9"
															},
															"referencedDeclaration": 997,
															"src": "4503:34:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ExactInputSingleParams_$997_storage_ptr",
																"typeString": "struct ISwapRouter.ExactInputSingleParams"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1479,
												"initialValue": {
													"arguments": [
														{
															"id": 1464,
															"name": "tokenIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1355,
															"src": "4628:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1467,
																	"name": "USDC",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1270,
																	"src": "4671:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$338",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$338",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 1466,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4663:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1465,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4663:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1468,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4663:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1469,
															"name": "usdcSwapPoolFee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1365,
															"src": "4699:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														},
														{
															"arguments": [
																{
																	"id": 1472,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "4751:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Serenity_$1745",
																		"typeString": "contract Serenity"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Serenity_$1745",
																		"typeString": "contract Serenity"
																	}
																],
																"id": 1471,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4743:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1470,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4743:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1473,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4743:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1474,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1359,
															"src": "4784:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1475,
															"name": "remainingAmountIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1452,
															"src": "4820:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1476,
															"name": "usdcSwapAmountOutMinimum",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1367,
															"src": "4873:24:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "30",
															"id": 1477,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5183:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"expression": {
															"id": 1462,
															"name": "ISwapRouter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1073,
															"src": "4566:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ISwapRouter_$1073_$",
																"typeString": "type(contract ISwapRouter)"
															}
														},
														"id": 1463,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "ExactInputSingleParams",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 997,
														"src": "4566:34:9",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_ExactInputSingleParams_$997_storage_ptr_$",
															"typeString": "type(struct ISwapRouter.ExactInputSingleParams storage pointer)"
														}
													},
													"id": 1478,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [
														"tokenIn",
														"tokenOut",
														"fee",
														"recipient",
														"deadline",
														"amountIn",
														"amountOutMinimum",
														"sqrtPriceLimitX96"
													],
													"nodeType": "FunctionCall",
													"src": "4566:634:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactInputSingleParams_$997_memory_ptr",
														"typeString": "struct ISwapRouter.ExactInputSingleParams memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4503:697:9"
											},
											{
												"assignments": [
													1481
												],
												"declarations": [
													{
														"constant": false,
														"id": 1481,
														"mutability": "mutable",
														"name": "amountOut",
														"nameLocation": "5251:9:9",
														"nodeType": "VariableDeclaration",
														"scope": 1503,
														"src": "5243:17:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1480,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5243:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1486,
												"initialValue": {
													"arguments": [
														{
															"id": 1484,
															"name": "params",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1461,
															"src": "5291:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ExactInputSingleParams_$997_memory_ptr",
																"typeString": "struct ISwapRouter.ExactInputSingleParams memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_ExactInputSingleParams_$997_memory_ptr",
																"typeString": "struct ISwapRouter.ExactInputSingleParams memory"
															}
														],
														"expression": {
															"id": 1482,
															"name": "swapRouter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1273,
															"src": "5263:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ISwapRouter_$1073",
																"typeString": "contract ISwapRouter"
															}
														},
														"id": 1483,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "exactInputSingle",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1006,
														"src": "5263:27:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_payable$_t_struct$_ExactInputSingleParams_$997_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct ISwapRouter.ExactInputSingleParams memory) payable external returns (uint256)"
														}
													},
													"id": 1485,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5263:35:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5243:55:9"
											},
											{
												"expression": {
													"id": 1491,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1487,
															"name": "balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1279,
															"src": "5318:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1489,
														"indexExpression": {
															"id": 1488,
															"name": "ephemeralWalletAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1353,
															"src": "5327:22:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "5318:32:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1490,
														"name": "amountOut",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1481,
														"src": "5354:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5318:45:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1492,
												"nodeType": "ExpressionStatement",
												"src": "5318:45:9"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1494,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5403:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1495,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5403:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1496,
															"name": "ephemeralWalletAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1353,
															"src": "5415:22:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1497,
															"name": "tokenIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1355,
															"src": "5439:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1498,
															"name": "totalAmountIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1357,
															"src": "5448:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1499,
															"name": "ephemeralGasMoneyAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1275,
															"src": "5463:23:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1500,
															"name": "amountOut",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1481,
															"src": "5488:9:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1493,
														"name": "FountainDeposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1304,
														"src": "5387:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,address,uint256,uint256,uint256)"
														}
													},
													"id": 1501,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5387:111:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1502,
												"nodeType": "EmitStatement",
												"src": "5382:116:9"
											}
										]
									},
									"functionSelector": "480a6fdc",
									"id": 1504,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1370,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1369,
												"name": "whenNotPaused",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 147,
												"src": "2613:13:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "2613:13:9"
										},
										{
											"id": 1372,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1371,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 259,
												"src": "2627:12:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "2627:12:9"
										}
									],
									"name": "deposit",
									"nameLocation": "2203:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1368,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1353,
												"mutability": "mutable",
												"name": "ephemeralWalletAddress",
												"nameLocation": "2264:22:9",
												"nodeType": "VariableDeclaration",
												"scope": 1504,
												"src": "2256:30:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1352,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2256:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1355,
												"mutability": "mutable",
												"name": "tokenIn",
												"nameLocation": "2334:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1504,
												"src": "2326:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1354,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2326:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1357,
												"mutability": "mutable",
												"name": "totalAmountIn",
												"nameLocation": "2359:13:9",
												"nodeType": "VariableDeclaration",
												"scope": 1504,
												"src": "2351:21:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1356,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2351:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1359,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "2391:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1504,
												"src": "2383:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1358,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2383:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1361,
												"mutability": "mutable",
												"name": "ethSwapAmountInMax",
												"nameLocation": "2444:18:9",
												"nodeType": "VariableDeclaration",
												"scope": 1504,
												"src": "2436:26:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1360,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2436:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1363,
												"mutability": "mutable",
												"name": "ethSwapPoolFee",
												"nameLocation": "2479:14:9",
												"nodeType": "VariableDeclaration",
												"scope": 1504,
												"src": "2472:21:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1362,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "2472:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1365,
												"mutability": "mutable",
												"name": "usdcSwapPoolFee",
												"nameLocation": "2538:15:9",
												"nodeType": "VariableDeclaration",
												"scope": 1504,
												"src": "2531:22:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1364,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "2531:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1367,
												"mutability": "mutable",
												"name": "usdcSwapAmountOutMinimum",
												"nameLocation": "2571:24:9",
												"nodeType": "VariableDeclaration",
												"scope": 1504,
												"src": "2563:32:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1366,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2563:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2210:395:9"
									},
									"returnParameters": {
										"id": 1373,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2640:0:9"
									},
									"scope": 1745,
									"src": "2194:3311:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1684,
										"nodeType": "Block",
										"src": "5874:1742:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1529,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1523,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1520,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "5892:3:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1521,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "5892:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 1522,
																	"name": "user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1506,
																	"src": "5906:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "5892:18:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1528,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1524,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "5914:3:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1525,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "5914:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1526,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 40,
																		"src": "5928:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 1527,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5928:7:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "5914:21:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "5892:43:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "556e617574686f72697a6174696f6e2066696e616c697a6174696f6e2e",
															"id": 1530,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5937:31:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_84436fc26343afcba34b0299d7abb22e062969f4b4e797b5c72b96da06765f63",
																"typeString": "literal_string \"Unauthorization finalization.\""
															},
															"value": "Unauthorization finalization."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_84436fc26343afcba34b0299d7abb22e062969f4b4e797b5c72b96da06765f63",
																"typeString": "literal_string \"Unauthorization finalization.\""
															}
														],
														"id": 1519,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5884:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1531,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5884:85:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1532,
												"nodeType": "ExpressionStatement",
												"src": "5884:85:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1538,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1534,
																	"name": "charities_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1509,
																	"src": "5987:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
																		"typeString": "string memory[] memory"
																	}
																},
																"id": 1535,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "5987:17:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 1536,
																	"name": "amounts_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1512,
																	"src": "6008:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																		"typeString": "uint256[] memory"
																	}
																},
																"id": 1537,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "6008:15:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5987:36:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43686172697469657320616e6420616d6f756e747320617272617973206f6620646966666572656e74206c656e6774682e",
															"id": 1539,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6025:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5da211d589ddabeb5f1c7f4c549b1470fe9591737edd7afc8ce635c88450bf29",
																"typeString": "literal_string \"Charities and amounts arrays of different length.\""
															},
															"value": "Charities and amounts arrays of different length."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5da211d589ddabeb5f1c7f4c549b1470fe9591737edd7afc8ce635c88450bf29",
																"typeString": "literal_string \"Charities and amounts arrays of different length.\""
															}
														],
														"id": 1533,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5979:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1540,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5979:98:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1541,
												"nodeType": "ExpressionStatement",
												"src": "5979:98:9"
											},
											{
												"assignments": [
													1543
												],
												"declarations": [
													{
														"constant": false,
														"id": 1543,
														"mutability": "mutable",
														"name": "totalUserAllocation",
														"nameLocation": "6096:19:9",
														"nodeType": "VariableDeclaration",
														"scope": 1684,
														"src": "6088:27:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1542,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6088:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1545,
												"initialValue": {
													"hexValue": "30",
													"id": 1544,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6118:1:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6088:31:9"
											},
											{
												"body": {
													"id": 1577,
													"nodeType": "Block",
													"src": "6175:163:9",
													"statements": [
														{
															"expression": {
																"id": 1561,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1557,
																	"name": "totalUserAllocation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1543,
																	"src": "6189:19:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 1558,
																		"name": "amounts_",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1512,
																		"src": "6212:8:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																			"typeString": "uint256[] memory"
																		}
																	},
																	"id": 1560,
																	"indexExpression": {
																		"id": 1559,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1547,
																		"src": "6221:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6212:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6189:34:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1562,
															"nodeType": "ExpressionStatement",
															"src": "6189:34:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		"id": 1573,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"baseExpression": {
																				"id": 1564,
																				"name": "charities",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1283,
																				"src": "6245:9:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_address_$",
																					"typeString": "mapping(string memory => address)"
																				}
																			},
																			"id": 1568,
																			"indexExpression": {
																				"baseExpression": {
																					"id": 1565,
																					"name": "charities_",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1509,
																					"src": "6255:10:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
																						"typeString": "string memory[] memory"
																					}
																				},
																				"id": 1567,
																				"indexExpression": {
																					"id": 1566,
																					"name": "i",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1547,
																					"src": "6266:1:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint8",
																						"typeString": "uint8"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "6255:13:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_string_memory_ptr",
																					"typeString": "string memory"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "6245:24:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"arguments": [
																				{
																					"hexValue": "307830",
																					"id": 1571,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "6281:3:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0x0"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					}
																				],
																				"id": 1570,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6273:7:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 1569,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "6273:7:9",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1572,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6273:12:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"src": "6245:40:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "417474656d707420746f20646f6e61746520746f20756e6b6e6f776e20636861726974792e",
																		"id": 1574,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6287:39:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_153d7bd66dc8e1f7775d5255c1ca0e21cc6c54b011f14fc47e02c2b280dfb704",
																			"typeString": "literal_string \"Attempt to donate to unknown charity.\""
																		},
																		"value": "Attempt to donate to unknown charity."
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_153d7bd66dc8e1f7775d5255c1ca0e21cc6c54b011f14fc47e02c2b280dfb704",
																			"typeString": "literal_string \"Attempt to donate to unknown charity.\""
																		}
																	],
																	"id": 1563,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "6237:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1575,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6237:90:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1576,
															"nodeType": "ExpressionStatement",
															"src": "6237:90:9"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1553,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1550,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1547,
														"src": "6147:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1551,
															"name": "charities_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1509,
															"src": "6151:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
																"typeString": "string memory[] memory"
															}
														},
														"id": 1552,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "6151:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6147:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1578,
												"initializationExpression": {
													"assignments": [
														1547
													],
													"declarations": [
														{
															"constant": false,
															"id": 1547,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "6140:1:9",
															"nodeType": "VariableDeclaration",
															"scope": 1578,
															"src": "6134:7:9",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"typeName": {
																"id": 1546,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "6134:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1549,
													"initialValue": {
														"hexValue": "30",
														"id": 1548,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6144:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "6134:11:9"
												},
												"loopExpression": {
													"expression": {
														"id": 1555,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "6170:3:9",
														"subExpression": {
															"id": 1554,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1547,
															"src": "6170:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"id": 1556,
													"nodeType": "ExpressionStatement",
													"src": "6170:3:9"
												},
												"nodeType": "ForStatement",
												"src": "6129:209:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1584,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1580,
																"name": "totalUserAllocation",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1543,
																"src": "6356:19:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"baseExpression": {
																	"id": 1581,
																	"name": "balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1279,
																	"src": "6379:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1583,
																"indexExpression": {
																	"id": 1582,
																	"name": "user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1506,
																	"src": "6388:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6379:14:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6356:37:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "546f74616c2066696e616c697a6174696f6e20616d6f756e7420746f6f2068696768",
															"id": 1585,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6395:36:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4369791bf0c646a22574b9ced912dddc331fc6bcea7b07f4a919cfcbbd1d2783",
																"typeString": "literal_string \"Total finalization amount too high\""
															},
															"value": "Total finalization amount too high"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4369791bf0c646a22574b9ced912dddc331fc6bcea7b07f4a919cfcbbd1d2783",
																"typeString": "literal_string \"Total finalization amount too high\""
															}
														],
														"id": 1579,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6348:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1586,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6348:84:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1587,
												"nodeType": "ExpressionStatement",
												"src": "6348:84:9"
											},
											{
												"assignments": [
													1589
												],
												"declarations": [
													{
														"constant": false,
														"id": 1589,
														"mutability": "mutable",
														"name": "totalDonated",
														"nameLocation": "6451:12:9",
														"nodeType": "VariableDeclaration",
														"scope": 1684,
														"src": "6443:20:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1588,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6443:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1591,
												"initialValue": {
													"hexValue": "30",
													"id": 1590,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6466:1:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6443:24:9"
											},
											{
												"body": {
													"id": 1673,
													"nodeType": "Block",
													"src": "6523:1005:9",
													"statements": [
														{
															"assignments": [
																1604
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1604,
																	"mutability": "mutable",
																	"name": "transferAmount",
																	"nameLocation": "6863:14:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 1673,
																	"src": "6855:22:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1603,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6855:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1622,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1621,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"baseExpression": {
																		"id": 1605,
																		"name": "amounts_",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1512,
																		"src": "6880:8:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																			"typeString": "uint256[] memory"
																		}
																	},
																	"id": 1607,
																	"indexExpression": {
																		"id": 1606,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1593,
																		"src": "6889:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6880:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1620,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1612,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"baseExpression": {
																						"id": 1608,
																						"name": "balances",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1279,
																						"src": "6895:8:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																							"typeString": "mapping(address => uint256)"
																						}
																					},
																					"id": 1610,
																					"indexExpression": {
																						"id": 1609,
																						"name": "user",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1506,
																						"src": "6904:4:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "6895:14:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 1611,
																					"name": "totalUserAllocation",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1543,
																					"src": "6912:19:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "6895:36:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1613,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "6894:38:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1618,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"baseExpression": {
																						"id": 1614,
																						"name": "amounts_",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1512,
																						"src": "6936:8:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																							"typeString": "uint256[] memory"
																						}
																					},
																					"id": 1616,
																					"indexExpression": {
																						"id": 1615,
																						"name": "i",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1593,
																						"src": "6945:1:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint8",
																							"typeString": "uint8"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "6936:11:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1617,
																					"name": "totalUserAllocation",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1543,
																					"src": "6950:19:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "6936:33:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1619,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "6935:35:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6894:76:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6880:90:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6855:115:9"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1628,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1623,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1593,
																	"src": "7089:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1627,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 1624,
																			"name": "charities_",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1509,
																			"src": "7094:10:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
																				"typeString": "string memory[] memory"
																			}
																		},
																		"id": 1625,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "7094:17:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 1626,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7114:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "7094:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7089:26:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1638,
															"nodeType": "IfStatement",
															"src": "7085:111:9",
															"trueBody": {
																"id": 1637,
																"nodeType": "Block",
																"src": "7117:79:9",
																"statements": [
																	{
																		"expression": {
																			"id": 1635,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 1629,
																				"name": "transferAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1604,
																				"src": "7135:14:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1634,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"baseExpression": {
																						"id": 1630,
																						"name": "balances",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1279,
																						"src": "7152:8:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																							"typeString": "mapping(address => uint256)"
																						}
																					},
																					"id": 1632,
																					"indexExpression": {
																						"id": 1631,
																						"name": "user",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1506,
																						"src": "7161:4:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "7152:14:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 1633,
																					"name": "totalDonated",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1589,
																					"src": "7169:12:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7152:29:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7135:46:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1636,
																		"nodeType": "ExpressionStatement",
																		"src": "7135:46:9"
																	}
																]
															}
														},
														{
															"assignments": [
																1640
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1640,
																	"mutability": "mutable",
																	"name": "transferSuccess",
																	"nameLocation": "7227:15:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 1673,
																	"src": "7222:20:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 1639,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "7222:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1650,
															"initialValue": {
																"arguments": [
																	{
																		"baseExpression": {
																			"id": 1643,
																			"name": "charities",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1283,
																			"src": "7259:9:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_address_$",
																				"typeString": "mapping(string memory => address)"
																			}
																		},
																		"id": 1647,
																		"indexExpression": {
																			"baseExpression": {
																				"id": 1644,
																				"name": "charities_",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1509,
																				"src": "7269:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
																					"typeString": "string memory[] memory"
																				}
																			},
																			"id": 1646,
																			"indexExpression": {
																				"id": 1645,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1593,
																				"src": "7280:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "7269:13:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "7259:24:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1648,
																		"name": "transferAmount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1604,
																		"src": "7285:14:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1641,
																		"name": "USDC",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1270,
																		"src": "7245:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$338",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1642,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 305,
																	"src": "7245:13:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																"id": 1649,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7245:55:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7222:78:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1652,
																		"name": "transferSuccess",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1640,
																		"src": "7322:15:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "55534443207472616e7366657220746f2063686172697479206661696c65642e",
																		"id": 1653,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7339:34:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_14a8fe9a2dbb1fffa29e0d6e8b0197925f12aed57c256af1a8dca6c479e78c69",
																			"typeString": "literal_string \"USDC transfer to charity failed.\""
																		},
																		"value": "USDC transfer to charity failed."
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_14a8fe9a2dbb1fffa29e0d6e8b0197925f12aed57c256af1a8dca6c479e78c69",
																			"typeString": "literal_string \"USDC transfer to charity failed.\""
																		}
																	],
																	"id": 1651,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "7314:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1654,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7314:60:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1655,
															"nodeType": "ExpressionStatement",
															"src": "7314:60:9"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 1657,
																		"name": "user",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1506,
																		"src": "7410:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"baseExpression": {
																			"id": 1658,
																			"name": "charities_",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1509,
																			"src": "7416:10:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
																				"typeString": "string memory[] memory"
																			}
																		},
																		"id": 1660,
																		"indexExpression": {
																			"id": 1659,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1593,
																			"src": "7427:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "7416:13:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	},
																	{
																		"baseExpression": {
																			"id": 1661,
																			"name": "charities",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1283,
																			"src": "7431:9:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_address_$",
																				"typeString": "mapping(string memory => address)"
																			}
																		},
																		"id": 1665,
																		"indexExpression": {
																			"baseExpression": {
																				"id": 1662,
																				"name": "charities_",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1509,
																				"src": "7441:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
																					"typeString": "string memory[] memory"
																				}
																			},
																			"id": 1664,
																			"indexExpression": {
																				"id": 1663,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1593,
																				"src": "7452:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "7441:13:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "7431:24:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1666,
																		"name": "transferAmount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1604,
																		"src": "7457:14:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1656,
																	"name": "FountainDonation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1314,
																	"src": "7393:16:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_string_memory_ptr_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,string memory,address,uint256)"
																	}
																},
																"id": 1667,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7393:79:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1668,
															"nodeType": "EmitStatement",
															"src": "7388:84:9"
														},
														{
															"expression": {
																"id": 1671,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1669,
																	"name": "totalDonated",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1589,
																	"src": "7487:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 1670,
																	"name": "transferAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1604,
																	"src": "7503:14:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7487:30:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1672,
															"nodeType": "ExpressionStatement",
															"src": "7487:30:9"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1599,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1596,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1593,
														"src": "6495:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1597,
															"name": "charities_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1509,
															"src": "6499:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
																"typeString": "string memory[] memory"
															}
														},
														"id": 1598,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "6499:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6495:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1674,
												"initializationExpression": {
													"assignments": [
														1593
													],
													"declarations": [
														{
															"constant": false,
															"id": 1593,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "6488:1:9",
															"nodeType": "VariableDeclaration",
															"scope": 1674,
															"src": "6482:7:9",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"typeName": {
																"id": 1592,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "6482:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1595,
													"initialValue": {
														"hexValue": "30",
														"id": 1594,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6492:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "6482:11:9"
												},
												"loopExpression": {
													"expression": {
														"id": 1601,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "6518:3:9",
														"subExpression": {
															"id": 1600,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1593,
															"src": "6518:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"id": 1602,
													"nodeType": "ExpressionStatement",
													"src": "6518:3:9"
												},
												"nodeType": "ForStatement",
												"src": "6477:1051:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1680,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1676,
																"name": "totalDonated",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1589,
																"src": "7546:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"baseExpression": {
																	"id": 1677,
																	"name": "balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1279,
																	"src": "7562:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1679,
																"indexExpression": {
																	"id": 1678,
																	"name": "user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1506,
																	"src": "7571:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7562:14:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7546:30:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4d7573742066696e616c697a6520656e746972652062616c616e6365",
															"id": 1681,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7578:30:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2cbc64d78730379255e9e7d1c591fb579c60d5b0ac5bfa5d61d0156b7c148893",
																"typeString": "literal_string \"Must finalize entire balance\""
															},
															"value": "Must finalize entire balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2cbc64d78730379255e9e7d1c591fb579c60d5b0ac5bfa5d61d0156b7c148893",
																"typeString": "literal_string \"Must finalize entire balance\""
															}
														],
														"id": 1675,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7538:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1682,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7538:71:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1683,
												"nodeType": "ExpressionStatement",
												"src": "7538:71:9"
											}
										]
									},
									"functionSelector": "745284ce",
									"id": 1685,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1515,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1514,
												"name": "whenNotPaused",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 147,
												"src": "5847:13:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "5847:13:9"
										},
										{
											"id": 1517,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1516,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 259,
												"src": "5861:12:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "5861:12:9"
										}
									],
									"name": "finalize",
									"nameLocation": "5726:8:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1513,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1506,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "5752:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1685,
												"src": "5744:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1505,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5744:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1509,
												"mutability": "mutable",
												"name": "charities_",
												"nameLocation": "5783:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 1685,
												"src": "5767:26:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
													"typeString": "string[]"
												},
												"typeName": {
													"baseType": {
														"id": 1507,
														"name": "string",
														"nodeType": "ElementaryTypeName",
														"src": "5767:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage_ptr",
															"typeString": "string"
														}
													},
													"id": 1508,
													"nodeType": "ArrayTypeName",
													"src": "5767:8:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
														"typeString": "string[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1512,
												"mutability": "mutable",
												"name": "amounts_",
												"nameLocation": "5821:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1685,
												"src": "5804:25:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1510,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "5804:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1511,
													"nodeType": "ArrayTypeName",
													"src": "5804:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5734:105:9"
									},
									"returnParameters": {
										"id": 1518,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5874:0:9"
									},
									"scope": 1745,
									"src": "5717:1899:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1729,
										"nodeType": "Block",
										"src": "7705:304:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1700,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"id": 1693,
																	"name": "charities",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1283,
																	"src": "7723:9:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_address_$",
																		"typeString": "mapping(string memory => address)"
																	}
																},
																"id": 1695,
																"indexExpression": {
																	"id": 1694,
																	"name": "charityName",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1687,
																	"src": "7733:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7723:22:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "307830",
																		"id": 1698,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7757:3:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0x0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1697,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7749:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1696,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7749:7:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 1699,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7749:12:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7723:38:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43686172697479206e616d6520616c726561647920726567697374657265642e",
															"id": 1701,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7763:34:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_25f88127e817e10e99d297b06cc96586747f59a0b3f3220b37045c6ac970bbbc",
																"typeString": "literal_string \"Charity name already registered.\""
															},
															"value": "Charity name already registered."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_25f88127e817e10e99d297b06cc96586747f59a0b3f3220b37045c6ac970bbbc",
																"typeString": "literal_string \"Charity name already registered.\""
															}
														],
														"id": 1692,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7715:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1702,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7715:83:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1703,
												"nodeType": "ExpressionStatement",
												"src": "7715:83:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1713,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"baseExpression": {
																				"id": 1707,
																				"name": "charitiesReverse",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1287,
																				"src": "7822:16:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_string_storage_$",
																					"typeString": "mapping(address => string storage ref)"
																				}
																			},
																			"id": 1709,
																			"indexExpression": {
																				"id": 1708,
																				"name": "charityAddress",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1689,
																				"src": "7839:14:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "7822:32:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_storage",
																				"typeString": "string storage ref"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_storage",
																				"typeString": "string storage ref"
																			}
																		],
																		"id": 1706,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "7816:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 1705,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "7816:5:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1710,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7816:39:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_storage_ptr",
																		"typeString": "bytes storage pointer"
																	}
																},
																"id": 1711,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "7816:46:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1712,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7866:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "7816:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43686172697479206164647265737320616c726561647920726567697374657265642e",
															"id": 1714,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7869:37:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_aba46a271726356f0b4f74164ad8f0f484bb2763982464038d0ddb75a56f4356",
																"typeString": "literal_string \"Charity address already registered.\""
															},
															"value": "Charity address already registered."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_aba46a271726356f0b4f74164ad8f0f484bb2763982464038d0ddb75a56f4356",
																"typeString": "literal_string \"Charity address already registered.\""
															}
														],
														"id": 1704,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7808:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1715,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7808:99:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1716,
												"nodeType": "ExpressionStatement",
												"src": "7808:99:9"
											},
											{
												"expression": {
													"id": 1721,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1717,
															"name": "charities",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1283,
															"src": "7917:9:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_address_$",
																"typeString": "mapping(string memory => address)"
															}
														},
														"id": 1719,
														"indexExpression": {
															"id": 1718,
															"name": "charityName",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1687,
															"src": "7927:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7917:22:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1720,
														"name": "charityAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1689,
														"src": "7942:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7917:39:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1722,
												"nodeType": "ExpressionStatement",
												"src": "7917:39:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1726,
															"name": "charityAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1689,
															"src": "7987:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1723,
															"name": "charityAddresses",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1290,
															"src": "7966:16:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressSet_$672_storage",
																"typeString": "struct EnumerableSet.AddressSet storage ref"
															}
														},
														"id": 1725,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "add",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 699,
														"src": "7966:20:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_AddressSet_$672_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$672_storage_ptr_$",
															"typeString": "function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"
														}
													},
													"id": 1727,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7966:36:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1728,
												"nodeType": "ExpressionStatement",
												"src": "7966:36:9"
											}
										]
									},
									"functionSelector": "7aed7746",
									"id": 1730,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "registerCharity",
									"nameLocation": "7631:15:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1690,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1687,
												"mutability": "mutable",
												"name": "charityName",
												"nameLocation": "7661:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 1730,
												"src": "7647:25:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1686,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7647:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1689,
												"mutability": "mutable",
												"name": "charityAddress",
												"nameLocation": "7682:14:9",
												"nodeType": "VariableDeclaration",
												"scope": 1730,
												"src": "7674:22:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1688,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7674:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7646:51:9"
									},
									"returnParameters": {
										"id": 1691,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7705:0:9"
									},
									"scope": 1745,
									"src": "7622:387:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1743,
										"nodeType": "Block",
										"src": "8094:46:9",
										"statements": [
											{
												"expression": {
													"id": 1741,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1737,
														"name": "userBalance_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1735,
														"src": "8104:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"baseExpression": {
															"id": 1738,
															"name": "balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1279,
															"src": "8119:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1740,
														"indexExpression": {
															"id": 1739,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1732,
															"src": "8128:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "8119:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8104:29:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1742,
												"nodeType": "ExpressionStatement",
												"src": "8104:29:9"
											}
										]
									},
									"functionSelector": "f8b2cb4f",
									"id": 1744,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBalance",
									"nameLocation": "8026:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1733,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1732,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "8045:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1744,
												"src": "8037:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1731,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8037:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8036:14:9"
									},
									"returnParameters": {
										"id": 1736,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1735,
												"mutability": "mutable",
												"name": "userBalance_",
												"nameLocation": "8080:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 1744,
												"src": "8072:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1734,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8072:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8071:22:9"
									},
									"scope": 1745,
									"src": "8017:123:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 1746,
							"src": "531:7611:9",
							"usedErrors": []
						}
					],
					"src": "41:8101:9"
				},
				"id": 9
			},
			"contracts/weth.sol": {
				"ast": {
					"absolutePath": "contracts/weth.sol",
					"exportedSymbols": {
						"IERC20": [
							338
						],
						"IWETH": [
							1759
						]
					},
					"id": 1760,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1747,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:10"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 1748,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1760,
							"sourceUnit": 339,
							"src": "66:56:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1749,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 338,
										"src": "143:6:10"
									},
									"id": 1750,
									"nodeType": "InheritanceSpecifier",
									"src": "143:6:10"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1759,
							"linearizedBaseContracts": [
								1759,
								338
							],
							"name": "IWETH",
							"nameLocation": "134:5:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "d0e30db0",
									"id": 1753,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nameLocation": "165:7:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1751,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "172:2:10"
									},
									"returnParameters": {
										"id": 1752,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "191:0:10"
									},
									"scope": 1759,
									"src": "156:36:10",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "2e1a7d4d",
									"id": 1758,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nameLocation": "207:8:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1756,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1755,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "224:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1758,
												"src": "216:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1754,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "216:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "215:16:10"
									},
									"returnParameters": {
										"id": 1757,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "240:0:10"
									},
									"scope": 1759,
									"src": "198:43:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1760,
							"src": "124:119:10",
							"usedErrors": []
						}
					],
					"src": "33:210:10"
				},
				"id": 10
			}
		}
	}
}