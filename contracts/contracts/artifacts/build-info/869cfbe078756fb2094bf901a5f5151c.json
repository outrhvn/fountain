{
	"id": "869cfbe078756fb2094bf901a5f5151c",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"evmVersion": "byzantium",
			"viaIR": true
		},
		"sources": {
			"contracts/fountain.sol": {
				"content": "// SPDX-License-Identifier: Proprietary\n\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"@1inch/solidity-utils/contracts/interfaces/IWETH.sol\";\n\ncontract Serenity is Ownable, Pausable, ReentrancyGuard {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    address public constant WETH9 = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n\n    ISwapRouter public immutable swapRouter;\n    uint256 ephemeralGasMoneyAmount;\n    \n    mapping (address => uint256) private balances;\n    mapping (uint8 => address) private charities;\n\n    constructor(ISwapRouter _swapRouter, uint256 _ephemeralGasMoneyAmount) {\n        swapRouter = _swapRouter;\n        ephemeralGasMoneyAmount = _ephemeralGasMoneyAmount;\n    }\n\n    function deposit(\n        // params unrelated to swap\n        address ephemeralWalletAddress,\n        // shared swap params\n        address tokenIn,\n        uint256 totalAmountIn, \n        uint256 deadline,\n        // eth swap params\n        uint256 ethSwapAmountInMax,\n        uint24 ethSwapPoolFee,\n        // usdc swap params\n        uint24 usdcSwapPoolFee,\n        uint256 usdcSwapAmountOutMinimum\n        ) public whenNotPaused nonReentrant {\n\n        // Transfer the specified amount of token to this contract.\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, address(this), totalAmountIn);\n        \n        // Approve router to spend totalAmountIn from this contract\n        TransferHelper.safeApprove(tokenIn, address(swapRouter), totalAmountIn);\n\n        // Construct \"exact output\" swap params to get some gas moneys.\n        ISwapRouter.ExactOutputSingleParams memory ethSwapParams =\n            ISwapRouter.ExactOutputSingleParams({\n                tokenIn: tokenIn,\n                tokenOut: WETH9,\n                fee: ethSwapPoolFee,\n                recipient: address(this),\n                deadline: deadline,\n                amountOut: ephemeralGasMoneyAmount,\n                amountInMaximum: ethSwapAmountInMax,\n                // inactive, but this value can be used to set the limit for the price the swap will push the pool to,\n                // which can help protect against price impact or for setting up logic in a variety of price-relevant mechanisms.\n                sqrtPriceLimitX96: 0\n            });\n\n        // Executes the gas money swap returning the amountIn needed to spend to receive the desired amountOut.\n        uint256 tokenAmountSpentOnEthSwap = swapRouter.exactOutputSingle(ethSwapParams);\n\n        // Unwrap WETH9\n        IWETH(WETH9).withdraw(ephemeralGasMoneyAmount);\n\n        // Send to ephemeralGasMoneyAmount to ephemeral wallet\n        (bool ephemeralGasSent, ) = payable(ephemeralWalletAddress).call{value: ephemeralGasMoneyAmount}(\"\");\n        require(ephemeralGasSent, \"Failed to send gas to ephemeral wallet.\");\n\n        // Calculate remaining amount of token to swap for USDC\n        uint256 remainingAmountIn = totalAmountIn - tokenAmountSpentOnEthSwap;\n        \n        // Create params to swap remaining token amount for USDC\n        ISwapRouter.ExactInputSingleParams memory params =\n            ISwapRouter.ExactInputSingleParams({\n                tokenIn: tokenIn,\n                tokenOut: USDC,\n                fee: usdcSwapPoolFee,\n                recipient: address(this),\n                deadline: deadline,\n                amountIn: remainingAmountIn,\n                amountOutMinimum: usdcSwapAmountOutMinimum,\n                // inactive, but this value can be used to set the limit for the price the swap will push the pool to,\n                // which can help protect against price impact or for setting up logic in a variety of price-relevant mechanisms.\n                sqrtPriceLimitX96: 0 \n            });\n\n        // How much USDC we got\n        uint256 amountOut = swapRouter.exactInputSingle(params); \n        \n        balances[ephemeralWalletAddress] += amountOut;\n    }\n\n    function finalize(\n        address user, \n        uint8[] memory charities_, \n        uint256[] memory amounts_, \n        bool autoAllocateRemainder\n        ) public whenNotPaused nonReentrant {\n\n        require(charities_.length == amounts_.length, \"Charities and amounts arrays of different length.\");\n\n        uint256 amountsSum = 0;\n        for (uint256 i = 0; i < amounts_.length; i++) {\n            amountsSum += amounts_[i];\n        }\n\n        require(amountsSum <= balances[user], \"Total finalization amount too high\");\n        require(autoAllocateRemainder || amountsSum == balances[user], \"Total finalization amount too low.\");\n        \n        for (uint256 i = 0; i < charities_.length; i++) { \n            bool transferSuccess = IERC20(USDC).transfer(charities[charities_[i]], amounts_[i]);\n            require(transferSuccess, \"USDC transfer to charity failed.\");\n        }\n\n        // deal with autoAllocateRemainder\n    }\n\n    function getBalance(address user) public view returns (uint256 userBalance_) {\n        userBalance_ = balances[user];\n    }\n}"
			},
			"@1inch/solidity-utils/contracts/interfaces/IWETH.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\npragma abicoder v1;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256 amount) external;\n}\n"
			},
			"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"
			},
			"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/security/Pausable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"@1inch/solidity-utils/contracts/interfaces/IWETH.sol": {
				"IWETH": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "deposit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"deposit()": "d0e30db0",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"withdraw(uint256)": "2e1a7d4d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@1inch/solidity-utils/contracts/interfaces/IWETH.sol\":\"IWETH\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@1inch/solidity-utils/contracts/interfaces/IWETH.sol\":{\"keccak256\":\"0xa63626fa2564ae99f9a9a8dc4f163583882f5ab1a96610344a57d8fb6207f755\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://57e6ee2d7423555dfbbbae0d83b1ed364096f7de9c7af9847d64597fbce87a36\",\"dweb:/ipfs/QmY8fwxQabJY73NKDZV8njgtXy6dFH2beaRNpuUFddxE9R\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 22,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/Pausable.sol": {
				"Pausable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.",
						"events": {
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract in unpaused state."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"paused()": "5c975abb"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract in unpaused state.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/Pausable.sol\":\"Pausable\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ddabb16009cd17eaca3143feadf450ac13e72919ebe2ca50e00f61cb78bc004\",\"dweb:/ipfs/QmSPwPxX7d6TTWakN5jy5wsaGkS1y9TW8fuhGSraMkLk2B\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 145,
								"contract": "@openzeppelin/contracts/security/Pausable.sol:Pausable",
								"label": "_paused",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 246,
								"contract": "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
				"EnumerableSet": {
					"abi": [],
					"devdoc": {
						"details": "Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ====  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1228:12682  library EnumerableSet {... */\n  mstore(0x40, 0x80)\n  jumpi(tag_1, iszero(callvalue))\n  0x00\n  dup1\n  revert\ntag_1:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x80\n  codecopy\n  address\n  0x80\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  dup1\n  0x80\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":1228:12682  library EnumerableSet {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa36469706673582212205fb29fc6e277b5226f54bcbe8f4481d197a6d685eaf8c9f0dde5ff0cfbd8b0d06c6578706572696d656e74616cf564736f6c63430008070041\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60806040523415600e57600080fd5b604d8060216080393060805050806080f3fe6080604052600080fdfea36469706673582212205fb29fc6e277b5226f54bcbe8f4481d197a6d685eaf8c9f0dde5ff0cfbd8b0d06c6578706572696d656e74616cf564736f6c63430008070041",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH1 0xE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4D DUP1 PUSH1 0x21 PUSH1 0x80 CODECOPY ADDRESS PUSH1 0x80 POP POP DUP1 PUSH1 0x80 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5F 0xB2 SWAP16 0xC6 0xE2 PUSH24 0xB5226F54BCBE8F4481D197A6D685EAF8C9F0DDE5FF0CFBD8 0xB0 0xD0 PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP COINBASE ",
							"sourceMap": "1228:11454:6:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600080fdfea36469706673582212205fb29fc6e277b5226f54bcbe8f4481d197a6d685eaf8c9f0dde5ff0cfbd8b0d06c6578706572696d656e74616cf564736f6c63430008070041",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5F 0xB2 SWAP16 0xC6 0xE2 PUSH24 0xB5226F54BCBE8F4481D197A6D685EAF8C9F0DDE5FF0CFBD8 0xB0 0xD0 PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP COINBASE ",
							"sourceMap": "1228:11454:6:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "15400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"_add(struct EnumerableSet.Set storage pointer,bytes32)": "infinite",
								"_at(struct EnumerableSet.Set storage pointer,uint256)": "infinite",
								"_contains(struct EnumerableSet.Set storage pointer,bytes32)": "infinite",
								"_length(struct EnumerableSet.Set storage pointer)": "infinite",
								"_remove(struct EnumerableSet.Set storage pointer,bytes32)": "infinite",
								"_values(struct EnumerableSet.Set storage pointer)": "infinite",
								"add(struct EnumerableSet.AddressSet storage pointer,address)": "infinite",
								"add(struct EnumerableSet.Bytes32Set storage pointer,bytes32)": "infinite",
								"add(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"at(struct EnumerableSet.AddressSet storage pointer,uint256)": "infinite",
								"at(struct EnumerableSet.Bytes32Set storage pointer,uint256)": "infinite",
								"at(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"contains(struct EnumerableSet.AddressSet storage pointer,address)": "infinite",
								"contains(struct EnumerableSet.Bytes32Set storage pointer,bytes32)": "infinite",
								"contains(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"length(struct EnumerableSet.AddressSet storage pointer)": "infinite",
								"length(struct EnumerableSet.Bytes32Set storage pointer)": "infinite",
								"length(struct EnumerableSet.UintSet storage pointer)": "infinite",
								"remove(struct EnumerableSet.AddressSet storage pointer,address)": "infinite",
								"remove(struct EnumerableSet.Bytes32Set storage pointer,bytes32)": "infinite",
								"remove(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"values(struct EnumerableSet.AddressSet storage pointer)": "infinite",
								"values(struct EnumerableSet.Bytes32Set storage pointer)": "infinite",
								"values(struct EnumerableSet.UintSet storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1228,
									"end": 12682,
									"name": "PUSH",
									"source": 6,
									"value": "80"
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "CALLVALUE",
									"source": 6
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "PUSH",
									"source": 6,
									"value": "80"
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "PUSH",
									"source": 6,
									"value": "80"
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "ASSIGNIMMUTABLE",
									"source": 6,
									"value": "library_deploy_address"
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "PUSH",
									"source": 6,
									"value": "80"
								},
								{
									"begin": 1228,
									"end": 12682,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a36469706673582212205fb29fc6e277b5226f54bcbe8f4481d197a6d685eaf8c9f0dde5ff0cfbd8b0d06c6578706572696d656e74616cf564736f6c63430008070041",
									".code": [
										{
											"begin": 1228,
											"end": 12682,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 1228,
											"end": 12682,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1228,
											"end": 12682,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 12682,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1228,
											"end": 12682,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 12682,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ====  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d4831d777a29ebdf9f2caecd70e74b97bff1b70e53622fd0a02aed01e21c8271\",\"dweb:/ipfs/QmUqurVVnCc7XkMxb2k23TVQUtuhHZduJ3hTZarTJrqU24\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
				"IUniswapV3SwapCallback": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							}
						},
						"title": "Callback for IUniswapV3PoolActions#swap",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Callback for IUniswapV3PoolActions#swap\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Any contract that calls IUniswapV3PoolActions#swap must implement this interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":\"IUniswapV3SwapCallback\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							}
						},
						"notice": "Any contract that calls IUniswapV3PoolActions#swap must implement this interface",
						"version": 1
					}
				}
			},
			"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
				"ISwapRouter": {
					"abi": [
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes",
											"name": "path",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountIn",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOutMinimum",
											"type": "uint256"
										}
									],
									"internalType": "struct ISwapRouter.ExactInputParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactInput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountIn",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOutMinimum",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceLimitX96",
											"type": "uint160"
										}
									],
									"internalType": "struct ISwapRouter.ExactInputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactInputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes",
											"name": "path",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOut",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountInMaximum",
											"type": "uint256"
										}
									],
									"internalType": "struct ISwapRouter.ExactOutputParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactOutput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOut",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountInMaximum",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceLimitX96",
											"type": "uint160"
										}
									],
									"internalType": "struct ISwapRouter.ExactOutputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactOutputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"exactInput((bytes,address,uint256,uint256,uint256))": {
								"params": {
									"params": "The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"params": {
									"params": "The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"exactOutput((bytes,address,uint256,uint256,uint256))": {
								"params": {
									"params": "The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata"
								},
								"returns": {
									"amountIn": "The amount of the input token"
								}
							},
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"params": {
									"params": "The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata"
								},
								"returns": {
									"amountIn": "The amount of the input token"
								}
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							}
						},
						"title": "Router token swapping functionality",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"exactInput((bytes,address,uint256,uint256,uint256))": "c04b8d59",
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": "414bf389",
							"exactOutput((bytes,address,uint256,uint256,uint256))": "f28c0498",
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": "db3e2198",
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactOutputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Router token swapping functionality\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another along the specified path\"},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another token\"},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\"},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another token\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Functions for swapping tokens via Uniswap V3\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":\"ISwapRouter\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a8a2c3e55965b61bcd91993d8e1d5d34b8b8a63e0fdfce87a85f6af92526fd53\",\"dweb:/ipfs/QmQj2CSCSwqDSU4KMNWxGsN2336Cy64WgpV1X1EHXNZWxM\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"exactInput((bytes,address,uint256,uint256,uint256))": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another along the specified path"
							},
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another token"
							},
							"exactOutput((bytes,address,uint256,uint256,uint256))": {
								"notice": "Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)"
							},
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"notice": "Swaps as little as possible of one token for `amountOut` of another token"
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							}
						},
						"notice": "Functions for swapping tokens via Uniswap V3",
						"version": 1
					}
				}
			},
			"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol": {
				"TransferHelper": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":129:2537  library TransferHelper {... */\n  mstore(0x40, 0x80)\n  jumpi(tag_1, iszero(callvalue))\n  0x00\n  dup1\n  revert\ntag_1:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x80\n  codecopy\n  address\n  0x80\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  dup1\n  0x80\n  return\nstop\n\nsub_0: assembly {\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":129:2537  library TransferHelper {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa3646970667358221220cef0699676f1bb82bf37325669cc19a45719335e91bfe9e169b6a65f3037b54c6c6578706572696d656e74616cf564736f6c63430008070041\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60806040523415600e57600080fd5b604d8060216080393060805050806080f3fe6080604052600080fdfea3646970667358221220cef0699676f1bb82bf37325669cc19a45719335e91bfe9e169b6a65f3037b54c6c6578706572696d656e74616cf564736f6c63430008070041",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH1 0xE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4D DUP1 PUSH1 0x21 PUSH1 0x80 CODECOPY ADDRESS PUSH1 0x80 POP POP DUP1 PUSH1 0x80 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCE CREATE PUSH10 0x9676F1BB82BF37325669 0xCC NOT LOG4 JUMPI NOT CALLER 0x5E SWAP2 0xBF 0xE9 0xE1 PUSH10 0xB6A65F3037B54C6C6578 PUSH17 0x6572696D656E74616CF564736F6C634300 ADDMOD SMOD STOP COINBASE ",
							"sourceMap": "129:2408:9:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600080fdfea3646970667358221220cef0699676f1bb82bf37325669cc19a45719335e91bfe9e169b6a65f3037b54c6c6578706572696d656e74616cf564736f6c63430008070041",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCE CREATE PUSH10 0x9676F1BB82BF37325669 0xCC NOT LOG4 JUMPI NOT CALLER 0x5E SWAP2 0xBF 0xE9 0xE1 PUSH10 0xB6A65F3037B54C6C6578 PUSH17 0x6572696D656E74616CF564736F6C634300 ADDMOD SMOD STOP COINBASE ",
							"sourceMap": "129:2408:9:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "15400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"safeApprove(address,address,uint256)": "infinite",
								"safeTransfer(address,address,uint256)": "infinite",
								"safeTransferETH(address,uint256)": "infinite",
								"safeTransferFrom(address,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "CALLVALUE",
									"source": 9
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "ASSIGNIMMUTABLE",
									"source": 9,
									"value": "library_deploy_address"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a3646970667358221220cef0699676f1bb82bf37325669cc19a45719335e91bfe9e169b6a65f3037b54c6c6578706572696d656e74616cf564736f6c63430008070041",
									".code": [
										{
											"begin": 129,
											"end": 2537,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":\"TransferHelper\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://da1d1e81e5bf534f0bf2934b3193db6cb1933f91ec006d2b88e9ad10a617a2d2\",\"dweb:/ipfs/QmcPBk47QLMFWcX2y2S9eMFsJgoYWBd3R8ey55Bgmv6w6v\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/fountain.sol": {
				"Serenity": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "contract ISwapRouter",
									"name": "_swapRouter",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_ephemeralGasMoneyAmount",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "USDC",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "ephemeralWalletAddress",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenIn",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "totalAmountIn",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "ethSwapAmountInMax",
									"type": "uint256"
								},
								{
									"internalType": "uint24",
									"name": "ethSwapPoolFee",
									"type": "uint24"
								},
								{
									"internalType": "uint24",
									"name": "usdcSwapPoolFee",
									"type": "uint24"
								},
								{
									"internalType": "uint256",
									"name": "usdcSwapAmountOutMinimum",
									"type": "uint256"
								}
							],
							"name": "deposit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "uint8[]",
									"name": "charities_",
									"type": "uint8[]"
								},
								{
									"internalType": "uint256[]",
									"name": "amounts_",
									"type": "uint256[]"
								},
								{
									"internalType": "bool",
									"name": "autoAllocateRemainder",
									"type": "bool"
								}
							],
							"name": "finalize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "getBalance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "userBalance_",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "swapRouter",
							"outputs": [
								{
									"internalType": "contract ISwapRouter",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n  mstore(0x40, 0xa0)\n  jumpi(tag_1, iszero(callvalue))\n  0x00\n  dup1\n  revert\ntag_1:\n  bytecodeSize\n  dup1\n  codesize\n  sub\n  not(0x1f)\n  0x1f\n  dup3\n  add\n  and\n  0xa0\n  add\n  0xa0\n  dup2\n  lt\n  0xffffffffffffffff\n  dup3\n  gt\n  or\n  iszero\n  tag_2\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x41)\n  revert(0x00, 0x24)\ntag_2:\n  0x40\n  mstore\n  dup1\n  dup3\n  0xa0\n  codecopy\n  0x40\n  dup2\n  slt\n  iszero\n  tag_3\n  jumpi\n  0x00\n  dup1\n  revert\ntag_3:\n  pop\n  pop\n  mload(0xa0)\n  sub(exp(0x02, 0xa0), 0x01)\n  dup2\n  and\n  dup2\n  eq\n  tag_4\n  jumpi\n  0x00\n  dup1\n  revert\ntag_4:\n  tag_5\n  mload(0xc0)\n  dup3\n  tag_6\n  jump\t// in\ntag_5:\n  pop\n  mload(0x40)\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  dup4\n  codecopy\n  mload(0x80)\n  dup3\n  assignImmutable(\"0x059720e82fda8e11338580d5bfef39c116fbdd4bf60743e75b94221573318122\")\n  dup1\n  dup3\n  return\n    /* \"contracts/fountain.sol\":1039:1211  constructor(ISwapRouter _swapRouter, uint256 _ephemeralGasMoneyAmount) {... */\ntag_6:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  0x00\n    /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n  dup1\n  sload\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n  not(sub(exp(0x02, 0xa0), 0x01))\n    /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n  dup3\n  and\n  dup2\n  or\n  dup4\n  sstore\n  mload(0x40)\n  swap2\n  swap3\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  swap1\n  swap2\n  sub(exp(0x02, 0xa0), 0x01)\n    /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n  dup5\n  and\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap2\n  log3\n  not(sub(exp(0x02, 0xa8), 0x01))\n    /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n  and\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n  not(mul(0xff, exp(0x02, 0xa0)))\n    /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n  and\n  or\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  0x00\n    /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n  sstore\n  0x01\n  dup1\n  sstore\n    /* \"contracts/fountain.sol\":1120:1144  swapRouter = _swapRouter */\n  0x80\n  mstore\n    /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n  0x02\n  sstore\n    /* \"contracts/fountain.sol\":1039:1211  constructor(ISwapRouter _swapRouter, uint256 _ephemeralGasMoneyAmount) {... */\n  jump\t// out\nstop\n\nsub_0: assembly {\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x40\n      0x80\n      dup2\n      mstore\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      0x00\n      0x0100000000000000000000000000000000000000000000000000000000\n      dup2\n      calldataload\n      div\n      0x480a6fdc\n      dup2\n      eq\n      tag_3\n      jumpi\n      0x4aa4a4fc\n      dup2\n      eq\n      tag_4\n      jumpi\n      0x5c975abb\n      dup2\n      eq\n      tag_5\n      jumpi\n      0x715018a6\n      dup2\n      eq\n      tag_6\n      jumpi\n      0x89a30271\n      dup2\n      eq\n      tag_7\n      jumpi\n      0x8da5cb5b\n      dup2\n      eq\n      tag_8\n      jumpi\n      0x8de9c372\n      dup2\n      eq\n      tag_9\n      jumpi\n      0xc31c9c07\n      dup2\n      eq\n      tag_10\n      jumpi\n      0xf2fde38b\n      dup2\n      eq\n      tag_11\n      jumpi\n      0xf8b2cb4f\n      dup2\n      eq\n      tag_12\n      jumpi\n      jump(tag_2)\n    tag_3:\n      jumpi(tag_13, iszero(callvalue))\n      dup2\n      dup3\n      revert\n    tag_13:\n      tag_14\n      calldatasize\n      tag_15\n      jump\t// in\n    tag_14:\n        /* \"contracts/fountain.sol\":1217:4382  function deposit(... */\n      tag_16\n      dup2\n      dup4\n      dup6\n      dup8\n      dup10\n      dup12\n      dup14\n      dup16\n      tag_17\n      jump\t// in\n    tag_16:\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup2\n      dup4\n      mload\n      return\n    tag_4:\n      jumpi(tag_18, iszero(callvalue))\n      dup2\n      dup3\n      revert\n    tag_18:\n      tag_19\n      calldatasize\n      tag_20\n      jump\t// in\n    tag_19:\n      dup3\n      mload\n        /* \"contracts/fountain.sol\":722:764  0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 */\n      0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup2\n      mstore\n      0x20\n      dup2\n      return\n    tag_21:\n      sub\n      dup2\n      return\n    tag_5:\n      jumpi(tag_23, iszero(callvalue))\n      dup2\n      dup3\n      revert\n    tag_23:\n      tag_24\n      calldatasize\n      tag_20\n      jump\t// in\n    tag_24:\n      0xff\n      0x010000000000000000000000000000000000000000\n      dup4\n      sload\n      div\n      and\n      dup4\n      mload\n      dup1\n      tag_21\n      dup4\n      dup4\n      swap1\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      jump\n    tag_6:\n      jumpi(tag_27, iszero(callvalue))\n      dup2\n      dup3\n      revert\n    tag_27:\n      tag_28\n      calldatasize\n      tag_20\n      jump\t// in\n    tag_28:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n      tag_29\n      tag_30\n      jump\t// in\n    tag_29:\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup2\n      dup4\n      mload\n      return\n    tag_7:\n      jumpi(tag_31, iszero(callvalue))\n      dup2\n      dup3\n      revert\n    tag_31:\n      tag_32\n      calldatasize\n      tag_20\n      jump\t// in\n    tag_32:\n      dup3\n      mload\n        /* \"contracts/fountain.sol\":801:843  0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48 */\n      0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup2\n      mstore\n      0x20\n      dup2\n      return\n    tag_8:\n      jumpi(tag_35, iszero(callvalue))\n      dup2\n      dup3\n      revert\n    tag_35:\n      tag_36\n      calldatasize\n      tag_20\n      jump\t// in\n    tag_36:\n      dup2\n      sload\n      dup4\n      mload\n      sub(exp(0x02, 0xa0), 0x01)\n      swap1\n      swap2\n      and\n      dup1\n      dup3\n      mstore\n      swap1\n      0x20\n      dup2\n      return\n    tag_9:\n      jumpi(tag_39, iszero(callvalue))\n      dup2\n      dup3\n      revert\n    tag_39:\n      tag_40\n      calldatasize\n      tag_41\n      jump\t// in\n    tag_40:\n        /* \"contracts/fountain.sol\":4388:5324  function finalize(... */\n      tag_42\n      dup2\n      dup4\n      dup6\n      dup8\n      tag_43\n      jump\t// in\n    tag_42:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup2\n      dup4\n      mload\n      return\n    tag_10:\n      jumpi(tag_44, iszero(callvalue))\n      dup2\n      dup3\n      revert\n    tag_44:\n      tag_45\n      calldatasize\n      tag_20\n      jump\t// in\n    tag_45:\n      dup3\n      mload\n        /* \"contracts/fountain.sol\":850:889  ISwapRouter public immutable swapRouter */\n      immutable(\"0x059720e82fda8e11338580d5bfef39c116fbdd4bf60743e75b94221573318122\")\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      and\n      dup2\n      mstore\n      0x20\n      dup2\n      return\n    tag_11:\n      jumpi(tag_47, iszero(callvalue))\n      dup2\n      dup3\n      revert\n    tag_47:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      tag_29\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      tag_49\n      calldatasize\n      tag_50\n      jump\t// in\n    tag_49:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      tag_51\n      jump\t// in\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n    tag_12:\n      jumpi(tag_52, iszero(callvalue))\n      dup2\n      dup3\n      revert\n    tag_52:\n      tag_53\n      tag_54\n      calldatasize\n      tag_50\n      jump\t// in\n    tag_54:\n      sub(exp(0x02, 0xa0), 0x01)\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/fountain.sol\":5432:5440  balances */\n      0x03\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"contracts/fountain.sol\":5330:5453  function getBalance(address user) public view returns (uint256 userBalance_) {... */\n      jump\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n    tag_53:\n      dup4\n      mload\n      dup2\n      dup2\n      mstore\n      0x20\n      dup2\n      return\n    tag_2:\n      pop\n      pop\n    tag_1:\n      pop\n      0x00\n      dup1\n      revert\n    tag_59:\n      calldataload(0x04)\n      sub(exp(0x02, 0xa0), 0x01)\n      dup2\n      and\n      dup2\n      eq\n      tag_61\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_61:\n      swap1\n      jump\t// out\n    tag_62:\n      0x00\n      dup3\n      0x1f\n      dup4\n      add\n      slt\n      tag_64\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_64:\n      dup2\n      calldataload\n      tag_65\n      dup2\n      tag_66\n      jump\t// in\n    tag_65:\n      mload(0x40)\n      tag_67\n      dup3\n      dup3\n      tag_68\n      jump\t// in\n    tag_67:\n      dup3\n      dup2\n      mstore\n      0x20\n      dup1\n      dup3\n      add\n      swap3\n      pop\n      dup6\n      dup2\n      add\n      dup2\n      dup6\n      mul\n      dup8\n      add\n      dup3\n      add\n      dup9\n      lt\n      iszero\n      tag_69\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_69:\n      0x00\n    tag_70:\n      dup6\n      dup2\n      lt\n      iszero\n      tag_72\n      jumpi\n      dup2\n      calldataload\n      dup6\n      mstore\n      swap4\n      dup3\n      add\n      swap4\n      swap1\n      dup3\n      add\n      swap1\n      0x01\n      add\n      jump(tag_70)\n    tag_72:\n      pop\n      swap2\n      swap8\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n    tag_73:\n      calldataload(0x64)\n      tag_61\n      dup2\n      tag_76\n      jump\t// in\n    tag_20:\n      0x00\n      not(0x03)\n      dup3\n      add\n      slt\n      iszero\n      tag_78\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_78:\n      pop\n      jump\t// out\n    tag_79:\n      0x00\n      dup2\n      dup4\n      sub\n      slt\n      iszero\n      tag_81\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_81:\n      pop\n      pop\n      jump\t// out\n    tag_50:\n      0x00\n      0x20\n      not(0x03)\n      dup4\n      add\n      slt\n      iszero\n      tag_83\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_83:\n      calldataload(0x04)\n      sub(exp(0x02, 0xa0), 0x01)\n      dup2\n      and\n      dup2\n      eq\n      tag_84\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_84:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n    tag_15:\n      0x00\n      dup1\n      dup1\n      dup1\n      dup1\n      dup1\n      dup1\n      dup1\n      0x0100\n      not(0x03)\n      dup11\n      add\n      slt\n      iszero\n      tag_86\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_86:\n      calldataload(0x04)\n      sub(exp(0x02, 0xa0), 0x01)\n      dup1\n      dup3\n      and\n      dup3\n      eq\n      tag_87\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_87:\n      swap1\n      swap9\n      pop\n      calldataload(0x24)\n      swap1\n      dup1\n      dup3\n      and\n      dup3\n      eq\n      tag_88\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_88:\n      pop\n      swap7\n      pop\n      calldataload(0x44)\n      swap6\n      pop\n      calldataload(0x64)\n      swap5\n      pop\n      calldataload(0x84)\n      swap4\n      pop\n      calldataload(0xa4)\n      0xffffff\n      dup1\n      dup3\n      and\n      dup3\n      eq\n      tag_89\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_89:\n      swap1\n      swap4\n      pop\n      calldataload(0xc4)\n      swap1\n      dup1\n      dup3\n      and\n      dup3\n      eq\n      tag_90\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_90:\n      pop\n      dup1\n      swap3\n      pop\n      pop\n      calldataload(0xe4)\n      swap1\n      pop\n      swap2\n      swap4\n      swap6\n      swap8\n      pop\n      swap2\n      swap4\n      swap6\n      swap8\n      jump\t// out\n    tag_41:\n      0x00\n      dup1\n      dup1\n      dup1\n      0x80\n      not(0x03)\n      dup7\n      add\n      slt\n      iszero\n      tag_92\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_92:\n      tag_93\n      tag_59\n      jump\t// in\n    tag_93:\n      swap4\n      pop\n      calldataload(0x24)\n      0xffffffffffffffff\n      dup1\n      dup3\n      gt\n      iszero\n      tag_94\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_94:\n      dup7\n      0x23\n      dup4\n      add\n      slt\n      tag_95\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_95:\n      dup2\n      0x04\n      add\n      calldataload\n      tag_96\n      dup2\n      tag_66\n      jump\t// in\n    tag_96:\n      mload(0x40)\n      tag_97\n      dup3\n      dup3\n      tag_68\n      jump\t// in\n    tag_97:\n      dup3\n      dup2\n      mstore\n      0x20\n      dup1\n      dup3\n      add\n      swap3\n      pop\n      0x24\n      dup7\n      dup2\n      add\n      swap1\n      dup3\n      dup7\n      mul\n      dup9\n      add\n      add\n      dup13\n      lt\n      iszero\n      tag_98\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_98:\n      0x00\n      swap7\n      pop\n    tag_99:\n      dup5\n      dup8\n      lt\n      iszero\n      tag_101\n      jumpi\n      dup1\n      calldataload\n      0xff\n      dup2\n      and\n      dup2\n      eq\n      tag_102\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_102:\n      dup5\n      mstore\n      0x01\n      swap7\n      swap1\n      swap7\n      add\n      swap6\n      swap3\n      dup2\n      add\n      swap3\n      dup2\n      add\n      jump(tag_99)\n    tag_101:\n      pop\n      swap1\n      swap8\n      pop\n      pop\n      calldataload(0x44)\n      swap4\n      pop\n      pop\n      pop\n      dup1\n      dup3\n      gt\n      iszero\n      tag_103\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_103:\n      pop\n      tag_104\n      dup7\n      dup3\n      0x04\n      add\n      tag_62\n      jump\t// in\n    tag_104:\n      swap3\n      pop\n      pop\n      tag_105\n      tag_73\n      jump\t// in\n    tag_105:\n      swap1\n      pop\n      swap2\n      swap4\n      pop\n      swap2\n      swap4\n      jump\t// out\n    tag_106:\n      0x00\n      0x20\n      dup3\n      dup5\n      sub\n      slt\n      iszero\n      tag_108\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_108:\n      dup2\n      mload\n      tag_109\n      dup2\n      tag_76\n      jump\t// in\n    tag_109:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n    tag_110:\n      0x00\n      0x20\n      dup3\n      dup5\n      sub\n      slt\n      iszero\n      tag_112\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_112:\n      pop\n      mload\n      swap2\n      swap1\n      pop\n      jump\t// out\n    tag_119:\n      0x00\n      0x0100\n      dup3\n      add\n      swap1\n      pop\n      sub(exp(0x02, 0xa0), 0x01)\n      dup1\n      dup5\n      mload\n      and\n      dup4\n      mstore\n      dup1\n      0x20\n      dup6\n      add\n      mload\n      and\n      0x20\n      dup5\n      add\n      mstore\n      0xffffff\n      0x40\n      dup6\n      add\n      mload\n      and\n      0x40\n      dup5\n      add\n      mstore\n      dup1\n      0x60\n      dup6\n      add\n      mload\n      and\n      0x60\n      dup5\n      add\n      mstore\n      0x80\n      dup5\n      add\n      mload\n      0x80\n      dup5\n      add\n      mstore\n      0xa0\n      dup5\n      add\n      mload\n      0xa0\n      dup5\n      add\n      mstore\n      0xc0\n      dup5\n      add\n      mload\n      0xc0\n      dup5\n      add\n      mstore\n      dup1\n      0xe0\n      dup6\n      add\n      mload\n      and\n      0xe0\n      dup5\n      add\n      mstore\n      pop\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n    tag_122:\n      mload(0x40)\n      0x0100\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      dup2\n      add\n      0xffffffffffffffff\n      dup2\n      gt\n      dup3\n      dup3\n      lt\n      or\n      iszero\n      tag_125\n      jumpi\n      tag_125\n      tag_126\n      jump\t// in\n    tag_125:\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x40\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      mstore\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      swap1\n      jump\t// out\n    tag_66:\n      0x00\n      0xffffffffffffffff\n      dup3\n      gt\n      iszero\n      tag_129\n      jumpi\n      tag_129\n      tag_126\n      jump\t// in\n    tag_129:\n      pop\n      0x20\n      swap1\n      dup2\n      mul\n      add\n      swap1\n      jump\t// out\n    tag_130:\n      0x00\n      dup3\n      not\n      dup3\n      gt\n      iszero\n      tag_133\n      jumpi\n      tag_133\n      tag_134\n      jump\t// in\n    tag_133:\n      pop\n      add\n      swap1\n      jump\t// out\n    tag_135:\n      0x00\n      dup3\n      dup3\n      lt\n      iszero\n      tag_138\n      jumpi\n      tag_138\n      tag_134\n      jump\t// in\n    tag_138:\n      pop\n      sub\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n    tag_139:\n      0x00\n      returndatasize\n      dup1\n      iszero\n      tag_142\n      jumpi\n      returndatasize\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_144\n      jumpi\n      tag_144\n      tag_126\n      jump\t// in\n    tag_144:\n      mload(0x40)\n      tag_145\n      0x1f\n      dup4\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      tag_68\n      jump\t// in\n    tag_145:\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      dup1\n      swap4\n      pop\n      returndatasize\n      0x00\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      dup4\n      add\n      returndatacopy\n      pop\n      pop\n      pop\n      swap1\n      jump\t// out\n    tag_142:\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x60\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      swap2\n      pop\n      pop\n      swap1\n      jump\t// out\n    tag_146:\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0xa0\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      dup2\n      add\n      dup2\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      iszero\n      tag_149\n      jumpi\n      tag_149\n      tag_126\n      jump\t// in\n    tag_149:\n      0x40\n      mstore\n      pop\n      jump\t// out\n    tag_68:\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x1f\n      dup3\n      add\n      not(0x1f)\n      and\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      dup2\n      add\n      0xffffffffffffffff\n      dup2\n      gt\n      dup3\n      dup3\n      lt\n      or\n      iszero\n      tag_152\n      jumpi\n      tag_152\n      tag_126\n      jump\t// in\n    tag_152:\n      0x40\n      mstore\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n    tag_153:\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      0x00\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      eq\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      tag_78\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x20\n      0x24\n      dup3\n      add\n      mstore\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      dup2\n      revert\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1767:1873  function _requireNotPaused() internal view virtual {... */\n    tag_156:\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0xff\n      0x010000000000000000000000000000000000000000\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1685:1692  _paused */\n      0x00\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n      div\n      and\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1836:1845  !paused() */\n      iszero\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      tag_158\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x10\n      0x24\n      dup3\n      add\n      mstore\n      0x5061757361626c653a2070617573656400000000000000000000000000000000\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      dup2\n      revert\n    tag_158:\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1767:1873  function _requireNotPaused() internal view virtual {... */\n      jump\t// out\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":1873:2180  function safeApprove(... */\n    tag_160:\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload(0x40)\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2055:2078  IERC20.approve.selector */\n      0x095ea7b300000000000000000000000000000000000000000000000000000000\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2032:2090  abi.encodeWithSelector(IERC20.approve.selector, to, value) */\n      0x20\n      dup3\n      add\n      swap1\n      dup2\n      mstore\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup5\n      and\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2032:2090  abi.encodeWithSelector(IERC20.approve.selector, to, value) */\n      0x24\n      dup4\n      add\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      0x44\n      dup1\n      dup4\n      add\n      dup7\n      swap1\n      mstore\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2032:2090  abi.encodeWithSelector(IERC20.approve.selector, to, value) */\n      dup3\n      mstore\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x64\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2032:2090  abi.encodeWithSelector(IERC20.approve.selector, to, value) */\n      tag_163\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup2\n      dup5\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2032:2090  abi.encodeWithSelector(IERC20.approve.selector, to, value) */\n      tag_68\n      jump\t// in\n    tag_163:\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2021:2091  token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value)) */\n      0x00\n      dup1\n      dup4\n      mload\n      dup4\n      0x00\n      dup8\n      gas\n      call\n      swap2\n      pop\n      pop\n      tag_164\n      tag_139\n      jump\t// in\n    tag_164:\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2109:2166  success && (data.length == 0 || abi.decode(data, (bool))) */\n      dup2\n      dup3\n      iszero\n      tag_165\n      jumpi\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2121:2132  data.length */\n      dup2\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2121:2137  data.length == 0 */\n      dup1\n      iszero\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2121:2165  data.length == 0 || abi.decode(data, (bool)) */\n      dup1\n      tag_166\n      jumpi\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2141:2165  abi.decode(data, (bool)) */\n      tag_167\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2032:2090  abi.encodeWithSelector(IERC20.approve.selector, to, value) */\n      0x20\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2141:2165  abi.decode(data, (bool)) */\n      dup4\n      dup7\n      add\n      add\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2032:2090  abi.encodeWithSelector(IERC20.approve.selector, to, value) */\n      0x20\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2141:2165  abi.decode(data, (bool)) */\n      dup7\n      add\n      tag_106\n      jump\t// in\n    tag_167:\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2121:2165  data.length == 0 || abi.decode(data, (bool)) */\n      swap1\n      pop\n    tag_166:\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2109:2166  success && (data.length == 0 || abi.decode(data, (bool))) */\n      swap2\n      pop\n      pop\n    tag_165:\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup1\n      tag_168\n      jumpi\n      mload(0x40)\n      swap3\n      pop\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup4\n      mstore\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2032:2090  abi.encodeWithSelector(IERC20.approve.selector, to, value) */\n      0x20\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x04\n      dup5\n      add\n      mstore\n      0x02\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2032:2090  abi.encodeWithSelector(IERC20.approve.selector, to, value) */\n      0x24\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup5\n      add\n      mstore\n      0x5341000000000000000000000000000000000000000000000000000000000000\n      0x44\n      dup5\n      add\n      mstore\n      0x64\n      dup4\n      revert\n    tag_168:\n      pop\n      pop\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":1873:2180  function safeApprove(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":561:919  function safeTransferFrom(... */\n    tag_169:\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload(0x40)\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":759:828  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      0x20\n      dup2\n      add\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":782:810  IERC20.transferFrom.selector */\n      0x23b872dd00000000000000000000000000000000000000000000000000000000\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":759:828  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      dup2\n      mstore\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup1\n      dup6\n      and\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":759:828  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      0x24\n      dup5\n      add\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      dup1\n      dup7\n      and\n      0x44\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":759:828  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      dup5\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      add\n      mstore\n      pop\n      dup6\n      0x64\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":759:828  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      dup4\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      add\n      mstore\n      0x64\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":759:828  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      dup3\n      mstore\n      tag_171\n      dup3\n      tag_146\n      jump\t// in\n    tag_171:\n      0x00\n      dup1\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":748:829  token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value)) */\n      dup4\n      mload\n      dup4\n      0x00\n      dup8\n      gas\n      call\n      swap2\n      pop\n      pop\n      tag_172\n      tag_139\n      jump\t// in\n    tag_172:\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":847:904  success && (data.length == 0 || abi.decode(data, (bool))) */\n      dup2\n      dup3\n      iszero\n      tag_173\n      jumpi\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":859:870  data.length */\n      dup2\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":859:875  data.length == 0 */\n      dup1\n      iszero\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":859:903  data.length == 0 || abi.decode(data, (bool)) */\n      dup1\n      tag_174\n      jumpi\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":879:903  abi.decode(data, (bool)) */\n      tag_175\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":759:828  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      0x20\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":879:903  abi.decode(data, (bool)) */\n      dup4\n      dup7\n      add\n      add\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":759:828  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      0x20\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":879:903  abi.decode(data, (bool)) */\n      dup7\n      add\n      tag_106\n      jump\t// in\n    tag_175:\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":859:903  data.length == 0 || abi.decode(data, (bool)) */\n      swap1\n      pop\n    tag_174:\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":847:904  success && (data.length == 0 || abi.decode(data, (bool))) */\n      swap2\n      pop\n      pop\n    tag_173:\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup1\n      tag_176\n      jumpi\n      mload(0x40)\n      swap3\n      pop\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup4\n      mstore\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":759:828  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      0x20\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x04\n      dup5\n      add\n      mstore\n      0x03\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":759:828  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      0x24\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup5\n      add\n      mstore\n      0x5354460000000000000000000000000000000000000000000000000000000000\n      0x44\n      dup5\n      add\n      mstore\n      0x64\n      dup4\n      revert\n    tag_176:\n      pop\n      pop\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":561:919  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n    tag_177:\n      0x00\n      not(0x00)\n      dup3\n      eq\n      iszero\n      tag_180\n      jumpi\n      tag_180\n      tag_134\n      jump\t// in\n    tag_180:\n      pop\n      0x01\n      add\n      swap1\n      jump\t// out\n    tag_185:\n      0x00\n      dup2\n      mload\n      dup4\n      lt\n      tag_187\n      jumpi\n      mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n    tag_187:\n      pop\n      0x20\n      swap2\n      dup3\n      mul\n      add\n      add\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1063:1125  modifier onlyOwner() {... */\n    tag_30:\n      tag_189\n      tag_153\n      jump\t// in\n    tag_189:\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload(0x00)\n      not(sub(exp(0x02, 0xa0), 0x01))\n      dup2\n      and\n      0x00\n      sstore\n      0x00\n      sub(exp(0x02, 0xa0), 0x01)\n      dup3\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x00\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1063:1125  modifier onlyOwner() {... */\n      jump\t// out\n    tag_51:\n      tag_191\n      tag_153\n      jump\t// in\n    tag_191:\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2169:2191  newOwner != address(0) */\n      dup3\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      and\n      dup1\n      tag_192\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x26\n      0x24\n      dup3\n      add\n      mstore\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n      0x44\n      dup3\n      add\n      mstore\n      0x6464726573730000000000000000000000000000000000000000000000000000\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      dup2\n      revert\n    tag_192:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      0x00\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n      dup2\n      not(sub(exp(0x02, 0xa0), 0x01))\n      dup3\n      and\n      or\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      0x00\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      dup4\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup4\n      dup3\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      0x00\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1063:1125  modifier onlyOwner() {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1204:1276  modifier whenNotPaused() {... */\n    tag_17:\n      tag_194\n      tag_156\n      jump\t// in\n    tag_194:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_195\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      0x01\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_196\n      jump\t// in\n    tag_195:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      0x01\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sstore\n        /* \"contracts/fountain.sol\":1810:1823  totalAmountIn */\n      tag_197\n      dup4\n        /* \"contracts/fountain.sol\":1803:1807  this */\n      address\n        /* \"contracts/fountain.sol\":1783:1793  msg.sender */\n      caller\n        /* \"contracts/fountain.sol\":1810:1823  totalAmountIn */\n      dup6\n      tag_169\n      jump\t// in\n    tag_197:\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup1\n        /* \"contracts/fountain.sol\":1955:1965  swapRouter */\n      immutable(\"0x059720e82fda8e11338580d5bfef39c116fbdd4bf60743e75b94221573318122\")\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      and\n        /* \"contracts/fountain.sol\":1968:1981  totalAmountIn */\n      tag_198\n      dup6\n      dup3\n      dup7\n      tag_160\n      jump\t// in\n    tag_198:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n      tag_199\n      tag_122\n      jump\t// in\n    tag_199:\n      sub(exp(0x02, 0xa0), 0x01)\n      dup7\n      and\n      dup2\n      mstore\n        /* \"contracts/fountain.sol\":722:764  0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 */\n      0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\n        /* \"contracts/fountain.sol\":2136:2761  ISwapRouter.ExactOutputSingleParams({... */\n      0x20\n      dup3\n      add\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      0xffffff\n      dup11\n      and\n        /* \"contracts/fountain.sol\":2136:2761  ISwapRouter.ExactOutputSingleParams({... */\n      0x40\n      dup3\n      dup2\n      add\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"contracts/fountain.sol\":1803:1807  this */\n      address\n        /* \"contracts/fountain.sol\":2136:2761  ISwapRouter.ExactOutputSingleParams({... */\n      0x60\n      dup4\n      add\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      dup9\n        /* \"contracts/fountain.sol\":2136:2761  ISwapRouter.ExactOutputSingleParams({... */\n      0x80\n      dup4\n      add\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      dup3\n        /* \"contracts/fountain.sol\":2136:2761  ISwapRouter.ExactOutputSingleParams({... */\n      0xa0\n      dup4\n      add\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      dup10\n        /* \"contracts/fountain.sol\":2136:2761  ISwapRouter.ExactOutputSingleParams({... */\n      0xc0\n      dup4\n      add\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      0x00\n      swap3\n      pop\n      dup3\n        /* \"contracts/fountain.sol\":2136:2761  ISwapRouter.ExactOutputSingleParams({... */\n      0xe0\n      dup4\n      add\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n        /* \"contracts/fountain.sol\":2920:2963  swapRouter.exactOutputSingle(ethSwapParams) */\n      dup4\n      extcodesize\n      tag_207\n      jumpi\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup3\n      dup4\n      revert\n        /* \"contracts/fountain.sol\":2920:2963  swapRouter.exactOutputSingle(ethSwapParams) */\n    tag_207:\n        /* \"contracts/fountain.sol\":2136:2761  ISwapRouter.ExactOutputSingleParams({... */\n      dup1\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload\n      0xdb3e219800000000000000000000000000000000000000000000000000000000\n        /* \"contracts/fountain.sol\":2920:2963  swapRouter.exactOutputSingle(ethSwapParams) */\n      dup2\n      mstore\n        /* \"contracts/fountain.sol\":2136:2761  ISwapRouter.ExactOutputSingleParams({... */\n      0x20\n        /* \"contracts/fountain.sol\":2920:2963  swapRouter.exactOutputSingle(ethSwapParams) */\n      dup2\n      dup3\n      tag_208\n      dup7\n      0x04\n      dup7\n      add\n      tag_119\n      jump\t// in\n    tag_208:\n      sub\n      dup4\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup8\n        /* \"contracts/fountain.sol\":2920:2963  swapRouter.exactOutputSingle(ethSwapParams) */\n      dup10\n      gas\n      call\n      swap3\n      pop\n      dup3\n      tag_210\n      jumpi\n      tag_210\n      tag_211\n      jump\t// in\n    tag_210:\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup4\n        /* \"contracts/fountain.sol\":2920:2963  swapRouter.exactOutputSingle(ethSwapParams) */\n      dup4\n      iszero\n      tag_212\n      jumpi\n      tag_213\n      returndatasize\n      dup4\n      tag_68\n      jump\t// in\n    tag_213:\n      tag_214\n      returndatasize\n      dup4\n      add\n      dup4\n      tag_110\n      jump\t// in\n    tag_214:\n      swap1\n      pop\n    tag_212:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n      swap4\n      pop\n        /* \"contracts/fountain.sol\":722:764  0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 */\n      0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\n      swap2\n      pop\n      dup2\n        /* \"contracts/fountain.sol\":2998:3044  IWETH(WETH9).withdraw(ephemeralGasMoneyAmount) */\n      extcodesize\n      tag_215\n      jumpi\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup5\n      dup6\n      revert\n        /* \"contracts/fountain.sol\":2998:3044  IWETH(WETH9).withdraw(ephemeralGasMoneyAmount) */\n    tag_215:\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup3\n      mload\n      0x2e1a7d4d00000000000000000000000000000000000000000000000000000000\n        /* \"contracts/fountain.sol\":2998:3044  IWETH(WETH9).withdraw(ephemeralGasMoneyAmount) */\n      dup2\n      mstore\n        /* \"contracts/fountain.sol\":2920:2963  swapRouter.exactOutputSingle(ethSwapParams) */\n      0x04\n        /* \"contracts/fountain.sol\":2998:3044  IWETH(WETH9).withdraw(ephemeralGasMoneyAmount) */\n      dup2\n      add\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup6\n      swap1\n      mstore\n      dup6\n      dup2\n      0x24\n      dup2\n      dup4\n        /* \"contracts/fountain.sol\":722:764  0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 */\n      dup8\n        /* \"contracts/fountain.sol\":2998:3044  IWETH(WETH9).withdraw(ephemeralGasMoneyAmount) */\n      gas\n      call\n      swap5\n      pop\n      dup5\n      tag_218\n      jumpi\n      tag_218\n      tag_211\n      jump\t// in\n    tag_218:\n      dup5\n      iszero\n      tag_221\n      jumpi\n      tag_220\n      returndatasize\n      dup3\n      tag_68\n      jump\t// in\n    tag_220:\n      tag_221\n      returndatasize\n      dup3\n      add\n      dup3\n      tag_79\n      jump\t// in\n    tag_221:\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n      swap4\n      pop\n      dup5\n      dup6\n      dup7\n        /* \"contracts/fountain.sol\":2136:2761  ISwapRouter.ExactOutputSingleParams({... */\n      dup6\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload\n        /* \"contracts/fountain.sol\":3146:3218  payable(ephemeralWalletAddress).call{value: ephemeralGasMoneyAmount}(\"\") */\n      dup8\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup12\n        /* \"contracts/fountain.sol\":3146:3177  payable(ephemeralWalletAddress) */\n      dup14\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      and\n        /* \"contracts/fountain.sol\":3146:3218  payable(ephemeralWalletAddress).call{value: ephemeralGasMoneyAmount}(\"\") */\n      gas\n      call\n      swap7\n      pop\n      tag_222\n      tag_139\n      jump\t// in\n    tag_222:\n      pop\n        /* \"contracts/fountain.sol\":3228:3296  require(ephemeralGasSent, \"Failed to send gas to ephemeral wallet.\") */\n      tag_223\n      dup8\n      tag_224\n      jump\t// in\n    tag_223:\n        /* \"contracts/fountain.sol\":3399:3440  totalAmountIn - tokenAmountSpentOnEthSwap */\n      tag_225\n      dup2\n      dup12\n      tag_135\n      jump\t// in\n    tag_225:\n      swap7\n      pop\n      pop\n      pop\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      tag_226\n      tag_122\n      jump\t// in\n    tag_226:\n      sub(exp(0x02, 0xa0), 0x01)\n      dup9\n      and\n      dup2\n      mstore\n        /* \"contracts/fountain.sol\":3587:4212  ISwapRouter.ExactInputSingleParams({... */\n      swap2\n      pop\n        /* \"contracts/fountain.sol\":801:843  0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48 */\n      0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\n        /* \"contracts/fountain.sol\":2136:2761  ISwapRouter.ExactOutputSingleParams({... */\n      0x20\n        /* \"contracts/fountain.sol\":3587:4212  ISwapRouter.ExactInputSingleParams({... */\n      dup4\n      add\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      0xffffff\n      dup13\n      and\n        /* \"contracts/fountain.sol\":3587:4212  ISwapRouter.ExactInputSingleParams({... */\n      dup3\n      dup3\n      add\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n        /* \"contracts/fountain.sol\":1803:1807  this */\n      address\n        /* \"contracts/fountain.sol\":2136:2761  ISwapRouter.ExactOutputSingleParams({... */\n      0x60\n        /* \"contracts/fountain.sol\":3587:4212  ISwapRouter.ExactInputSingleParams({... */\n      dup4\n      add\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      dup9\n        /* \"contracts/fountain.sol\":2136:2761  ISwapRouter.ExactOutputSingleParams({... */\n      0x80\n        /* \"contracts/fountain.sol\":3587:4212  ISwapRouter.ExactInputSingleParams({... */\n      dup4\n      add\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      dup5\n        /* \"contracts/fountain.sol\":2136:2761  ISwapRouter.ExactOutputSingleParams({... */\n      0xa0\n        /* \"contracts/fountain.sol\":3587:4212  ISwapRouter.ExactInputSingleParams({... */\n      dup4\n      add\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      dup13\n        /* \"contracts/fountain.sol\":2136:2761  ISwapRouter.ExactOutputSingleParams({... */\n      0xc0\n        /* \"contracts/fountain.sol\":3587:4212  ISwapRouter.ExactInputSingleParams({... */\n      dup4\n      add\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      dup3\n        /* \"contracts/fountain.sol\":2136:2761  ISwapRouter.ExactOutputSingleParams({... */\n      0xe0\n        /* \"contracts/fountain.sol\":3587:4212  ISwapRouter.ExactInputSingleParams({... */\n      dup4\n      add\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n        /* \"contracts/fountain.sol\":4275:4310  swapRouter.exactInputSingle(params) */\n      dup4\n      extcodesize\n      tag_232\n      jumpi\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup3\n      dup4\n      revert\n        /* \"contracts/fountain.sol\":4275:4310  swapRouter.exactInputSingle(params) */\n    tag_232:\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload\n      0x414bf38900000000000000000000000000000000000000000000000000000000\n        /* \"contracts/fountain.sol\":4275:4310  swapRouter.exactInputSingle(params) */\n      dup2\n      mstore\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      swap4\n      pop\n        /* \"contracts/fountain.sol\":2136:2761  ISwapRouter.ExactOutputSingleParams({... */\n      0x20\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup5\n      dup1\n        /* \"contracts/fountain.sol\":4275:4310  swapRouter.exactInputSingle(params) */\n      tag_233\n      dup5\n        /* \"contracts/fountain.sol\":2920:2963  swapRouter.exactOutputSingle(ethSwapParams) */\n      0x04\n        /* \"contracts/fountain.sol\":4275:4310  swapRouter.exactInputSingle(params) */\n      dup4\n      add\n      tag_119\n      jump\t// in\n    tag_233:\n      sub\n      dup7\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup6\n        /* \"contracts/fountain.sol\":4275:4310  swapRouter.exactInputSingle(params) */\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      dup2\n      tag_235\n      jumpi\n      tag_235\n      tag_211\n      jump\t// in\n    tag_235:\n      dup2\n      iszero\n      tag_236\n      jumpi\n      tag_237\n      returndatasize\n      dup5\n      tag_68\n      jump\t// in\n    tag_237:\n      tag_238\n      returndatasize\n      dup5\n      add\n      dup5\n      tag_110\n      jump\t// in\n    tag_238:\n      swap1\n      pop\n    tag_236:\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/fountain.sol\":4330:4338  balances */\n      0x03\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/fountain.sol\":4330:4362  balances[ephemeralWalletAddress] */\n      swap3\n      pop\n        /* \"contracts/fountain.sol\":4330:4375  balances[ephemeralWalletAddress] += amountOut */\n      tag_240\n      dup2\n      dup5\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n        /* \"contracts/fountain.sol\":4330:4375  balances[ephemeralWalletAddress] += amountOut */\n      tag_130\n      jump\t// in\n    tag_240:\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup4\n      sstore\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n      tag_241\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      0x01\n      dup1\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sstore\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n    tag_241:\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1204:1276  modifier whenNotPaused() {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n    tag_43:\n      tag_244\n      tag_156\n      jump\t// in\n    tag_244:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_245\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      dup3\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_196\n      jump\t// in\n    tag_245:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      dup2\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sstore\n        /* \"contracts/fountain.sol\":4600:4617  charities_.length */\n      dup3\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload\n        /* \"contracts/fountain.sol\":4592:4690  require(charities_.length == amounts_.length, \"Charities and amounts arrays of different length.\") */\n      tag_246\n        /* \"contracts/fountain.sol\":4621:4636  amounts_.length */\n      dup6\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload\n        /* \"contracts/fountain.sol\":4600:4636  charities_.length == amounts_.length */\n      dup3\n      eq\n        /* \"contracts/fountain.sol\":4592:4690  require(charities_.length == amounts_.length, \"Charities and amounts arrays of different length.\") */\n      tag_247\n      jump\t// in\n    tag_246:\n      pop\n      0x00\n      dup1\n        /* \"contracts/fountain.sol\":4733:4829  for (uint256 i = 0; i < amounts_.length; i++) {... */\n    tag_248:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      dup3\n        /* \"contracts/fountain.sol\":4733:4829  for (uint256 i = 0; i < amounts_.length; i++) {... */\n      iszero\n      tag_250\n      jumpi\n        /* \"contracts/fountain.sol\":4757:4772  amounts_.length */\n      dup6\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload\n        /* \"contracts/fountain.sol\":4753:4772  i < amounts_.length */\n      dup2\n      lt\n      tag_251\n      jumpi\n      jump(tag_250)\n    tag_251:\n        /* \"contracts/fountain.sol\":4793:4818  amountsSum += amounts_[i] */\n      tag_252\n        /* \"contracts/fountain.sol\":4807:4818  amounts_[i] */\n      tag_253\n      dup3\n      dup9\n      tag_185\n      jump\t// in\n    tag_253:\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload\n        /* \"contracts/fountain.sol\":4793:4818  amountsSum += amounts_[i] */\n      dup4\n      tag_130\n      jump\t// in\n    tag_252:\n      swap2\n      pop\n        /* \"contracts/fountain.sol\":4774:4777  i++ */\n      tag_254\n      dup2\n      tag_177\n      jump\t// in\n    tag_254:\n      swap1\n      pop\n        /* \"contracts/fountain.sol\":4733:4829  for (uint256 i = 0; i < amounts_.length; i++) {... */\n      jump(tag_248)\n    tag_250:\n      pop\n        /* \"contracts/fountain.sol\":4839:4914  require(amountsSum <= balances[user], \"Total finalization amount too high\") */\n      tag_255\n        /* \"contracts/fountain.sol\":4861:4875  balances[user] */\n      tag_256\n      dup5\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/fountain.sol\":4330:4338  balances */\n      0x03\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      swap1\n      jump\n        /* \"contracts/fountain.sol\":4861:4875  balances[user] */\n    tag_256:\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n        /* \"contracts/fountain.sol\":4847:4875  amountsSum <= balances[user] */\n      dup3\n      gt\n      iszero\n        /* \"contracts/fountain.sol\":4839:4914  require(amountsSum <= balances[user], \"Total finalization amount too high\") */\n      tag_257\n      jump\t// in\n    tag_255:\n        /* \"contracts/fountain.sol\":4932:4985  autoAllocateRemainder || amountsSum == balances[user] */\n      dup6\n      dup7\n      tag_258\n      jumpi\n      pop\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/fountain.sol\":4330:4338  balances */\n      0x03\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/fountain.sol\":4957:4985  amountsSum == balances[user] */\n      dup2\n      eq\n        /* \"contracts/fountain.sol\":4932:4985  autoAllocateRemainder || amountsSum == balances[user] */\n    tag_258:\n        /* \"contracts/fountain.sol\":4924:5024  require(autoAllocateRemainder || amountsSum == balances[user], \"Total finalization amount too low.\") */\n      tag_260\n      dup2\n      tag_261\n      jump\t// in\n    tag_260:\n      pop\n      pop\n      0x00\n        /* \"contracts/fountain.sol\":5043:5274  for (uint256 i = 0; i < charities_.length; i++) { ... */\n    tag_262:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      dup2\n        /* \"contracts/fountain.sol\":5043:5274  for (uint256 i = 0; i < charities_.length; i++) { ... */\n      iszero\n      tag_264\n      jumpi\n        /* \"contracts/fountain.sol\":5067:5084  charities_.length */\n      dup4\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload\n        /* \"contracts/fountain.sol\":5063:5084  i < charities_.length */\n      dup2\n      lt\n      tag_265\n      jumpi\n      jump(tag_264)\n    tag_265:\n        /* \"contracts/fountain.sol\":5151:5175  charities[charities_[i]] */\n      tag_266\n      tag_267\n        /* \"contracts/fountain.sol\":5161:5174  charities_[i] */\n      tag_268\n      tag_269\n      dup5\n      dup9\n      tag_185\n      jump\t// in\n    tag_269:\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload\n      0xff\n      and\n      swap1\n      jump\n        /* \"contracts/fountain.sol\":5161:5174  charities_[i] */\n    tag_268:\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0xff\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/fountain.sol\":5151:5160  charities */\n      0x04\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      swap1\n      jump\n        /* \"contracts/fountain.sol\":5151:5175  charities[charities_[i]] */\n    tag_267:\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sload\n      sub(exp(0x02, 0xa0), 0x01)\n      and\n      swap1\n      jump\n        /* \"contracts/fountain.sol\":5151:5175  charities[charities_[i]] */\n    tag_266:\n        /* \"contracts/fountain.sol\":5177:5188  amounts_[i] */\n      tag_272\n      dup3\n      dup8\n      tag_185\n      jump\t// in\n    tag_272:\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload\n        /* \"contracts/fountain.sol\":801:843  0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48 */\n      0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\n      dup1\n        /* \"contracts/fountain.sol\":5129:5189  IERC20(USDC).transfer(charities[charities_[i]], amounts_[i]) */\n      extcodesize\n      tag_273\n      jumpi\n      0x00\n      dup1\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      revert\n        /* \"contracts/fountain.sol\":5129:5189  IERC20(USDC).transfer(charities[charities_[i]], amounts_[i]) */\n    tag_273:\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mload(0x40)\n      0xa9059cbb00000000000000000000000000000000000000000000000000000000\n        /* \"contracts/fountain.sol\":5129:5189  IERC20(USDC).transfer(charities[charities_[i]], amounts_[i]) */\n      dup2\n      mstore\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup5\n      and\n        /* \"contracts/fountain.sol\":5151:5160  charities */\n      0x04\n        /* \"contracts/fountain.sol\":5129:5189  IERC20(USDC).transfer(charities[charities_[i]], amounts_[i]) */\n      dup3\n      add\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      mstore\n      0x24\n      dup2\n      add\n      dup4\n      swap1\n      mstore\n        /* \"contracts/fountain.sol\":5129:5189  IERC20(USDC).transfer(charities[charities_[i]], amounts_[i]) */\n      0x20\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      dup2\n      0x44\n      dup2\n      0x00\n        /* \"contracts/fountain.sol\":801:843  0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48 */\n      dup7\n        /* \"contracts/fountain.sol\":5129:5189  IERC20(USDC).transfer(charities[charities_[i]], amounts_[i]) */\n      gas\n      call\n      swap4\n      pop\n      dup4\n      tag_276\n      jumpi\n      tag_276\n      tag_211\n      jump\t// in\n    tag_276:\n      0x00\n      swap3\n      pop\n      dup4\n      iszero\n      tag_277\n      jumpi\n      tag_278\n      returndatasize\n      dup3\n      tag_68\n      jump\t// in\n    tag_278:\n      tag_279\n      returndatasize\n      dup3\n      add\n      dup3\n      tag_106\n      jump\t// in\n    tag_279:\n      swap3\n      pop\n    tag_277:\n      pop\n      pop\n        /* \"contracts/fountain.sol\":5203:5263  require(transferSuccess, \"USDC transfer to charity failed.\") */\n      tag_280\n      dup2\n      tag_281\n      jump\t// in\n    tag_280:\n      pop\n      pop\n        /* \"contracts/fountain.sol\":5086:5089  i++ */\n      tag_282\n      dup2\n      tag_177\n      jump\t// in\n    tag_282:\n      swap1\n      pop\n        /* \"contracts/fountain.sol\":5043:5274  for (uint256 i = 0; i < charities_.length; i++) { ... */\n      jump(tag_262)\n    tag_264:\n      pop\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n      tag_283\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      0x01\n      dup1\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n      sstore\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n    tag_283:\n        /* \"@openzeppelin/contracts/security/Pausable.sol\":1204:1276  modifier whenNotPaused() {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/fountain.sol\":573:5455  contract Serenity is Ownable, Pausable, ReentrancyGuard {... */\n    tag_134:\n      mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n      mstore(0x04, 0x11)\n      revert(0x00, 0x24)\n    tag_126:\n      mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n      mstore(0x04, 0x41)\n      revert(0x00, 0x24)\n    tag_281:\n      dup1\n      tag_78\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x20\n      0x24\n      dup3\n      add\n      mstore\n      0x55534443207472616e7366657220746f2063686172697479206661696c65642e\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      dup2\n      revert\n    tag_257:\n      dup1\n      tag_78\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x22\n      0x24\n      dup3\n      add\n      mstore\n      0x546f74616c2066696e616c697a6174696f6e20616d6f756e7420746f6f206869\n      0x44\n      dup3\n      add\n      mstore\n      0x6768000000000000000000000000000000000000000000000000000000000000\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      dup2\n      revert\n    tag_224:\n      dup1\n      tag_78\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x27\n      0x24\n      dup3\n      add\n      mstore\n      0x4661696c656420746f2073656e642067617320746f20657068656d6572616c20\n      0x44\n      dup3\n      add\n      mstore\n      0x77616c6c65742e00000000000000000000000000000000000000000000000000\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      dup2\n      revert\n    tag_247:\n      dup1\n      tag_78\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x31\n      0x24\n      dup3\n      add\n      mstore\n      0x43686172697469657320616e6420616d6f756e747320617272617973206f6620\n      0x44\n      dup3\n      add\n      mstore\n      0x646966666572656e74206c656e6774682e000000000000000000000000000000\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      dup2\n      revert\n    tag_261:\n      dup1\n      tag_78\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x22\n      0x24\n      dup3\n      add\n      mstore\n      0x546f74616c2066696e616c697a6174696f6e20616d6f756e7420746f6f206c6f\n      0x44\n      dup3\n      add\n      mstore\n      0x772e000000000000000000000000000000000000000000000000000000000000\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      dup2\n      revert\n    tag_196:\n      dup1\n      tag_78\n      jumpi\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1f\n      0x24\n      dup3\n      add\n      mstore\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      dup2\n      revert\n    tag_211:\n      mload(0x40)\n      returndatasize\n      0x00\n      dup3\n      returndatacopy\n      returndatasize\n      dup2\n      revert\n    tag_76:\n      dup1\n      iszero\n      iszero\n      dup2\n      eq\n      tag_78\n      jumpi\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa36469706673582212204837e4bf541790af15fbb607b23439581cfd0a8bea265f70933b2b6e1051dcba6c6578706572696d656e74616cf564736f6c63430008070041\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60a0604052341561000f57600080fd5b61142b803803601f19601f82011660a00160a0811067ffffffffffffffff82111715610064577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052808260a039604081121561007a57600080fd5b505060a051600160a060020a038116811461009457600080fd5b6100a060c051826100c1565b506040516112fb8061013083396080518281816102050152610b2f01528082f35b6000805433600160a060020a031982168117835560405191929091600160a060020a038416917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600160a860020a0319163360a060020a60ff021916176000556001805560805260025556fe6040608081526004361061028d5760007c010000000000000000000000000000000000000000000000000000000081350463480a6fdc81146100a357634aa4a4fc81146100d357635c975abb81146101085763715018a6811461014a576389a30271811461016a57638da5cb5b811461019b57638de9c37281146101c65763c31c9c0781146101ee5763f2fde38b81146102345763f8b2cb4f811461024f5761028a565b34156100ad578182fd5b6100b63661038a565b6100c681838587898b8d8f610afc565b5050505050505050818351f35b34156100dd578182fd5b6100e63661032f565b825173c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28152602081f35b0381f35b3415610112578182fd5b61011b3661032f565b60ff74010000000000000000000000000000000000000000835404168351806101048383901515815260200190565b3415610154578182fd5b61015d3661032f565b6101656109e3565b818351f35b3415610174578182fd5b61017d3661032f565b825173a0b86991c6218b36c1d19d4a2e9eb0ce3606eb488152602081f35b34156101a5578182fd5b6101ae3661032f565b81548351600160a060020a0390911680825290602081f35b34156101d0578182fd5b6101d936610425565b6101e581838587610df5565b50505050818351f35b34156101f8578182fd5b6102013661032f565b82517f0000000000000000000000000000000000000000000000000000000000000000600160a060020a03168152602081f35b341561023e578182fd5b61016561024a36610358565b610a32565b3415610259578182fd5b61028061026536610358565b600160a060020a031660009081526003602052604090205490565b8351818152602081f35b50505b50600080fd5b600435600160a060020a03811681146102ab57600080fd5b90565b600082601f8301126102bf57600080fd5b81356102ca816105ee565b6040516102d782826106bc565b82815260208082019250858101818502870182018810156102f757600080fd5b60005b85811015610316578135855293820193908201906001016102fa565b5091979650505050505050565b6064356102ab816112a9565b60006003198201121561034157600080fd5b50565b6000818303121561035457600080fd5b5050565b600060206003198301121561036c57600080fd5b600435600160a060020a038116811461038457600080fd5b92915050565b6000808080808080806101006003198a0112156103a657600080fd5b600435600160a060020a0380821682146103bf57600080fd5b9098506024359080821682146103d457600080fd5b50965060443595506064359450608435935060a43562ffffff80821682146103fb57600080fd5b90935060c43590808216821461041057600080fd5b508092505060e4359050919395975091939597565b600080808060806003198601121561043c57600080fd5b610444610293565b935060243567ffffffffffffffff8082111561045f57600080fd5b86602383011261046e57600080fd5b816004013561047c816105ee565b60405161048982826106bc565b828152602080820192506024868101908286028801018c10156104ab57600080fd5b600096505b848710156104dd57803560ff811681146104c957600080fd5b8452600196909601959281019281016104b0565b509097505060443593505050808211156104f657600080fd5b5061050486826004016102ae565b92505061050f610323565b90509193509193565b60006020828403121561052a57600080fd5b8151610535816112a9565b9392505050565b60006020828403121561054e57600080fd5b5051919050565b600061010082019050600160a060020a0380845116835280602085015116602084015262ffffff60408501511660408401528060608501511660608401526080840151608084015260a084015160a084015260c084015160c08401528060e08501511660e08401525092915050565b604051610100810167ffffffffffffffff811182821017156105e8576105e8611008565b60405290565b600067ffffffffffffffff82111561060857610608611008565b5060209081020190565b6000821982111561062557610625610fd9565b500190565b60008282101561063c5761063c610fd9565b500390565b60003d801561068e573d67ffffffffffffffff81111561066357610663611008565b60405161067a601f8301601f1916602001826106bc565b8181528093503d6000602083013e50505090565b606091505090565b60a0810181811067ffffffffffffffff821117156106b6576106b6611008565b60405250565b601f8201601f1916810167ffffffffffffffff811182821017156106e2576106e2611008565b6040525050565b600160a060020a03600054163381146103415760405160e560020a62461bcd02815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606481fd5b60ff740100000000000000000000000000000000000000006000540416156107ae5760405160e560020a62461bcd02815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606481fd5b565b6040517f095ea7b30000000000000000000000000000000000000000000000000000000060208201908152600160a060020a038416602483015260448083018690528252606461080081846106bc565b506000808351836000875af1915050610817610641565b81821561084057815180158061083c5761083960208386010160208601610518565b90505b9150505b8061088f57604051925060e560020a62461bcd02835260206004840152600260248401527f53410000000000000000000000000000000000000000000000000000000000006044840152606483fd5b505050505050565b604051602081017f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a038085166024840152808616604484015250856064830152606482526108ed82610696565b6000808351836000875af1915050610903610641565b81821561092c5781518015806109285761092560208386010160208601610518565b90505b9150505b8061097b57604051925060e560020a62461bcd02835260206004840152600360248401527f53544600000000000000000000000000000000000000000000000000000000006044840152606483fd5b50505050505050565b600060001982141561099857610998610fd9565b5060010190565b6000815183106109d8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b506020918202010190565b6109eb6106e9565b600054600160a060020a031981166000556000600160a060020a0382167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a350565b610a3a6106e9565b600160a060020a0380821680610ab85760405160e560020a62461bcd02815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608481fd5b60005481600160a060020a0319821617600055838382167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a350505050565b610b04610744565b610b1360026001541415611250565b6002600155610b2483303385610897565b600160a060020a03807f000000000000000000000000000000000000000000000000000000000000000016610b5a8582866107b0565b600254610b656105c4565b600160a060020a038616815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2602082015262ffffff8a166040828101919091523060608301528860808301528260a08301528960c0830152600092508260e0830152833b610bc6578283fd5b80517fdb3e219800000000000000000000000000000000000000000000000000000000815260208182610bfc8660048601610555565b038387895af1925082610c1157610c1161129d565b838315610c3157610c223d836106bc565b610c2e3d83018361053c565b90505b600254935073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc29150813b610c57578485fd5b82517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815260048101859052858160248183875af1945084610c9b57610c9b61129d565b8415610cb757610cab3d826106bc565b610cb73d820182610344565b5060025493508485868551878b8d165af19650610cd2610641565b50610cdc876110f7565b610ce6818b61062a565b96505050610cf26105c4565b600160a060020a0388168152915073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48602083015262ffffff8c16828201523060608301528860808301528460a08301528c60c08301528260e0830152833b610d4c578283fd5b517f414bf389000000000000000000000000000000000000000000000000000000008152935060208480610d838460048301610555565b038685875af192505081610d9957610d9961129d565b8115610db857610da93d846106bc565b610db53d84018461053c565b90505b600160a060020a03841660009081526003602052604090209250610ddd818454610612565b8355505050610deb60018055565b5050505050505050565b610dfd610744565b6001610e0d600282541415611250565b600281558251610e1f8551821461116a565b506000805b8215610e5d5785518110610e3757610e5d565b610e4b610e44828861099f565b5183610612565b9150610e5681610984565b9050610e24565b50610e88610e7f84600160a060020a0316600090815260036020526040902090565b54821115611084565b8586610eab5750600160a060020a03831660009081526003602052604090205481145b610eb4816111dd565b505060005b8115610fc85783518110610ecc57610fc8565b610f07610efa610ee6610edf848861099f565b5160ff1690565b60ff16600090815260046020526040902090565b54600160a060020a031690565b610f11828761099f565b5173a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48803b610f3257600080fd5b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0384166004820152602481018390526020816044816000865af1935083610f8857610f8861129d565b600092508315610fab57610f9c3d826106bc565b610fa83d820182610518565b92505b5050610fb681611037565b5050610fc181610984565b9050610eb9565b5050610fd360018055565b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b806103415760405160e560020a62461bcd02815260206004820152602060248201527f55534443207472616e7366657220746f2063686172697479206661696c65642e6044820152606481fd5b806103415760405160e560020a62461bcd02815260206004820152602260248201527f546f74616c2066696e616c697a6174696f6e20616d6f756e7420746f6f20686960448201527f67680000000000000000000000000000000000000000000000000000000000006064820152608481fd5b806103415760405160e560020a62461bcd02815260206004820152602760248201527f4661696c656420746f2073656e642067617320746f20657068656d6572616c2060448201527f77616c6c65742e000000000000000000000000000000000000000000000000006064820152608481fd5b806103415760405160e560020a62461bcd02815260206004820152603160248201527f43686172697469657320616e6420616d6f756e747320617272617973206f662060448201527f646966666572656e74206c656e6774682e0000000000000000000000000000006064820152608481fd5b806103415760405160e560020a62461bcd02815260206004820152602260248201527f546f74616c2066696e616c697a6174696f6e20616d6f756e7420746f6f206c6f60448201527f772e0000000000000000000000000000000000000000000000000000000000006064820152608481fd5b806103415760405160e560020a62461bcd02815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606481fd5b6040513d6000823e3d81fd5b801515811461034157600080fdfea36469706673582212204837e4bf541790af15fbb607b23439581cfd0a8bea265f70933b2b6e1051dcba6c6578706572696d656e74616cf564736f6c63430008070041",
							"opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH2 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x142B DUP1 CODESIZE SUB PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND PUSH1 0xA0 ADD PUSH1 0xA0 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x64 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MSTORE DUP1 DUP3 PUSH1 0xA0 CODECOPY PUSH1 0x40 DUP2 SLT ISZERO PUSH2 0x7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0xA0 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND DUP2 EQ PUSH2 0x94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH1 0xC0 MLOAD DUP3 PUSH2 0xC1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x12FB DUP1 PUSH2 0x130 DUP4 CODECOPY PUSH1 0x80 MLOAD DUP3 DUP2 DUP2 PUSH2 0x205 ADD MSTORE PUSH2 0xB2F ADD MSTORE DUP1 DUP3 RETURN JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT DUP3 AND DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x1 PUSH1 0xA8 PUSH1 0x2 EXP SUB NOT AND CALLER PUSH1 0xA0 PUSH1 0x2 EXP PUSH1 0xFF MUL NOT AND OR PUSH1 0x0 SSTORE PUSH1 0x1 DUP1 SSTORE PUSH1 0x80 MSTORE PUSH1 0x2 SSTORE JUMP INVALID PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x28D JUMPI PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 DUP2 CALLDATALOAD DIV PUSH4 0x480A6FDC DUP2 EQ PUSH2 0xA3 JUMPI PUSH4 0x4AA4A4FC DUP2 EQ PUSH2 0xD3 JUMPI PUSH4 0x5C975ABB DUP2 EQ PUSH2 0x108 JUMPI PUSH4 0x715018A6 DUP2 EQ PUSH2 0x14A JUMPI PUSH4 0x89A30271 DUP2 EQ PUSH2 0x16A JUMPI PUSH4 0x8DA5CB5B DUP2 EQ PUSH2 0x19B JUMPI PUSH4 0x8DE9C372 DUP2 EQ PUSH2 0x1C6 JUMPI PUSH4 0xC31C9C07 DUP2 EQ PUSH2 0x1EE JUMPI PUSH4 0xF2FDE38B DUP2 EQ PUSH2 0x234 JUMPI PUSH4 0xF8B2CB4F DUP2 EQ PUSH2 0x24F JUMPI PUSH2 0x28A JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0xAD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xB6 CALLDATASIZE PUSH2 0x38A JUMP JUMPDEST PUSH2 0xC6 DUP2 DUP4 DUP6 DUP8 DUP10 DUP12 DUP14 DUP16 PUSH2 0xAFC JUMP JUMPDEST POP POP POP POP POP POP POP POP DUP2 DUP4 MLOAD RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0xDD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xE6 CALLDATASIZE PUSH2 0x32F JUMP JUMPDEST DUP3 MLOAD PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 DUP2 MSTORE PUSH1 0x20 DUP2 RETURN JUMPDEST SUB DUP2 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x112 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x11B CALLDATASIZE PUSH2 0x32F JUMP JUMPDEST PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 DUP4 SLOAD DIV AND DUP4 MLOAD DUP1 PUSH2 0x104 DUP4 DUP4 SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x154 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x15D CALLDATASIZE PUSH2 0x32F JUMP JUMPDEST PUSH2 0x165 PUSH2 0x9E3 JUMP JUMPDEST DUP2 DUP4 MLOAD RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x174 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x17D CALLDATASIZE PUSH2 0x32F JUMP JUMPDEST DUP3 MLOAD PUSH20 0xA0B86991C6218B36C1D19D4A2E9EB0CE3606EB48 DUP2 MSTORE PUSH1 0x20 DUP2 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x1A5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1AE CALLDATASIZE PUSH2 0x32F JUMP JUMPDEST DUP2 SLOAD DUP4 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND DUP1 DUP3 MSTORE SWAP1 PUSH1 0x20 DUP2 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x1D0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1D9 CALLDATASIZE PUSH2 0x425 JUMP JUMPDEST PUSH2 0x1E5 DUP2 DUP4 DUP6 DUP8 PUSH2 0xDF5 JUMP JUMPDEST POP POP POP POP DUP2 DUP4 MLOAD RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x1F8 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x201 CALLDATASIZE PUSH2 0x32F JUMP JUMPDEST DUP3 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x23E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x165 PUSH2 0x24A CALLDATASIZE PUSH2 0x358 JUMP JUMPDEST PUSH2 0xA32 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x259 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x280 PUSH2 0x265 CALLDATASIZE PUSH2 0x358 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST DUP4 MLOAD DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 RETURN JUMPDEST POP POP JUMPDEST POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND DUP2 EQ PUSH2 0x2AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2CA DUP2 PUSH2 0x5EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D7 DUP3 DUP3 PUSH2 0x6BC JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 POP DUP6 DUP2 ADD DUP2 DUP6 MUL DUP8 ADD DUP3 ADD DUP9 LT ISZERO PUSH2 0x2F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x316 JUMPI DUP2 CALLDATALOAD DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2FA JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD PUSH2 0x2AB DUP2 PUSH2 0x12A9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 NOT DUP3 ADD SLT ISZERO PUSH2 0x341 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SUB SLT ISZERO PUSH2 0x354 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x3 NOT DUP4 ADD SLT ISZERO PUSH2 0x36C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND DUP2 EQ PUSH2 0x384 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x100 PUSH1 0x3 NOT DUP11 ADD SLT ISZERO PUSH2 0x3A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP3 AND DUP3 EQ PUSH2 0x3BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP9 POP PUSH1 0x24 CALLDATALOAD SWAP1 DUP1 DUP3 AND DUP3 EQ PUSH2 0x3D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP7 POP PUSH1 0x44 CALLDATALOAD SWAP6 POP PUSH1 0x64 CALLDATALOAD SWAP5 POP PUSH1 0x84 CALLDATALOAD SWAP4 POP PUSH1 0xA4 CALLDATALOAD PUSH3 0xFFFFFF DUP1 DUP3 AND DUP3 EQ PUSH2 0x3FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 POP PUSH1 0xC4 CALLDATALOAD SWAP1 DUP1 DUP3 AND DUP3 EQ PUSH2 0x410 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 SWAP3 POP POP PUSH1 0xE4 CALLDATALOAD SWAP1 POP SWAP2 SWAP4 SWAP6 SWAP8 POP SWAP2 SWAP4 SWAP6 SWAP8 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH1 0x80 PUSH1 0x3 NOT DUP7 ADD SLT ISZERO PUSH2 0x43C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x444 PUSH2 0x293 JUMP JUMPDEST SWAP4 POP PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x45F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x23 DUP4 ADD SLT PUSH2 0x46E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x4 ADD CALLDATALOAD PUSH2 0x47C DUP2 PUSH2 0x5EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x489 DUP3 DUP3 PUSH2 0x6BC JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 POP PUSH1 0x24 DUP7 DUP2 ADD SWAP1 DUP3 DUP7 MUL DUP9 ADD ADD DUP13 LT ISZERO PUSH2 0x4AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH2 0x4DD JUMPI DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x4C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x4B0 JUMP JUMPDEST POP SWAP1 SWAP8 POP POP PUSH1 0x44 CALLDATALOAD SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x4F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x504 DUP7 DUP3 PUSH1 0x4 ADD PUSH2 0x2AE JUMP JUMPDEST SWAP3 POP POP PUSH2 0x50F PUSH2 0x323 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP4 POP SWAP2 SWAP4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x52A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x535 DUP2 PUSH2 0x12A9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x54E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 ADD SWAP1 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP5 MLOAD AND DUP4 MSTORE DUP1 PUSH1 0x20 DUP6 ADD MLOAD AND PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0xFFFFFF PUSH1 0x40 DUP6 ADD MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE DUP1 PUSH1 0x60 DUP6 ADD MLOAD AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP5 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE DUP1 PUSH1 0xE0 DUP6 ADD MLOAD AND PUSH1 0xE0 DUP5 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x5E8 JUMPI PUSH2 0x5E8 PUSH2 0x1008 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x608 JUMPI PUSH2 0x608 PUSH2 0x1008 JUMP JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x625 JUMPI PUSH2 0x625 PUSH2 0xFD9 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x63C JUMPI PUSH2 0x63C PUSH2 0xFD9 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 RETURNDATASIZE DUP1 ISZERO PUSH2 0x68E JUMPI RETURNDATASIZE PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x663 JUMPI PUSH2 0x663 PUSH2 0x1008 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x67A PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 PUSH2 0x6BC JUMP JUMPDEST DUP2 DUP2 MSTORE DUP1 SWAP4 POP RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP4 ADD RETURNDATACOPY POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x6B6 JUMPI PUSH2 0x6B6 PUSH2 0x1008 JUMP JUMPDEST PUSH1 0x40 MSTORE POP JUMP JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x6E2 JUMPI PUSH2 0x6E2 PUSH2 0x1008 JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x0 SLOAD AND CALLER DUP2 EQ PUSH2 0x341 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 REVERT JUMPDEST PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 PUSH1 0x0 SLOAD DIV AND ISZERO PUSH2 0x7AE JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP7 SWAP1 MSTORE DUP3 MSTORE PUSH1 0x64 PUSH2 0x800 DUP2 DUP5 PUSH2 0x6BC JUMP JUMPDEST POP PUSH1 0x0 DUP1 DUP4 MLOAD DUP4 PUSH1 0x0 DUP8 GAS CALL SWAP2 POP POP PUSH2 0x817 PUSH2 0x641 JUMP JUMPDEST DUP2 DUP3 ISZERO PUSH2 0x840 JUMPI DUP2 MLOAD DUP1 ISZERO DUP1 PUSH2 0x83C JUMPI PUSH2 0x839 PUSH1 0x20 DUP4 DUP7 ADD ADD PUSH1 0x20 DUP7 ADD PUSH2 0x518 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 POP POP JUMPDEST DUP1 PUSH2 0x88F JUMPI PUSH1 0x40 MLOAD SWAP3 POP PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP5 ADD MSTORE PUSH32 0x5341000000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x64 DUP4 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND PUSH1 0x24 DUP5 ADD MSTORE DUP1 DUP7 AND PUSH1 0x44 DUP5 ADD MSTORE POP DUP6 PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x64 DUP3 MSTORE PUSH2 0x8ED DUP3 PUSH2 0x696 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 MLOAD DUP4 PUSH1 0x0 DUP8 GAS CALL SWAP2 POP POP PUSH2 0x903 PUSH2 0x641 JUMP JUMPDEST DUP2 DUP3 ISZERO PUSH2 0x92C JUMPI DUP2 MLOAD DUP1 ISZERO DUP1 PUSH2 0x928 JUMPI PUSH2 0x925 PUSH1 0x20 DUP4 DUP7 ADD ADD PUSH1 0x20 DUP7 ADD PUSH2 0x518 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 POP POP JUMPDEST DUP1 PUSH2 0x97B JUMPI PUSH1 0x40 MLOAD SWAP3 POP PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP5 ADD MSTORE PUSH32 0x5354460000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x64 DUP4 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x998 JUMPI PUSH2 0x998 PUSH2 0xFD9 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 LT PUSH2 0x9D8 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x20 SWAP2 DUP3 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x9EB PUSH2 0x6E9 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT DUP2 AND PUSH1 0x0 SSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 PUSH1 0x40 MLOAD LOG3 POP JUMP JUMPDEST PUSH2 0xA3A PUSH2 0x6E9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP3 AND DUP1 PUSH2 0xAB8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 REVERT JUMPDEST PUSH1 0x0 SLOAD DUP2 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT DUP3 AND OR PUSH1 0x0 SSTORE DUP4 DUP4 DUP3 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 PUSH1 0x40 MLOAD LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0xB04 PUSH2 0x744 JUMP JUMPDEST PUSH2 0xB13 PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x1250 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0xB24 DUP4 ADDRESS CALLER DUP6 PUSH2 0x897 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 PUSH32 0x0 AND PUSH2 0xB5A DUP6 DUP3 DUP7 PUSH2 0x7B0 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0xB65 PUSH2 0x5C4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND DUP2 MSTORE PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF DUP11 AND PUSH1 0x40 DUP3 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE ADDRESS PUSH1 0x60 DUP4 ADD MSTORE DUP9 PUSH1 0x80 DUP4 ADD MSTORE DUP3 PUSH1 0xA0 DUP4 ADD MSTORE DUP10 PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x0 SWAP3 POP DUP3 PUSH1 0xE0 DUP4 ADD MSTORE DUP4 EXTCODESIZE PUSH2 0xBC6 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH32 0xDB3E219800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 DUP2 DUP3 PUSH2 0xBFC DUP7 PUSH1 0x4 DUP7 ADD PUSH2 0x555 JUMP JUMPDEST SUB DUP4 DUP8 DUP10 GAS CALL SWAP3 POP DUP3 PUSH2 0xC11 JUMPI PUSH2 0xC11 PUSH2 0x129D JUMP JUMPDEST DUP4 DUP4 ISZERO PUSH2 0xC31 JUMPI PUSH2 0xC22 RETURNDATASIZE DUP4 PUSH2 0x6BC JUMP JUMPDEST PUSH2 0xC2E RETURNDATASIZE DUP4 ADD DUP4 PUSH2 0x53C JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x2 SLOAD SWAP4 POP PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 SWAP2 POP DUP2 EXTCODESIZE PUSH2 0xC57 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP3 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE DUP6 DUP2 PUSH1 0x24 DUP2 DUP4 DUP8 GAS CALL SWAP5 POP DUP5 PUSH2 0xC9B JUMPI PUSH2 0xC9B PUSH2 0x129D JUMP JUMPDEST DUP5 ISZERO PUSH2 0xCB7 JUMPI PUSH2 0xCAB RETURNDATASIZE DUP3 PUSH2 0x6BC JUMP JUMPDEST PUSH2 0xCB7 RETURNDATASIZE DUP3 ADD DUP3 PUSH2 0x344 JUMP JUMPDEST POP PUSH1 0x2 SLOAD SWAP4 POP DUP5 DUP6 DUP7 DUP6 MLOAD DUP8 DUP12 DUP14 AND GAS CALL SWAP7 POP PUSH2 0xCD2 PUSH2 0x641 JUMP JUMPDEST POP PUSH2 0xCDC DUP8 PUSH2 0x10F7 JUMP JUMPDEST PUSH2 0xCE6 DUP2 DUP12 PUSH2 0x62A JUMP JUMPDEST SWAP7 POP POP POP PUSH2 0xCF2 PUSH2 0x5C4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 AND DUP2 MSTORE SWAP2 POP PUSH20 0xA0B86991C6218B36C1D19D4A2E9EB0CE3606EB48 PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0xFFFFFF DUP13 AND DUP3 DUP3 ADD MSTORE ADDRESS PUSH1 0x60 DUP4 ADD MSTORE DUP9 PUSH1 0x80 DUP4 ADD MSTORE DUP5 PUSH1 0xA0 DUP4 ADD MSTORE DUP13 PUSH1 0xC0 DUP4 ADD MSTORE DUP3 PUSH1 0xE0 DUP4 ADD MSTORE DUP4 EXTCODESIZE PUSH2 0xD4C JUMPI DUP3 DUP4 REVERT JUMPDEST MLOAD PUSH32 0x414BF38900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP4 POP PUSH1 0x20 DUP5 DUP1 PUSH2 0xD83 DUP5 PUSH1 0x4 DUP4 ADD PUSH2 0x555 JUMP JUMPDEST SUB DUP7 DUP6 DUP8 GAS CALL SWAP3 POP POP DUP2 PUSH2 0xD99 JUMPI PUSH2 0xD99 PUSH2 0x129D JUMP JUMPDEST DUP2 ISZERO PUSH2 0xDB8 JUMPI PUSH2 0xDA9 RETURNDATASIZE DUP5 PUSH2 0x6BC JUMP JUMPDEST PUSH2 0xDB5 RETURNDATASIZE DUP5 ADD DUP5 PUSH2 0x53C JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 POP PUSH2 0xDDD DUP2 DUP5 SLOAD PUSH2 0x612 JUMP JUMPDEST DUP4 SSTORE POP POP POP PUSH2 0xDEB PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xDFD PUSH2 0x744 JUMP JUMPDEST PUSH1 0x1 PUSH2 0xE0D PUSH1 0x2 DUP3 SLOAD EQ ISZERO PUSH2 0x1250 JUMP JUMPDEST PUSH1 0x2 DUP2 SSTORE DUP3 MLOAD PUSH2 0xE1F DUP6 MLOAD DUP3 EQ PUSH2 0x116A JUMP JUMPDEST POP PUSH1 0x0 DUP1 JUMPDEST DUP3 ISZERO PUSH2 0xE5D JUMPI DUP6 MLOAD DUP2 LT PUSH2 0xE37 JUMPI PUSH2 0xE5D JUMP JUMPDEST PUSH2 0xE4B PUSH2 0xE44 DUP3 DUP9 PUSH2 0x99F JUMP JUMPDEST MLOAD DUP4 PUSH2 0x612 JUMP JUMPDEST SWAP2 POP PUSH2 0xE56 DUP2 PUSH2 0x984 JUMP JUMPDEST SWAP1 POP PUSH2 0xE24 JUMP JUMPDEST POP PUSH2 0xE88 PUSH2 0xE7F DUP5 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD DUP3 GT ISZERO PUSH2 0x1084 JUMP JUMPDEST DUP6 DUP7 PUSH2 0xEAB JUMPI POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 EQ JUMPDEST PUSH2 0xEB4 DUP2 PUSH2 0x11DD JUMP JUMPDEST POP POP PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0xFC8 JUMPI DUP4 MLOAD DUP2 LT PUSH2 0xECC JUMPI PUSH2 0xFC8 JUMP JUMPDEST PUSH2 0xF07 PUSH2 0xEFA PUSH2 0xEE6 PUSH2 0xEDF DUP5 DUP9 PUSH2 0x99F JUMP JUMPDEST MLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xF11 DUP3 DUP8 PUSH2 0x99F JUMP JUMPDEST MLOAD PUSH20 0xA0B86991C6218B36C1D19D4A2E9EB0CE3606EB48 DUP1 EXTCODESIZE PUSH2 0xF32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x20 DUP2 PUSH1 0x44 DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP4 POP DUP4 PUSH2 0xF88 JUMPI PUSH2 0xF88 PUSH2 0x129D JUMP JUMPDEST PUSH1 0x0 SWAP3 POP DUP4 ISZERO PUSH2 0xFAB JUMPI PUSH2 0xF9C RETURNDATASIZE DUP3 PUSH2 0x6BC JUMP JUMPDEST PUSH2 0xFA8 RETURNDATASIZE DUP3 ADD DUP3 PUSH2 0x518 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP PUSH2 0xFB6 DUP2 PUSH2 0x1037 JUMP JUMPDEST POP POP PUSH2 0xFC1 DUP2 PUSH2 0x984 JUMP JUMPDEST SWAP1 POP PUSH2 0xEB9 JUMP JUMPDEST POP POP PUSH2 0xFD3 PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 PUSH2 0x341 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x55534443207472616E7366657220746F2063686172697479206661696C65642E PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 REVERT JUMPDEST DUP1 PUSH2 0x341 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F74616C2066696E616C697A6174696F6E20616D6F756E7420746F6F206869 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6768000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 REVERT JUMPDEST DUP1 PUSH2 0x341 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4661696C656420746F2073656E642067617320746F20657068656D6572616C20 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x77616C6C65742E00000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 REVERT JUMPDEST DUP1 PUSH2 0x341 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43686172697469657320616E6420616D6F756E747320617272617973206F6620 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x646966666572656E74206C656E6774682E000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 REVERT JUMPDEST DUP1 PUSH2 0x341 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F74616C2066696E616C697A6174696F6E20616D6F756E7420746F6F206C6F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x772E000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 REVERT JUMPDEST DUP1 PUSH2 0x341 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE DUP2 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x341 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 BASEFEE CALLDATACOPY 0xE4 0xBF SLOAD OR SWAP1 0xAF ISZERO 0xFB 0xB6 SMOD 0xB2 CALLVALUE CODECOPY PC SHR REVERT EXP DUP12 0xEA 0x26 0x5F PUSH17 0x933B2B6E1051DCBA6C6578706572696D65 PUSH15 0x74616CF564736F6C63430008070041 ",
							"sourceMap": "573:4882:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;573:4882:10;;;;;-1:-1:-1;573:4882:10;;;;;;;;;;;;;;-1:-1:-1;;573:4882:10;;-1:-1:-1;;573:4882:10;;-1:-1:-1;;;;;573:4882:10;;;;;;-1:-1:-1;;573:4882:10;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;1039:172;2525:6:1;573:4882:10;;719:10:5;-1:-1:-1;;;;;;573:4882:10;;;;;;;;;;719:10:5;;-1:-1:-1;;;;;573:4882:10;;;2573:40:1;;;-1:-1:-1;;;;;;573:4882:10;719:10:5;-1:-1:-1;;;;;;573:4882:10;;2525:6:1;573:4882:10;;;;1120:24;;573:4882;;1039:172::o"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {
								"1288": [
									{
										"length": 32,
										"start": 517
									},
									{
										"length": 32,
										"start": 2863
									}
								]
							},
							"linkReferences": {},
							"object": "6040608081526004361061028d5760007c010000000000000000000000000000000000000000000000000000000081350463480a6fdc81146100a357634aa4a4fc81146100d357635c975abb81146101085763715018a6811461014a576389a30271811461016a57638da5cb5b811461019b57638de9c37281146101c65763c31c9c0781146101ee5763f2fde38b81146102345763f8b2cb4f811461024f5761028a565b34156100ad578182fd5b6100b63661038a565b6100c681838587898b8d8f610afc565b5050505050505050818351f35b34156100dd578182fd5b6100e63661032f565b825173c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28152602081f35b0381f35b3415610112578182fd5b61011b3661032f565b60ff74010000000000000000000000000000000000000000835404168351806101048383901515815260200190565b3415610154578182fd5b61015d3661032f565b6101656109e3565b818351f35b3415610174578182fd5b61017d3661032f565b825173a0b86991c6218b36c1d19d4a2e9eb0ce3606eb488152602081f35b34156101a5578182fd5b6101ae3661032f565b81548351600160a060020a0390911680825290602081f35b34156101d0578182fd5b6101d936610425565b6101e581838587610df5565b50505050818351f35b34156101f8578182fd5b6102013661032f565b82517f0000000000000000000000000000000000000000000000000000000000000000600160a060020a03168152602081f35b341561023e578182fd5b61016561024a36610358565b610a32565b3415610259578182fd5b61028061026536610358565b600160a060020a031660009081526003602052604090205490565b8351818152602081f35b50505b50600080fd5b600435600160a060020a03811681146102ab57600080fd5b90565b600082601f8301126102bf57600080fd5b81356102ca816105ee565b6040516102d782826106bc565b82815260208082019250858101818502870182018810156102f757600080fd5b60005b85811015610316578135855293820193908201906001016102fa565b5091979650505050505050565b6064356102ab816112a9565b60006003198201121561034157600080fd5b50565b6000818303121561035457600080fd5b5050565b600060206003198301121561036c57600080fd5b600435600160a060020a038116811461038457600080fd5b92915050565b6000808080808080806101006003198a0112156103a657600080fd5b600435600160a060020a0380821682146103bf57600080fd5b9098506024359080821682146103d457600080fd5b50965060443595506064359450608435935060a43562ffffff80821682146103fb57600080fd5b90935060c43590808216821461041057600080fd5b508092505060e4359050919395975091939597565b600080808060806003198601121561043c57600080fd5b610444610293565b935060243567ffffffffffffffff8082111561045f57600080fd5b86602383011261046e57600080fd5b816004013561047c816105ee565b60405161048982826106bc565b828152602080820192506024868101908286028801018c10156104ab57600080fd5b600096505b848710156104dd57803560ff811681146104c957600080fd5b8452600196909601959281019281016104b0565b509097505060443593505050808211156104f657600080fd5b5061050486826004016102ae565b92505061050f610323565b90509193509193565b60006020828403121561052a57600080fd5b8151610535816112a9565b9392505050565b60006020828403121561054e57600080fd5b5051919050565b600061010082019050600160a060020a0380845116835280602085015116602084015262ffffff60408501511660408401528060608501511660608401526080840151608084015260a084015160a084015260c084015160c08401528060e08501511660e08401525092915050565b604051610100810167ffffffffffffffff811182821017156105e8576105e8611008565b60405290565b600067ffffffffffffffff82111561060857610608611008565b5060209081020190565b6000821982111561062557610625610fd9565b500190565b60008282101561063c5761063c610fd9565b500390565b60003d801561068e573d67ffffffffffffffff81111561066357610663611008565b60405161067a601f8301601f1916602001826106bc565b8181528093503d6000602083013e50505090565b606091505090565b60a0810181811067ffffffffffffffff821117156106b6576106b6611008565b60405250565b601f8201601f1916810167ffffffffffffffff811182821017156106e2576106e2611008565b6040525050565b600160a060020a03600054163381146103415760405160e560020a62461bcd02815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606481fd5b60ff740100000000000000000000000000000000000000006000540416156107ae5760405160e560020a62461bcd02815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606481fd5b565b6040517f095ea7b30000000000000000000000000000000000000000000000000000000060208201908152600160a060020a038416602483015260448083018690528252606461080081846106bc565b506000808351836000875af1915050610817610641565b81821561084057815180158061083c5761083960208386010160208601610518565b90505b9150505b8061088f57604051925060e560020a62461bcd02835260206004840152600260248401527f53410000000000000000000000000000000000000000000000000000000000006044840152606483fd5b505050505050565b604051602081017f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a038085166024840152808616604484015250856064830152606482526108ed82610696565b6000808351836000875af1915050610903610641565b81821561092c5781518015806109285761092560208386010160208601610518565b90505b9150505b8061097b57604051925060e560020a62461bcd02835260206004840152600360248401527f53544600000000000000000000000000000000000000000000000000000000006044840152606483fd5b50505050505050565b600060001982141561099857610998610fd9565b5060010190565b6000815183106109d8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b506020918202010190565b6109eb6106e9565b600054600160a060020a031981166000556000600160a060020a0382167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a350565b610a3a6106e9565b600160a060020a0380821680610ab85760405160e560020a62461bcd02815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608481fd5b60005481600160a060020a0319821617600055838382167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a350505050565b610b04610744565b610b1360026001541415611250565b6002600155610b2483303385610897565b600160a060020a03807f000000000000000000000000000000000000000000000000000000000000000016610b5a8582866107b0565b600254610b656105c4565b600160a060020a038616815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2602082015262ffffff8a166040828101919091523060608301528860808301528260a08301528960c0830152600092508260e0830152833b610bc6578283fd5b80517fdb3e219800000000000000000000000000000000000000000000000000000000815260208182610bfc8660048601610555565b038387895af1925082610c1157610c1161129d565b838315610c3157610c223d836106bc565b610c2e3d83018361053c565b90505b600254935073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc29150813b610c57578485fd5b82517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815260048101859052858160248183875af1945084610c9b57610c9b61129d565b8415610cb757610cab3d826106bc565b610cb73d820182610344565b5060025493508485868551878b8d165af19650610cd2610641565b50610cdc876110f7565b610ce6818b61062a565b96505050610cf26105c4565b600160a060020a0388168152915073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48602083015262ffffff8c16828201523060608301528860808301528460a08301528c60c08301528260e0830152833b610d4c578283fd5b517f414bf389000000000000000000000000000000000000000000000000000000008152935060208480610d838460048301610555565b038685875af192505081610d9957610d9961129d565b8115610db857610da93d846106bc565b610db53d84018461053c565b90505b600160a060020a03841660009081526003602052604090209250610ddd818454610612565b8355505050610deb60018055565b5050505050505050565b610dfd610744565b6001610e0d600282541415611250565b600281558251610e1f8551821461116a565b506000805b8215610e5d5785518110610e3757610e5d565b610e4b610e44828861099f565b5183610612565b9150610e5681610984565b9050610e24565b50610e88610e7f84600160a060020a0316600090815260036020526040902090565b54821115611084565b8586610eab5750600160a060020a03831660009081526003602052604090205481145b610eb4816111dd565b505060005b8115610fc85783518110610ecc57610fc8565b610f07610efa610ee6610edf848861099f565b5160ff1690565b60ff16600090815260046020526040902090565b54600160a060020a031690565b610f11828761099f565b5173a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48803b610f3257600080fd5b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0384166004820152602481018390526020816044816000865af1935083610f8857610f8861129d565b600092508315610fab57610f9c3d826106bc565b610fa83d820182610518565b92505b5050610fb681611037565b5050610fc181610984565b9050610eb9565b5050610fd360018055565b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b806103415760405160e560020a62461bcd02815260206004820152602060248201527f55534443207472616e7366657220746f2063686172697479206661696c65642e6044820152606481fd5b806103415760405160e560020a62461bcd02815260206004820152602260248201527f546f74616c2066696e616c697a6174696f6e20616d6f756e7420746f6f20686960448201527f67680000000000000000000000000000000000000000000000000000000000006064820152608481fd5b806103415760405160e560020a62461bcd02815260206004820152602760248201527f4661696c656420746f2073656e642067617320746f20657068656d6572616c2060448201527f77616c6c65742e000000000000000000000000000000000000000000000000006064820152608481fd5b806103415760405160e560020a62461bcd02815260206004820152603160248201527f43686172697469657320616e6420616d6f756e747320617272617973206f662060448201527f646966666572656e74206c656e6774682e0000000000000000000000000000006064820152608481fd5b806103415760405160e560020a62461bcd02815260206004820152602260248201527f546f74616c2066696e616c697a6174696f6e20616d6f756e7420746f6f206c6f60448201527f772e0000000000000000000000000000000000000000000000000000000000006064820152608481fd5b806103415760405160e560020a62461bcd02815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606481fd5b6040513d6000823e3d81fd5b801515811461034157600080fdfea36469706673582212204837e4bf541790af15fbb607b23439581cfd0a8bea265f70933b2b6e1051dcba6c6578706572696d656e74616cf564736f6c63430008070041",
							"opcodes": "PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x28D JUMPI PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 DUP2 CALLDATALOAD DIV PUSH4 0x480A6FDC DUP2 EQ PUSH2 0xA3 JUMPI PUSH4 0x4AA4A4FC DUP2 EQ PUSH2 0xD3 JUMPI PUSH4 0x5C975ABB DUP2 EQ PUSH2 0x108 JUMPI PUSH4 0x715018A6 DUP2 EQ PUSH2 0x14A JUMPI PUSH4 0x89A30271 DUP2 EQ PUSH2 0x16A JUMPI PUSH4 0x8DA5CB5B DUP2 EQ PUSH2 0x19B JUMPI PUSH4 0x8DE9C372 DUP2 EQ PUSH2 0x1C6 JUMPI PUSH4 0xC31C9C07 DUP2 EQ PUSH2 0x1EE JUMPI PUSH4 0xF2FDE38B DUP2 EQ PUSH2 0x234 JUMPI PUSH4 0xF8B2CB4F DUP2 EQ PUSH2 0x24F JUMPI PUSH2 0x28A JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0xAD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xB6 CALLDATASIZE PUSH2 0x38A JUMP JUMPDEST PUSH2 0xC6 DUP2 DUP4 DUP6 DUP8 DUP10 DUP12 DUP14 DUP16 PUSH2 0xAFC JUMP JUMPDEST POP POP POP POP POP POP POP POP DUP2 DUP4 MLOAD RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0xDD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xE6 CALLDATASIZE PUSH2 0x32F JUMP JUMPDEST DUP3 MLOAD PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 DUP2 MSTORE PUSH1 0x20 DUP2 RETURN JUMPDEST SUB DUP2 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x112 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x11B CALLDATASIZE PUSH2 0x32F JUMP JUMPDEST PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 DUP4 SLOAD DIV AND DUP4 MLOAD DUP1 PUSH2 0x104 DUP4 DUP4 SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x154 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x15D CALLDATASIZE PUSH2 0x32F JUMP JUMPDEST PUSH2 0x165 PUSH2 0x9E3 JUMP JUMPDEST DUP2 DUP4 MLOAD RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x174 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x17D CALLDATASIZE PUSH2 0x32F JUMP JUMPDEST DUP3 MLOAD PUSH20 0xA0B86991C6218B36C1D19D4A2E9EB0CE3606EB48 DUP2 MSTORE PUSH1 0x20 DUP2 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x1A5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1AE CALLDATASIZE PUSH2 0x32F JUMP JUMPDEST DUP2 SLOAD DUP4 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND DUP1 DUP3 MSTORE SWAP1 PUSH1 0x20 DUP2 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x1D0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1D9 CALLDATASIZE PUSH2 0x425 JUMP JUMPDEST PUSH2 0x1E5 DUP2 DUP4 DUP6 DUP8 PUSH2 0xDF5 JUMP JUMPDEST POP POP POP POP DUP2 DUP4 MLOAD RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x1F8 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x201 CALLDATASIZE PUSH2 0x32F JUMP JUMPDEST DUP3 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x23E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x165 PUSH2 0x24A CALLDATASIZE PUSH2 0x358 JUMP JUMPDEST PUSH2 0xA32 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x259 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x280 PUSH2 0x265 CALLDATASIZE PUSH2 0x358 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST DUP4 MLOAD DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 RETURN JUMPDEST POP POP JUMPDEST POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND DUP2 EQ PUSH2 0x2AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2CA DUP2 PUSH2 0x5EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D7 DUP3 DUP3 PUSH2 0x6BC JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 POP DUP6 DUP2 ADD DUP2 DUP6 MUL DUP8 ADD DUP3 ADD DUP9 LT ISZERO PUSH2 0x2F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x316 JUMPI DUP2 CALLDATALOAD DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2FA JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD PUSH2 0x2AB DUP2 PUSH2 0x12A9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 NOT DUP3 ADD SLT ISZERO PUSH2 0x341 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SUB SLT ISZERO PUSH2 0x354 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x3 NOT DUP4 ADD SLT ISZERO PUSH2 0x36C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND DUP2 EQ PUSH2 0x384 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x100 PUSH1 0x3 NOT DUP11 ADD SLT ISZERO PUSH2 0x3A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP3 AND DUP3 EQ PUSH2 0x3BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP9 POP PUSH1 0x24 CALLDATALOAD SWAP1 DUP1 DUP3 AND DUP3 EQ PUSH2 0x3D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP7 POP PUSH1 0x44 CALLDATALOAD SWAP6 POP PUSH1 0x64 CALLDATALOAD SWAP5 POP PUSH1 0x84 CALLDATALOAD SWAP4 POP PUSH1 0xA4 CALLDATALOAD PUSH3 0xFFFFFF DUP1 DUP3 AND DUP3 EQ PUSH2 0x3FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 POP PUSH1 0xC4 CALLDATALOAD SWAP1 DUP1 DUP3 AND DUP3 EQ PUSH2 0x410 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 SWAP3 POP POP PUSH1 0xE4 CALLDATALOAD SWAP1 POP SWAP2 SWAP4 SWAP6 SWAP8 POP SWAP2 SWAP4 SWAP6 SWAP8 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH1 0x80 PUSH1 0x3 NOT DUP7 ADD SLT ISZERO PUSH2 0x43C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x444 PUSH2 0x293 JUMP JUMPDEST SWAP4 POP PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x45F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x23 DUP4 ADD SLT PUSH2 0x46E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x4 ADD CALLDATALOAD PUSH2 0x47C DUP2 PUSH2 0x5EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x489 DUP3 DUP3 PUSH2 0x6BC JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 POP PUSH1 0x24 DUP7 DUP2 ADD SWAP1 DUP3 DUP7 MUL DUP9 ADD ADD DUP13 LT ISZERO PUSH2 0x4AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH2 0x4DD JUMPI DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x4C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x4B0 JUMP JUMPDEST POP SWAP1 SWAP8 POP POP PUSH1 0x44 CALLDATALOAD SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x4F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x504 DUP7 DUP3 PUSH1 0x4 ADD PUSH2 0x2AE JUMP JUMPDEST SWAP3 POP POP PUSH2 0x50F PUSH2 0x323 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP4 POP SWAP2 SWAP4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x52A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x535 DUP2 PUSH2 0x12A9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x54E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 ADD SWAP1 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP5 MLOAD AND DUP4 MSTORE DUP1 PUSH1 0x20 DUP6 ADD MLOAD AND PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0xFFFFFF PUSH1 0x40 DUP6 ADD MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE DUP1 PUSH1 0x60 DUP6 ADD MLOAD AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP5 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE DUP1 PUSH1 0xE0 DUP6 ADD MLOAD AND PUSH1 0xE0 DUP5 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x5E8 JUMPI PUSH2 0x5E8 PUSH2 0x1008 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x608 JUMPI PUSH2 0x608 PUSH2 0x1008 JUMP JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x625 JUMPI PUSH2 0x625 PUSH2 0xFD9 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x63C JUMPI PUSH2 0x63C PUSH2 0xFD9 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 RETURNDATASIZE DUP1 ISZERO PUSH2 0x68E JUMPI RETURNDATASIZE PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x663 JUMPI PUSH2 0x663 PUSH2 0x1008 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x67A PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 PUSH2 0x6BC JUMP JUMPDEST DUP2 DUP2 MSTORE DUP1 SWAP4 POP RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP4 ADD RETURNDATACOPY POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x6B6 JUMPI PUSH2 0x6B6 PUSH2 0x1008 JUMP JUMPDEST PUSH1 0x40 MSTORE POP JUMP JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x6E2 JUMPI PUSH2 0x6E2 PUSH2 0x1008 JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x0 SLOAD AND CALLER DUP2 EQ PUSH2 0x341 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 REVERT JUMPDEST PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 PUSH1 0x0 SLOAD DIV AND ISZERO PUSH2 0x7AE JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP7 SWAP1 MSTORE DUP3 MSTORE PUSH1 0x64 PUSH2 0x800 DUP2 DUP5 PUSH2 0x6BC JUMP JUMPDEST POP PUSH1 0x0 DUP1 DUP4 MLOAD DUP4 PUSH1 0x0 DUP8 GAS CALL SWAP2 POP POP PUSH2 0x817 PUSH2 0x641 JUMP JUMPDEST DUP2 DUP3 ISZERO PUSH2 0x840 JUMPI DUP2 MLOAD DUP1 ISZERO DUP1 PUSH2 0x83C JUMPI PUSH2 0x839 PUSH1 0x20 DUP4 DUP7 ADD ADD PUSH1 0x20 DUP7 ADD PUSH2 0x518 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 POP POP JUMPDEST DUP1 PUSH2 0x88F JUMPI PUSH1 0x40 MLOAD SWAP3 POP PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP5 ADD MSTORE PUSH32 0x5341000000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x64 DUP4 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND PUSH1 0x24 DUP5 ADD MSTORE DUP1 DUP7 AND PUSH1 0x44 DUP5 ADD MSTORE POP DUP6 PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x64 DUP3 MSTORE PUSH2 0x8ED DUP3 PUSH2 0x696 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 MLOAD DUP4 PUSH1 0x0 DUP8 GAS CALL SWAP2 POP POP PUSH2 0x903 PUSH2 0x641 JUMP JUMPDEST DUP2 DUP3 ISZERO PUSH2 0x92C JUMPI DUP2 MLOAD DUP1 ISZERO DUP1 PUSH2 0x928 JUMPI PUSH2 0x925 PUSH1 0x20 DUP4 DUP7 ADD ADD PUSH1 0x20 DUP7 ADD PUSH2 0x518 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 POP POP JUMPDEST DUP1 PUSH2 0x97B JUMPI PUSH1 0x40 MLOAD SWAP3 POP PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP5 ADD MSTORE PUSH32 0x5354460000000000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x64 DUP4 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x998 JUMPI PUSH2 0x998 PUSH2 0xFD9 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 LT PUSH2 0x9D8 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x20 SWAP2 DUP3 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x9EB PUSH2 0x6E9 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT DUP2 AND PUSH1 0x0 SSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 PUSH1 0x40 MLOAD LOG3 POP JUMP JUMPDEST PUSH2 0xA3A PUSH2 0x6E9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP3 AND DUP1 PUSH2 0xAB8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 REVERT JUMPDEST PUSH1 0x0 SLOAD DUP2 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT DUP3 AND OR PUSH1 0x0 SSTORE DUP4 DUP4 DUP3 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 PUSH1 0x40 MLOAD LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0xB04 PUSH2 0x744 JUMP JUMPDEST PUSH2 0xB13 PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x1250 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0xB24 DUP4 ADDRESS CALLER DUP6 PUSH2 0x897 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 PUSH32 0x0 AND PUSH2 0xB5A DUP6 DUP3 DUP7 PUSH2 0x7B0 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0xB65 PUSH2 0x5C4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND DUP2 MSTORE PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF DUP11 AND PUSH1 0x40 DUP3 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE ADDRESS PUSH1 0x60 DUP4 ADD MSTORE DUP9 PUSH1 0x80 DUP4 ADD MSTORE DUP3 PUSH1 0xA0 DUP4 ADD MSTORE DUP10 PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x0 SWAP3 POP DUP3 PUSH1 0xE0 DUP4 ADD MSTORE DUP4 EXTCODESIZE PUSH2 0xBC6 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH32 0xDB3E219800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 DUP2 DUP3 PUSH2 0xBFC DUP7 PUSH1 0x4 DUP7 ADD PUSH2 0x555 JUMP JUMPDEST SUB DUP4 DUP8 DUP10 GAS CALL SWAP3 POP DUP3 PUSH2 0xC11 JUMPI PUSH2 0xC11 PUSH2 0x129D JUMP JUMPDEST DUP4 DUP4 ISZERO PUSH2 0xC31 JUMPI PUSH2 0xC22 RETURNDATASIZE DUP4 PUSH2 0x6BC JUMP JUMPDEST PUSH2 0xC2E RETURNDATASIZE DUP4 ADD DUP4 PUSH2 0x53C JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x2 SLOAD SWAP4 POP PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 SWAP2 POP DUP2 EXTCODESIZE PUSH2 0xC57 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP3 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE DUP6 DUP2 PUSH1 0x24 DUP2 DUP4 DUP8 GAS CALL SWAP5 POP DUP5 PUSH2 0xC9B JUMPI PUSH2 0xC9B PUSH2 0x129D JUMP JUMPDEST DUP5 ISZERO PUSH2 0xCB7 JUMPI PUSH2 0xCAB RETURNDATASIZE DUP3 PUSH2 0x6BC JUMP JUMPDEST PUSH2 0xCB7 RETURNDATASIZE DUP3 ADD DUP3 PUSH2 0x344 JUMP JUMPDEST POP PUSH1 0x2 SLOAD SWAP4 POP DUP5 DUP6 DUP7 DUP6 MLOAD DUP8 DUP12 DUP14 AND GAS CALL SWAP7 POP PUSH2 0xCD2 PUSH2 0x641 JUMP JUMPDEST POP PUSH2 0xCDC DUP8 PUSH2 0x10F7 JUMP JUMPDEST PUSH2 0xCE6 DUP2 DUP12 PUSH2 0x62A JUMP JUMPDEST SWAP7 POP POP POP PUSH2 0xCF2 PUSH2 0x5C4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 AND DUP2 MSTORE SWAP2 POP PUSH20 0xA0B86991C6218B36C1D19D4A2E9EB0CE3606EB48 PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0xFFFFFF DUP13 AND DUP3 DUP3 ADD MSTORE ADDRESS PUSH1 0x60 DUP4 ADD MSTORE DUP9 PUSH1 0x80 DUP4 ADD MSTORE DUP5 PUSH1 0xA0 DUP4 ADD MSTORE DUP13 PUSH1 0xC0 DUP4 ADD MSTORE DUP3 PUSH1 0xE0 DUP4 ADD MSTORE DUP4 EXTCODESIZE PUSH2 0xD4C JUMPI DUP3 DUP4 REVERT JUMPDEST MLOAD PUSH32 0x414BF38900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP4 POP PUSH1 0x20 DUP5 DUP1 PUSH2 0xD83 DUP5 PUSH1 0x4 DUP4 ADD PUSH2 0x555 JUMP JUMPDEST SUB DUP7 DUP6 DUP8 GAS CALL SWAP3 POP POP DUP2 PUSH2 0xD99 JUMPI PUSH2 0xD99 PUSH2 0x129D JUMP JUMPDEST DUP2 ISZERO PUSH2 0xDB8 JUMPI PUSH2 0xDA9 RETURNDATASIZE DUP5 PUSH2 0x6BC JUMP JUMPDEST PUSH2 0xDB5 RETURNDATASIZE DUP5 ADD DUP5 PUSH2 0x53C JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 POP PUSH2 0xDDD DUP2 DUP5 SLOAD PUSH2 0x612 JUMP JUMPDEST DUP4 SSTORE POP POP POP PUSH2 0xDEB PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xDFD PUSH2 0x744 JUMP JUMPDEST PUSH1 0x1 PUSH2 0xE0D PUSH1 0x2 DUP3 SLOAD EQ ISZERO PUSH2 0x1250 JUMP JUMPDEST PUSH1 0x2 DUP2 SSTORE DUP3 MLOAD PUSH2 0xE1F DUP6 MLOAD DUP3 EQ PUSH2 0x116A JUMP JUMPDEST POP PUSH1 0x0 DUP1 JUMPDEST DUP3 ISZERO PUSH2 0xE5D JUMPI DUP6 MLOAD DUP2 LT PUSH2 0xE37 JUMPI PUSH2 0xE5D JUMP JUMPDEST PUSH2 0xE4B PUSH2 0xE44 DUP3 DUP9 PUSH2 0x99F JUMP JUMPDEST MLOAD DUP4 PUSH2 0x612 JUMP JUMPDEST SWAP2 POP PUSH2 0xE56 DUP2 PUSH2 0x984 JUMP JUMPDEST SWAP1 POP PUSH2 0xE24 JUMP JUMPDEST POP PUSH2 0xE88 PUSH2 0xE7F DUP5 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD DUP3 GT ISZERO PUSH2 0x1084 JUMP JUMPDEST DUP6 DUP7 PUSH2 0xEAB JUMPI POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 EQ JUMPDEST PUSH2 0xEB4 DUP2 PUSH2 0x11DD JUMP JUMPDEST POP POP PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0xFC8 JUMPI DUP4 MLOAD DUP2 LT PUSH2 0xECC JUMPI PUSH2 0xFC8 JUMP JUMPDEST PUSH2 0xF07 PUSH2 0xEFA PUSH2 0xEE6 PUSH2 0xEDF DUP5 DUP9 PUSH2 0x99F JUMP JUMPDEST MLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xF11 DUP3 DUP8 PUSH2 0x99F JUMP JUMPDEST MLOAD PUSH20 0xA0B86991C6218B36C1D19D4A2E9EB0CE3606EB48 DUP1 EXTCODESIZE PUSH2 0xF32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x20 DUP2 PUSH1 0x44 DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP4 POP DUP4 PUSH2 0xF88 JUMPI PUSH2 0xF88 PUSH2 0x129D JUMP JUMPDEST PUSH1 0x0 SWAP3 POP DUP4 ISZERO PUSH2 0xFAB JUMPI PUSH2 0xF9C RETURNDATASIZE DUP3 PUSH2 0x6BC JUMP JUMPDEST PUSH2 0xFA8 RETURNDATASIZE DUP3 ADD DUP3 PUSH2 0x518 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP PUSH2 0xFB6 DUP2 PUSH2 0x1037 JUMP JUMPDEST POP POP PUSH2 0xFC1 DUP2 PUSH2 0x984 JUMP JUMPDEST SWAP1 POP PUSH2 0xEB9 JUMP JUMPDEST POP POP PUSH2 0xFD3 PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 PUSH2 0x341 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x55534443207472616E7366657220746F2063686172697479206661696C65642E PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 REVERT JUMPDEST DUP1 PUSH2 0x341 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F74616C2066696E616C697A6174696F6E20616D6F756E7420746F6F206869 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6768000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 REVERT JUMPDEST DUP1 PUSH2 0x341 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4661696C656420746F2073656E642067617320746F20657068656D6572616C20 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x77616C6C65742E00000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 REVERT JUMPDEST DUP1 PUSH2 0x341 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43686172697469657320616E6420616D6F756E747320617272617973206F6620 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x646966666572656E74206C656E6774682E000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 REVERT JUMPDEST DUP1 PUSH2 0x341 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F74616C2066696E616C697A6174696F6E20616D6F756E7420746F6F206C6F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x772E000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 REVERT JUMPDEST DUP1 PUSH2 0x341 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE DUP2 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x341 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 BASEFEE CALLDATACOPY 0xE4 0xBF SLOAD OR SWAP1 0xAF ISZERO 0xFB 0xB6 SMOD 0xB2 CALLVALUE CODECOPY PC SHR REVERT EXP DUP12 0xEA 0x26 0x5F PUSH17 0x933B2B6E1051DCBA6C6578706572696D65 PUSH15 0x74616CF564736F6C63430008070041 ",
							"sourceMap": "573:4882:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1217:3165;;;;;;;;;;:::i;:::-;;;;;;;;;573:4882;;;;;;;;;;;;;;;;:::i;:::-;;;722:42;573:4882;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1831:101:1;;:::i;:::-;573:4882:10;;;;;;;;;;;;;;;;:::i;:::-;;;801:42;573:4882;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;573:4882:10;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4388:936;;;;;;:::i;:::-;;;;;573:4882;;;;;;;;;;;;;;;;:::i;:::-;;;850:39;-1:-1:-1;;;;;573:4882:10;;;;;;;;;;;;;;;2081:198:1;573:4882:10;;;:::i;:::-;2081:198:1;:::i;573:4882:10:-;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;573:4882:10;-1:-1:-1;573:4882:10;;;5432:8;573:4882;;;;;;;5330:123;573:4882;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;573:4882:10;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;573:4882:10;;;;;;;;;;;-1:-1:-1;573:4882:10;;;-1:-1:-1;;573:4882:10;;-1:-1:-1;573:4882:10;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;573:4882:10;;;-1:-1:-1;;;;;;;573:4882:10:o;:::-;;;;;;:::i;:::-;;-1:-1:-1;;573:4882:10;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;573:4882:10;;;;;;;;;;;;-1:-1:-1;;;;;573:4882:10;;;;;;-1:-1:-1;;573:4882:10;;;;-1:-1:-1;;573:4882:10:o;:::-;;;;;;;;;;-1:-1:-1;;573:4882:10;;;;;;;;;;;;-1:-1:-1;;;;;573:4882:10;;;;;;;-1:-1:-1;;573:4882:10;;;;-1:-1:-1;573:4882:10;;;;;;;;;;-1:-1:-1;;573:4882:10;;-1:-1:-1;573:4882:10;-1:-1:-1;573:4882:10;;;-1:-1:-1;573:4882:10;;;-1:-1:-1;573:4882:10;;;-1:-1:-1;573:4882:10;;;;;;;;;;-1:-1:-1;;573:4882:10;;;;-1:-1:-1;573:4882:10;;;;;;;;;;-1:-1:-1;;573:4882:10;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;-1:-1:-1;;573:4882:10;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;573:4882:10;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;573:4882:10;;;;;;;;;;;;-1:-1:-1;573:4882:10;;;-1:-1:-1;;573:4882:10;;-1:-1:-1;573:4882:10;;;;;;;;;;;;;;;;;;-1:-1:-1;;573:4882:10;;;;;;;;;;;;;;;;;;;-1:-1:-1;573:4882:10;;-1:-1:-1;;573:4882:10;;;-1:-1:-1;;;573:4882:10;;;;;;-1:-1:-1;;573:4882:10;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;573:4882:10:o;:::-;;;;;;;;;;;;;;-1:-1:-1;573:4882:10;;;-1:-1:-1;573:4882:10:o;:::-;;;;;;;-1:-1:-1;;;;;573:4882:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;1701:1:3;;;;;;;;;;;;;;:::i;:::-;573:4882:10;1701:1:3;573:4882:10;:::o;:::-;;;;;;;;;;:::i;:::-;-1:-1:-1;573:4882:10;;;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;-1:-1:-1;573:4882:10;;:::o;:::-;;;;;;;;;;:::i;:::-;-1:-1:-1;573:4882:10;;:::o;1701:1:3:-;;;;;;;;573:4882:10;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;573:4882:10;;;;;:::i;:::-;;;;1701:1:3;;;;-1:-1:-1;573:4882:10;1701:1:3;;;;;;;:::o;:::-;573:4882:10;1701:1:3;;;;:::o;:::-;573:4882:10;1701:1:3;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;1701:1:3:o;:::-;573:4882:10;;;-1:-1:-1;;573:4882:10;1701:1:3;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;1701:1:3:o;1359:130:1:-;-1:-1:-1;;;;;1273:6:1;573:4882:10;;719:10:5;573:4882:10;1422:23:1;573:4882:10;;;;-1:-1:-1;;;;;573:4882:10;;;;;;;;;;;;;;;;;;;;1767:106:2;573:4882:10;;1685:7:2;573:4882:10;;;1836:9:2;573:4882:10;;;;-1:-1:-1;;;;;573:4882:10;;;;;;;;;;;;;;;;;;;;;1767:106:2:o;1873:307:9:-;573:4882:10;;2055:23:9;2032:58;;;;;;-1:-1:-1;;;;;573:4882:10;;2032:58:9;;;573:4882:10;;;;;;;;2032:58:9;;573:4882:10;2032:58:9;573:4882:10;;2032:58:9;:::i;:::-;;2021:70;;;;;;;;;;;;;;:::i;:::-;2109:57;;;;;2121:11;573:4882:10;2121:16:9;;:44;;;2141:24;2032:58;2141:24;;;;2032:58;2141:24;;;:::i;:::-;2121:44;;;2109:57;-1:-1:-1;;2109:57:9;573:4882:10;;;;;;;-1:-1:-1;;;;;573:4882:10;;2032:58:9;573:4882:10;;;;;2032:58:9;573:4882:10;;;;;;;;;;;;;;;1873:307:9;;;:::o;561:358::-;573:4882:10;;759:69:9;;;782:28;759:69;;-1:-1:-1;;;;;573:4882:10;;;759:69:9;;;573:4882:10;;;;;759:69:9;573:4882:10;;;;;759:69:9;573:4882:10;;;759:69:9;;;;;:::i;:::-;-1:-1:-1;;748:81:9;;;-1:-1:-1;748:81:9;;;;;;;;:::i;:::-;847:57;;;;;859:11;573:4882:10;859:16:9;;:44;;;879:24;759:69;879:24;;;;759:69;879:24;;;:::i;:::-;859:44;;;847:57;-1:-1:-1;;847:57:9;573:4882:10;;;;;;;-1:-1:-1;;;;;573:4882:10;;759:69:9;573:4882:10;;;;;759:69:9;573:4882:10;;;;;;;;;;;;;;;561:358:9;;;;:::o;573:4882:10:-;;-1:-1:-1;;573:4882:10;;;;;;;:::i;:::-;-1:-1:-1;573:4882:10;;;:::o;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;573:4882:10;;;;;;;:::o;1063:62:1:-;;;:::i;:::-;573:4882:10;;-1:-1:-1;;;;;573:4882:10;;;;;;-1:-1:-1;;;;;573:4882:10;;2573:40:1;573:4882:10;;;2573:40:1;;1063:62::o;:::-;;;:::i;:::-;-1:-1:-1;;;;;573:4882:10;2169:22:1;573:4882:10;;;;;;-1:-1:-1;;;;;573:4882:10;;;;;;;;;;;;;;;;;;;;;;;;;;2525:6:1;573:4882:10;;-1:-1:-1;;;;;573:4882:10;;;;2525:6:1;573:4882:10;2573:40:1;573:4882:10;;;2573:40:1;2525:6;573:4882:10;;2573:40:1;;;;1063:62;:::o;1204:72:2:-;;;:::i;:::-;2317:63:3;1744:1;2325:7;573:4882:10;2325:19:3;;2317:63;:::i;:::-;1744:1;2325:7;573:4882:10;1810:13;;1803:4;1783:10;1810:13;;:::i;:::-;-1:-1:-1;;;;;573:4882:10;1955:10;573:4882;1968:13;;;;;:::i;:::-;1744:1:3;573:4882:10;;;:::i;:::-;-1:-1:-1;;;;;573:4882:10;;;;722:42;2136:625;;;573:4882;;;;2136:625;;;;573:4882;;;;1803:4;2136:625;;;573:4882;;2136:625;;;573:4882;;2136:625;;;573:4882;;2136:625;;;573:4882;;;;;2136:625;;;573:4882;2920:43;;;;573:4882;;;2920:43;2136:625;573:4882;;2920:43;;2136:625;2920:43;;;;;;;;:::i;:::-;;;573:4882;2920:43;;;;;;;;;;:::i;:::-;573:4882;2920:43;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;1744:1:3;573:4882:10;;;722:42;;;;2998:46;;;573:4882;;;2998:46;573:4882;;;2998:46;;2920:43;2998:46;;573:4882;;;;;;;;722:42;2998:46;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;1744:1:3;573:4882:10;;;;;;2136:625;573:4882;3146:72;573:4882;3146:31;573:4882;3146:72;;;;;;:::i;:::-;;3228:68;;;:::i;:::-;3399:41;;;;:::i;:::-;;;;;573:4882;;:::i;:::-;-1:-1:-1;;;;;573:4882:10;;;;3587:625;-1:-1:-1;801:42:10;2136:625;3587;;573:4882;;;;3587:625;;;573:4882;1803:4;2136:625;3587;;573:4882;;2136:625;3587;;573:4882;;2136:625;3587;;573:4882;;2136:625;3587;;573:4882;;2136:625;3587;;573:4882;4275:35;;;;573:4882;;;4275:35;573:4882;;4275:35;;573:4882;-1:-1:-1;2136:625:10;573:4882;;4275:35;;2920:43;4275:35;;;:::i;:::-;;;573:4882;4275:35;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;573:4882:10;;-1:-1:-1;573:4882:10;;;4330:8;573:4882;;;;;4330:32;;:45;;;573:4882;4330:45;:::i;:::-;573:4882;;;;;2628:22:3;2325:7;;573:4882:10;;2628:22:3;1204:72:2;;;;;;;;:::o;:::-;;;:::i;:::-;2325:7:3;2317:63;1744:1;2325:7;573:4882:10;2325:19:3;;2317:63;:::i;:::-;1744:1;2325:7;573:4882:10;4600:17;573:4882;4592:98;4621:15;573:4882;4600:36;;4592:98;:::i;:::-;;-1:-1:-1;;4733:96:10;2325:7:3;4733:96:10;;;4757:15;573:4882;4753:19;;;;;;;4793:25;4807:11;;;;:::i;:::-;573:4882;4793:25;;:::i;:::-;;;4774:3;;;:::i;:::-;;;4733:96;;;;4839:75;4861:14;;-1:-1:-1;;;;;573:4882:10;-1:-1:-1;573:4882:10;;;4330:8;573:4882;;;;;;;4861:14;573:4882;4847:28;;;4839:75;:::i;:::-;4932:53;;;;-1:-1:-1;;;;;;573:4882:10;;-1:-1:-1;573:4882:10;;;4330:8;573:4882;;;;;;4957:28;;4932:53;4924:100;;;:::i;:::-;;;-1:-1:-1;5043:231:10;2325:7:3;5043:231:10;;;5067:17;573:4882;5063:21;;;;;;;5151:24;;5161:13;;;;;:::i;:::-;573:4882;;;;;5161:13;573:4882;;;;;;5151:9;573:4882;;;;;;;5151:24;573:4882;-1:-1:-1;;;;;573:4882:10;;;5151:24;5177:11;;;;:::i;:::-;573:4882;801:42;;5129:60;;;-1:-1:-1;;573:4882:10;5129:60;573:4882;;;5129:60;;-1:-1:-1;;;;;573:4882:10;;5151:9;5129:60;;573:4882;;;;;;;5129:60;573:4882;;;-1:-1:-1;801:42:10;5129:60;;;;;;;;;:::i;:::-;-1:-1:-1;5129:60:10;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;5203;;;:::i;:::-;;;5086:3;;;:::i;:::-;;;5043:231;;;;;2628:22:3;2325:7;;573:4882:10;;2628:22:3;1204:72:2;;;;:::o;573:4882:10:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;573:4882:10;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;573:4882:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;573:4882:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;573:4882:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;573:4882:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;573:4882:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "971800",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"USDC()": "279",
								"WETH9()": "213",
								"deposit(address,address,uint256,uint256,uint256,uint24,uint24,uint256)": "infinite",
								"finalize(address,uint8[],uint256[],bool)": "infinite",
								"getBalance(address)": "863",
								"owner()": "588",
								"paused()": "488",
								"renounceOwnership()": "infinite",
								"swapRouter()": "infinite",
								"transferOwnership(address)": "22737"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH",
									"source": 10,
									"value": "A0"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "CALLVALUE",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "tag",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSHSIZE",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "CODESIZE",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "SUB",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "NOT",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH",
									"source": 10,
									"value": "A0"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH",
									"source": 10,
									"value": "A0"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH",
									"source": 10,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "2"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH",
									"source": 10,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH",
									"source": 10,
									"value": "41"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "tag",
									"source": 10,
									"value": "2"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH",
									"source": 10,
									"value": "A0"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "SLT",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "DUP1",
									"source": -1
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "tag",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH",
									"source": 10,
									"value": "A0"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "EXP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "DUP1",
									"source": -1
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "tag",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "5"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH",
									"source": 10,
									"value": "C0"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "6"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "tag",
									"source": 10,
									"value": "5"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH",
									"source": 10,
									"value": "80"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "ASSIGNIMMUTABLE",
									"source": 10,
									"value": "1288"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "RETURN",
									"source": 10
								},
								{
									"begin": 1039,
									"end": 1211,
									"name": "tag",
									"source": 10,
									"value": "6"
								},
								{
									"begin": 1039,
									"end": 1211,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "SLOAD",
									"source": 10
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "EXP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 719,
									"end": 729,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 719,
									"end": 729,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "EXP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 1,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "LOG3",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "EXP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "EXP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FF"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MUL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 1120,
									"end": 1144,
									"name": "PUSH",
									"source": 10,
									"value": "80"
								},
								{
									"begin": 1120,
									"end": 1144,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "PUSH",
									"source": 10,
									"value": "2"
								},
								{
									"begin": 573,
									"end": 5455,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 1039,
									"end": 1211,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								}
							],
							".data": {
								"0": {
									".auxdata": "a36469706673582212204837e4bf541790af15fbb607b23439581cfd0a8bea265f70933b2b6e1051dcba6c6578706572696d656e74616cf564736f6c63430008070041",
									".code": [
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "480A6FDC"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4AA4A4FC"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "5C975ABB"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "715018A6"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "89A30271"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "8DA5CB5B"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "8DE9C372"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "C31C9C07"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "F2FDE38B"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "F8B2CB4F"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "13"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "13"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "14"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "15"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "14"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1217,
											"end": 4382,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "16"
										},
										{
											"begin": 1217,
											"end": 4382,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1217,
											"end": 4382,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1217,
											"end": 4382,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1217,
											"end": 4382,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 1217,
											"end": 4382,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 1217,
											"end": 4382,
											"name": "DUP12",
											"source": 10
										},
										{
											"begin": 1217,
											"end": 4382,
											"name": "DUP14",
											"source": 10
										},
										{
											"begin": 1217,
											"end": 4382,
											"name": "DUP16",
											"source": 10
										},
										{
											"begin": 1217,
											"end": 4382,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "17"
										},
										{
											"begin": 1217,
											"end": 4382,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1217,
											"end": 4382,
											"name": "tag",
											"source": 10,
											"value": "16"
										},
										{
											"begin": 1217,
											"end": 4382,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1217,
											"end": 4382,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1217,
											"end": 4382,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1217,
											"end": 4382,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1217,
											"end": 4382,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1217,
											"end": 4382,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1217,
											"end": 4382,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1217,
											"end": 4382,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1217,
											"end": 4382,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "18"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "18"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "19"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "19"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 722,
											"end": 764,
											"name": "PUSH",
											"source": 10,
											"value": "C02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "10000000000000000000000000000000000000000"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "27"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "27"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "29"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "30"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 1,
											"value": "29"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "31"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "31"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "32"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "32"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 801,
											"end": 843,
											"name": "PUSH",
											"source": 10,
											"value": "A0B86991C6218B36C1D19D4A2E9EB0CE3606EB48"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "35"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "35"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "36"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "36"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "39"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "39"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4388,
											"end": 5324,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "42"
										},
										{
											"begin": 4388,
											"end": 5324,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4388,
											"end": 5324,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4388,
											"end": 5324,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4388,
											"end": 5324,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 4388,
											"end": 5324,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "43"
										},
										{
											"begin": 4388,
											"end": 5324,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4388,
											"end": 5324,
											"name": "tag",
											"source": 10,
											"value": "42"
										},
										{
											"begin": 4388,
											"end": 5324,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4388,
											"end": 5324,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4388,
											"end": 5324,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4388,
											"end": 5324,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4388,
											"end": 5324,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "45"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "45"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 850,
											"end": 889,
											"name": "PUSHIMMUTABLE",
											"source": 10,
											"value": "1288"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "47"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "47"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "29"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "49"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "49"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "51"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "52"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "52"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "53"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "54"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "54"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5432,
											"end": 5440,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5330,
											"end": 5453,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "53"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "59"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "61"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "61"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "62"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "65"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "66"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "65"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "67"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "68"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "67"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "69"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "69"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "70"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "72"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "70"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "72"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP8",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "73"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "61"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "76"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "79"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "81"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "81"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "83"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "83"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "15"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "100"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "86"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "86"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "87"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "87"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP9",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "88"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "88"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "A4"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFF"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "89"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "89"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "C4"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "90"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "90"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "E4"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP8",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP8",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "92"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "92"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "93"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "59"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "93"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "94"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "94"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "95"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "95"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "96"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "66"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "96"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "97"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "68"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "97"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP13",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "98"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "98"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "99"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "101"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "102"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "102"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "99"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "101"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP8",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "103"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "103"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "104"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "62"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "104"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "105"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "73"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "105"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "106"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "108"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "108"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "109"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "76"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "109"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "110"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "112"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "112"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "119"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFF"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "C0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "C0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "122"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "125"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "125"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "126"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "tag",
											"source": 3,
											"value": "125"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "66"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "129"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "129"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "126"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "129"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "130"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "133"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "133"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "134"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "133"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "135"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "138"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "138"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "134"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "138"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "tag",
											"source": 3,
											"value": "139"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "142"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "144"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "144"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "126"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "144"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "145"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "68"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "145"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "tag",
											"source": 3,
											"value": "142"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "tag",
											"source": 3,
											"value": "146"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "149"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "149"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "126"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "tag",
											"source": 3,
											"value": "149"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "tag",
											"source": 3,
											"value": "68"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "152"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "152"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "126"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "tag",
											"source": 3,
											"value": "152"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "tag",
											"source": 1,
											"value": "153"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1767,
											"end": 1873,
											"name": "tag",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 1767,
											"end": 1873,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "10000000000000000000000000000000000000000"
										},
										{
											"begin": 1685,
											"end": 1692,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1836,
											"end": 1845,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "158"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "5061757361626C653A2070617573656400000000000000000000000000000000"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "158"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1767,
											"end": 1873,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1873,
											"end": 2180,
											"name": "tag",
											"source": 9,
											"value": "160"
										},
										{
											"begin": 1873,
											"end": 2180,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2055,
											"end": 2078,
											"name": "PUSH",
											"source": 9,
											"value": "95EA7B300000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "163"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "tag",
											"source": 9,
											"value": "163"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "tag",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2109,
											"end": 2166,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2109,
											"end": 2166,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2109,
											"end": 2166,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2109,
											"end": 2166,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "165"
										},
										{
											"begin": 2109,
											"end": 2166,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2121,
											"end": 2132,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2121,
											"end": 2137,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2121,
											"end": 2137,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2121,
											"end": 2165,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2121,
											"end": 2165,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "166"
										},
										{
											"begin": 2121,
											"end": 2165,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "167"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "106"
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "tag",
											"source": 9,
											"value": "167"
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2121,
											"end": 2165,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2121,
											"end": 2165,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2121,
											"end": 2165,
											"name": "tag",
											"source": 9,
											"value": "166"
										},
										{
											"begin": 2121,
											"end": 2165,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2109,
											"end": 2166,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2109,
											"end": 2166,
											"name": "tag",
											"source": 9,
											"value": "165"
										},
										{
											"begin": 2109,
											"end": 2166,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "168"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "5341000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "168"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1873,
											"end": 2180,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1873,
											"end": 2180,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1873,
											"end": 2180,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1873,
											"end": 2180,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 561,
											"end": 919,
											"name": "tag",
											"source": 9,
											"value": "169"
										},
										{
											"begin": 561,
											"end": 919,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 759,
											"end": 828,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 782,
											"end": 810,
											"name": "PUSH",
											"source": 9,
											"value": "23B872DD00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 759,
											"end": 828,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 759,
											"end": 828,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 759,
											"end": 828,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "171"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "146"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "tag",
											"source": 9,
											"value": "171"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 748,
											"end": 829,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 748,
											"end": 829,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 748,
											"end": 829,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "172"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "tag",
											"source": 9,
											"value": "172"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 847,
											"end": 904,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 847,
											"end": 904,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 847,
											"end": 904,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 847,
											"end": 904,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "173"
										},
										{
											"begin": 847,
											"end": 904,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 859,
											"end": 870,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 859,
											"end": 875,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 859,
											"end": 875,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 859,
											"end": 903,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 859,
											"end": 903,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "174"
										},
										{
											"begin": 859,
											"end": 903,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 879,
											"end": 903,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "175"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 879,
											"end": 903,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 879,
											"end": 903,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 879,
											"end": 903,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 879,
											"end": 903,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 879,
											"end": 903,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 879,
											"end": 903,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 879,
											"end": 903,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "106"
										},
										{
											"begin": 879,
											"end": 903,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 879,
											"end": 903,
											"name": "tag",
											"source": 9,
											"value": "175"
										},
										{
											"begin": 879,
											"end": 903,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 859,
											"end": 903,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 859,
											"end": 903,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 859,
											"end": 903,
											"name": "tag",
											"source": 9,
											"value": "174"
										},
										{
											"begin": 859,
											"end": 903,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 847,
											"end": 904,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 847,
											"end": 904,
											"name": "tag",
											"source": 9,
											"value": "173"
										},
										{
											"begin": 847,
											"end": 904,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "176"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "5354460000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "176"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 561,
											"end": 919,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 561,
											"end": 919,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 561,
											"end": 919,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 561,
											"end": 919,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 561,
											"end": 919,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "177"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "134"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "185"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "187"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "32"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "187"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "tag",
											"source": 1,
											"value": "30"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "189"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "153"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "tag",
											"source": 1,
											"value": "189"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 1,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "LOG3",
											"source": 1
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "tag",
											"source": 1,
											"value": "51"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "191"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "153"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "tag",
											"source": 1,
											"value": "191"
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "192"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "6464726573730000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "192"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 1,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "LOG3",
											"source": 1
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1063,
											"end": 1125,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "194"
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "tag",
											"source": 2,
											"value": "194"
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "195"
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "196"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 3,
											"value": "195"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 1810,
											"end": 1823,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "197"
										},
										{
											"begin": 1810,
											"end": 1823,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1803,
											"end": 1807,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 1783,
											"end": 1793,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 1810,
											"end": 1823,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1810,
											"end": 1823,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "169"
										},
										{
											"begin": 1810,
											"end": 1823,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1810,
											"end": 1823,
											"name": "tag",
											"source": 10,
											"value": "197"
										},
										{
											"begin": 1810,
											"end": 1823,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1955,
											"end": 1965,
											"name": "PUSHIMMUTABLE",
											"source": 10,
											"value": "1288"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1968,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "198"
										},
										{
											"begin": 1968,
											"end": 1981,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1968,
											"end": 1981,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1968,
											"end": 1981,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1968,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 1968,
											"end": 1981,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1968,
											"end": 1981,
											"name": "tag",
											"source": 10,
											"value": "198"
										},
										{
											"begin": 1968,
											"end": 1981,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "199"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "122"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "199"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 722,
											"end": 764,
											"name": "PUSH",
											"source": 10,
											"value": "C02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2"
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFF"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1803,
											"end": 1807,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "PUSH",
											"source": 10,
											"value": "C0"
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "EXTCODESIZE",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "207"
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "tag",
											"source": 10,
											"value": "207"
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "DB3E219800000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "208"
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "119"
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "tag",
											"source": 10,
											"value": "208"
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "CALL",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "210"
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "210"
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "211"
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "tag",
											"source": 10,
											"value": "210"
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "212"
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "213"
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "68"
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "tag",
											"source": 10,
											"value": "213"
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "214"
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "110"
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "tag",
											"source": 10,
											"value": "214"
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "tag",
											"source": 10,
											"value": "212"
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 722,
											"end": 764,
											"name": "PUSH",
											"source": 10,
											"value": "C02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2"
										},
										{
											"begin": 722,
											"end": 764,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 722,
											"end": 764,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 722,
											"end": 764,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "EXTCODESIZE",
											"source": 10
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "215"
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "tag",
											"source": 10,
											"value": "215"
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "2E1A7D4D00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 722,
											"end": 764,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "CALL",
											"source": 10
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "218"
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "218"
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "211"
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "tag",
											"source": 10,
											"value": "218"
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "221"
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "220"
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "68"
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "tag",
											"source": 10,
											"value": "220"
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "221"
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "79"
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "tag",
											"source": 10,
											"value": "221"
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2998,
											"end": 3044,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 3146,
											"end": 3218,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP12",
											"source": 10
										},
										{
											"begin": 3146,
											"end": 3177,
											"name": "DUP14",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3146,
											"end": 3218,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 3146,
											"end": 3218,
											"name": "CALL",
											"source": 10
										},
										{
											"begin": 3146,
											"end": 3218,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 3146,
											"end": 3218,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3146,
											"end": 3218,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "222"
										},
										{
											"begin": 3146,
											"end": 3218,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "139"
										},
										{
											"begin": 3146,
											"end": 3218,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3146,
											"end": 3218,
											"name": "tag",
											"source": 10,
											"value": "222"
										},
										{
											"begin": 3146,
											"end": 3218,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3146,
											"end": 3218,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3228,
											"end": 3296,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "223"
										},
										{
											"begin": 3228,
											"end": 3296,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3228,
											"end": 3296,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "224"
										},
										{
											"begin": 3228,
											"end": 3296,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3228,
											"end": 3296,
											"name": "tag",
											"source": 10,
											"value": "223"
										},
										{
											"begin": 3228,
											"end": 3296,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3399,
											"end": 3440,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "225"
										},
										{
											"begin": 3399,
											"end": 3440,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3399,
											"end": 3440,
											"name": "DUP12",
											"source": 10
										},
										{
											"begin": 3399,
											"end": 3440,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "135"
										},
										{
											"begin": 3399,
											"end": 3440,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3399,
											"end": 3440,
											"name": "tag",
											"source": 10,
											"value": "225"
										},
										{
											"begin": 3399,
											"end": 3440,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3399,
											"end": 3440,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 3399,
											"end": 3440,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3399,
											"end": 3440,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3399,
											"end": 3440,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "226"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "122"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "226"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3587,
											"end": 4212,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 801,
											"end": 843,
											"name": "PUSH",
											"source": 10,
											"value": "A0B86991C6218B36C1D19D4A2E9EB0CE3606EB48"
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3587,
											"end": 4212,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3587,
											"end": 4212,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFF"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP13",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3587,
											"end": 4212,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3587,
											"end": 4212,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3587,
											"end": 4212,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1803,
											"end": 1807,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 3587,
											"end": 4212,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3587,
											"end": 4212,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 3587,
											"end": 4212,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3587,
											"end": 4212,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 3587,
											"end": 4212,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3587,
											"end": 4212,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP13",
											"source": 10
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "PUSH",
											"source": 10,
											"value": "C0"
										},
										{
											"begin": 3587,
											"end": 4212,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3587,
											"end": 4212,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 3587,
											"end": 4212,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3587,
											"end": 4212,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "EXTCODESIZE",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "232"
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "tag",
											"source": 10,
											"value": "232"
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "414BF38900000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2136,
											"end": 2761,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "233"
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2920,
											"end": 2963,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "119"
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "tag",
											"source": 10,
											"value": "233"
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "CALL",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "235"
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "235"
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "211"
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "tag",
											"source": 10,
											"value": "235"
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "236"
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "237"
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "68"
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "tag",
											"source": 10,
											"value": "237"
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "238"
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "110"
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "tag",
											"source": 10,
											"value": "238"
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "tag",
											"source": 10,
											"value": "236"
										},
										{
											"begin": 4275,
											"end": 4310,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4330,
											"end": 4338,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4330,
											"end": 4362,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4330,
											"end": 4362,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4330,
											"end": 4375,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "240"
										},
										{
											"begin": 4330,
											"end": 4375,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4330,
											"end": 4375,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 4330,
											"end": 4375,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "130"
										},
										{
											"begin": 4330,
											"end": 4375,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4330,
											"end": 4375,
											"name": "tag",
											"source": 10,
											"value": "240"
										},
										{
											"begin": 4330,
											"end": 4375,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "241"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "tag",
											"source": 3,
											"value": "241"
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "tag",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "244"
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "tag",
											"source": 2,
											"value": "244"
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "245"
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "196"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 3,
											"value": "245"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4600,
											"end": 4617,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 4592,
											"end": 4690,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 4621,
											"end": 4636,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 4600,
											"end": 4636,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4600,
											"end": 4636,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 4592,
											"end": 4690,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "247"
										},
										{
											"begin": 4592,
											"end": 4690,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4592,
											"end": 4690,
											"name": "tag",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 4592,
											"end": 4690,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4592,
											"end": 4690,
											"name": "POP",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 4733,
											"end": 4829,
											"name": "tag",
											"source": 10,
											"value": "248"
										},
										{
											"begin": 4733,
											"end": 4829,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4733,
											"end": 4829,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4733,
											"end": 4829,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "250"
										},
										{
											"begin": 4733,
											"end": 4829,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4757,
											"end": 4772,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 4753,
											"end": 4772,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4753,
											"end": 4772,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 4753,
											"end": 4772,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "251"
										},
										{
											"begin": 4753,
											"end": 4772,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4753,
											"end": 4772,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "250"
										},
										{
											"begin": 4753,
											"end": 4772,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4753,
											"end": 4772,
											"name": "tag",
											"source": 10,
											"value": "251"
										},
										{
											"begin": 4753,
											"end": 4772,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4793,
											"end": 4818,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "252"
										},
										{
											"begin": 4807,
											"end": 4818,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "253"
										},
										{
											"begin": 4807,
											"end": 4818,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4807,
											"end": 4818,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 4807,
											"end": 4818,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "185"
										},
										{
											"begin": 4807,
											"end": 4818,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4807,
											"end": 4818,
											"name": "tag",
											"source": 10,
											"value": "253"
										},
										{
											"begin": 4807,
											"end": 4818,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 4793,
											"end": 4818,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4793,
											"end": 4818,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "130"
										},
										{
											"begin": 4793,
											"end": 4818,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4793,
											"end": 4818,
											"name": "tag",
											"source": 10,
											"value": "252"
										},
										{
											"begin": 4793,
											"end": 4818,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4793,
											"end": 4818,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4793,
											"end": 4818,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4774,
											"end": 4777,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "254"
										},
										{
											"begin": 4774,
											"end": 4777,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4774,
											"end": 4777,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "177"
										},
										{
											"begin": 4774,
											"end": 4777,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4774,
											"end": 4777,
											"name": "tag",
											"source": 10,
											"value": "254"
										},
										{
											"begin": 4774,
											"end": 4777,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4774,
											"end": 4777,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4774,
											"end": 4777,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4733,
											"end": 4829,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "248"
										},
										{
											"begin": 4733,
											"end": 4829,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4733,
											"end": 4829,
											"name": "tag",
											"source": 10,
											"value": "250"
										},
										{
											"begin": 4733,
											"end": 4829,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4733,
											"end": 4829,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4839,
											"end": 4914,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "255"
										},
										{
											"begin": 4861,
											"end": 4875,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 4861,
											"end": 4875,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4330,
											"end": 4338,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4861,
											"end": 4875,
											"name": "tag",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 4861,
											"end": 4875,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 4847,
											"end": 4875,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4847,
											"end": 4875,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 4847,
											"end": 4875,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4839,
											"end": 4914,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "257"
										},
										{
											"begin": 4839,
											"end": 4914,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4839,
											"end": 4914,
											"name": "tag",
											"source": 10,
											"value": "255"
										},
										{
											"begin": 4839,
											"end": 4914,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4932,
											"end": 4985,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4932,
											"end": 4985,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 4932,
											"end": 4985,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "258"
										},
										{
											"begin": 4932,
											"end": 4985,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4330,
											"end": 4338,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 4957,
											"end": 4985,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4957,
											"end": 4985,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 4932,
											"end": 4985,
											"name": "tag",
											"source": 10,
											"value": "258"
										},
										{
											"begin": 4932,
											"end": 4985,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4924,
											"end": 5024,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "260"
										},
										{
											"begin": 4924,
											"end": 5024,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4924,
											"end": 5024,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "261"
										},
										{
											"begin": 4924,
											"end": 5024,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4924,
											"end": 5024,
											"name": "tag",
											"source": 10,
											"value": "260"
										},
										{
											"begin": 4924,
											"end": 5024,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4924,
											"end": 5024,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4924,
											"end": 5024,
											"name": "POP",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 5043,
											"end": 5274,
											"name": "tag",
											"source": 10,
											"value": "262"
										},
										{
											"begin": 5043,
											"end": 5274,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5043,
											"end": 5274,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5043,
											"end": 5274,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "264"
										},
										{
											"begin": 5043,
											"end": 5274,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5067,
											"end": 5084,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 5063,
											"end": 5084,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5063,
											"end": 5084,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 5063,
											"end": 5084,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "265"
										},
										{
											"begin": 5063,
											"end": 5084,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5063,
											"end": 5084,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "264"
										},
										{
											"begin": 5063,
											"end": 5084,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5063,
											"end": 5084,
											"name": "tag",
											"source": 10,
											"value": "265"
										},
										{
											"begin": 5063,
											"end": 5084,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5151,
											"end": 5175,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "266"
										},
										{
											"begin": 5151,
											"end": 5175,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "267"
										},
										{
											"begin": 5161,
											"end": 5174,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "268"
										},
										{
											"begin": 5161,
											"end": 5174,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "269"
										},
										{
											"begin": 5161,
											"end": 5174,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5161,
											"end": 5174,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 5161,
											"end": 5174,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "185"
										},
										{
											"begin": 5161,
											"end": 5174,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5161,
											"end": 5174,
											"name": "tag",
											"source": 10,
											"value": "269"
										},
										{
											"begin": 5161,
											"end": 5174,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5161,
											"end": 5174,
											"name": "tag",
											"source": 10,
											"value": "268"
										},
										{
											"begin": 5161,
											"end": 5174,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5151,
											"end": 5160,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5151,
											"end": 5175,
											"name": "tag",
											"source": 10,
											"value": "267"
										},
										{
											"begin": 5151,
											"end": 5175,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5151,
											"end": 5175,
											"name": "tag",
											"source": 10,
											"value": "266"
										},
										{
											"begin": 5151,
											"end": 5175,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5177,
											"end": 5188,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "272"
										},
										{
											"begin": 5177,
											"end": 5188,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5177,
											"end": 5188,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 5177,
											"end": 5188,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "185"
										},
										{
											"begin": 5177,
											"end": 5188,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5177,
											"end": 5188,
											"name": "tag",
											"source": 10,
											"value": "272"
										},
										{
											"begin": 5177,
											"end": 5188,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 801,
											"end": 843,
											"name": "PUSH",
											"source": 10,
											"value": "A0B86991C6218B36C1D19D4A2E9EB0CE3606EB48"
										},
										{
											"begin": 801,
											"end": 843,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "EXTCODESIZE",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "273"
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "tag",
											"source": 10,
											"value": "273"
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "A9059CBB00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5151,
											"end": 5160,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 801,
											"end": 843,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "CALL",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "276"
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "276"
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "211"
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "tag",
											"source": 10,
											"value": "276"
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "277"
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "278"
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "68"
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "tag",
											"source": 10,
											"value": "278"
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "279"
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "106"
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "tag",
											"source": 10,
											"value": "279"
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "tag",
											"source": 10,
											"value": "277"
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5129,
											"end": 5189,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5203,
											"end": 5263,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "280"
										},
										{
											"begin": 5203,
											"end": 5263,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5203,
											"end": 5263,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "281"
										},
										{
											"begin": 5203,
											"end": 5263,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5203,
											"end": 5263,
											"name": "tag",
											"source": 10,
											"value": "280"
										},
										{
											"begin": 5203,
											"end": 5263,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5203,
											"end": 5263,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5203,
											"end": 5263,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5086,
											"end": 5089,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "282"
										},
										{
											"begin": 5086,
											"end": 5089,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5086,
											"end": 5089,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "177"
										},
										{
											"begin": 5086,
											"end": 5089,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5086,
											"end": 5089,
											"name": "tag",
											"source": 10,
											"value": "282"
										},
										{
											"begin": 5086,
											"end": 5089,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5086,
											"end": 5089,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5086,
											"end": 5089,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5043,
											"end": 5274,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "262"
										},
										{
											"begin": 5043,
											"end": 5274,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5043,
											"end": 5274,
											"name": "tag",
											"source": 10,
											"value": "264"
										},
										{
											"begin": 5043,
											"end": 5274,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5043,
											"end": 5274,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5043,
											"end": 5274,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "283"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "tag",
											"source": 3,
											"value": "283"
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1204,
											"end": 1276,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "134"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "126"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "281"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "55534443207472616E7366657220746F2063686172697479206661696C65642E"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "257"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "546F74616C2066696E616C697A6174696F6E20616D6F756E7420746F6F206869"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "6768000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "224"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "27"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4661696C656420746F2073656E642067617320746F20657068656D6572616C20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "77616C6C65742E00000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "247"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "31"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "43686172697469657320616E6420616D6F756E747320617272617973206F6620"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "646966666572656E74206C656E6774682E000000000000000000000000000000"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "261"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "546F74616C2066696E616C697A6174696F6E20616D6F756E7420746F6F206C6F"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "772E000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "196"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "211"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "tag",
											"source": 10,
											"value": "76"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 573,
											"end": 5455,
											"name": "REVERT",
											"source": 10
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"USDC()": "89a30271",
							"WETH9()": "4aa4a4fc",
							"deposit(address,address,uint256,uint256,uint256,uint24,uint24,uint256)": "480a6fdc",
							"finalize(address,uint8[],uint256[],bool)": "8de9c372",
							"getBalance(address)": "f8b2cb4f",
							"owner()": "8da5cb5b",
							"paused()": "5c975abb",
							"renounceOwnership()": "715018a6",
							"swapRouter()": "c31c9c07",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ephemeralGasMoneyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ephemeralWalletAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethSwapAmountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"ethSwapPoolFee\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"usdcSwapPoolFee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"usdcSwapAmountOutMinimum\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"charities_\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"autoAllocateRemainder\",\"type\":\"bool\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userBalance_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/fountain.sol\":\"Serenity\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@1inch/solidity-utils/contracts/interfaces/IWETH.sol\":{\"keccak256\":\"0xa63626fa2564ae99f9a9a8dc4f163583882f5ab1a96610344a57d8fb6207f755\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://57e6ee2d7423555dfbbbae0d83b1ed364096f7de9c7af9847d64597fbce87a36\",\"dweb:/ipfs/QmY8fwxQabJY73NKDZV8njgtXy6dFH2beaRNpuUFddxE9R\"]},\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/security/Pausable.sol\":{\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ddabb16009cd17eaca3143feadf450ac13e72919ebe2ca50e00f61cb78bc004\",\"dweb:/ipfs/QmSPwPxX7d6TTWakN5jy5wsaGkS1y9TW8fuhGSraMkLk2B\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d4831d777a29ebdf9f2caecd70e74b97bff1b70e53622fd0a02aed01e21c8271\",\"dweb:/ipfs/QmUqurVVnCc7XkMxb2k23TVQUtuhHZduJ3hTZarTJrqU24\"]},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a8a2c3e55965b61bcd91993d8e1d5d34b8b8a63e0fdfce87a85f6af92526fd53\",\"dweb:/ipfs/QmQj2CSCSwqDSU4KMNWxGsN2336Cy64WgpV1X1EHXNZWxM\"]},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://da1d1e81e5bf534f0bf2934b3193db6cb1933f91ec006d2b88e9ad10a617a2d2\",\"dweb:/ipfs/QmcPBk47QLMFWcX2y2S9eMFsJgoYWBd3R8ey55Bgmv6w6v\"]},\"contracts/fountain.sol\":{\"keccak256\":\"0x9ca3712ffae519de9c464b8c4b5ac49bb81c1b5f5bb34fb10f944961044adee7\",\"license\":\"Proprietary\",\"urls\":[\"bzz-raw://fbeae516b63f2e9dad891992fe8b1b701fa0d7e2c83761f75f263bbbf085ba20\",\"dweb:/ipfs/QmP6XFPnJyPg6q283r5wgdQNxTN4FW6W1uCH3bUUnB3xFx\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 22,
								"contract": "contracts/fountain.sol:Serenity",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 145,
								"contract": "contracts/fountain.sol:Serenity",
								"label": "_paused",
								"offset": 20,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 246,
								"contract": "contracts/fountain.sol:Serenity",
								"label": "_status",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 1290,
								"contract": "contracts/fountain.sol:Serenity",
								"label": "ephemeralGasMoneyAmount",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 1294,
								"contract": "contracts/fountain.sol:Serenity",
								"label": "balances",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 1298,
								"contract": "contracts/fountain.sol:Serenity",
								"label": "charities",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_uint8,t_address)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_uint8,t_address)": {
								"encoding": "mapping",
								"key": "t_uint8",
								"label": "mapping(uint8 => address)",
								"numberOfBytes": "32",
								"value": "t_address"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "2066",
				"formattedMessage": "Warning: Contract requests the ABI coder v1, which is incompatible with the IR. Using ABI coder v2 instead.\n --> @1inch/solidity-utils/contracts/interfaces/IWETH.sol:8:1:\n  |\n8 | interface IWETH is IERC20 {\n  | ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Contract requests the ABI coder v1, which is incompatible with the IR. Using ABI coder v2 instead.",
				"severity": "warning",
				"sourceLocation": {
					"end": 255,
					"file": "@1inch/solidity-utils/contracts/interfaces/IWETH.sol",
					"start": 136
				},
				"type": "Warning"
			}
		],
		"sources": {
			"@1inch/solidity-utils/contracts/interfaces/IWETH.sol": {
				"ast": {
					"absolutePath": "@1inch/solidity-utils/contracts/interfaces/IWETH.sol",
					"exportedSymbols": {
						"IERC20": [
							353
						],
						"IWETH": [
							14
						]
					},
					"id": 15,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"id": 2,
							"literals": [
								"abicoder",
								"v1"
							],
							"nodeType": "PragmaDirective",
							"src": "57:19:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 15,
							"sourceUnit": 354,
							"src": "78:56:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 353,
										"src": "155:6:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "155:6:0"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 14,
							"linearizedBaseContracts": [
								14,
								353
							],
							"name": "IWETH",
							"nameLocation": "146:5:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "d0e30db0",
									"id": 8,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nameLocation": "177:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 6,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "184:2:0"
									},
									"returnParameters": {
										"id": 7,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "203:0:0"
									},
									"scope": 14,
									"src": "168:36:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "2e1a7d4d",
									"id": 13,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nameLocation": "219:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 10,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "236:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "228:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 9,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "228:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "227:16:0"
									},
									"returnParameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "252:0:0"
									},
									"scope": 14,
									"src": "210:43:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 15,
							"src": "136:119:0",
							"usedErrors": []
						}
					],
					"src": "33:223:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							375
						],
						"Ownable": [
							127
						]
					},
					"id": 128,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 16,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 17,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 128,
							"sourceUnit": 376,
							"src": "127:30:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 19,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 375,
										"src": "683:7:1"
									},
									"id": 20,
									"nodeType": "InheritanceSpecifier",
									"src": "683:7:1"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 18,
								"nodeType": "StructuredDocumentation",
								"src": "159:494:1",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 127,
							"linearizedBaseContracts": [
								127,
								375
							],
							"name": "Ownable",
							"nameLocation": "672:7:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 22,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "713:6:1",
									"nodeType": "VariableDeclaration",
									"scope": 127,
									"src": "697:22:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 21,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "697:7:1",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 28,
									"name": "OwnershipTransferred",
									"nameLocation": "732:20:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 27,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "769:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 28,
												"src": "753:29:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 23,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 26,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "800:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 28,
												"src": "784:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 25,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:1"
									},
									"src": "726:84:1"
								},
								{
									"body": {
										"id": 37,
										"nodeType": "Block",
										"src": "926:49:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 33,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 365,
																"src": "955:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 34,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "955:12:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 32,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 126,
														"src": "936:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 35,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "936:32:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 36,
												"nodeType": "ExpressionStatement",
												"src": "936:32:1"
											}
										]
									},
									"documentation": {
										"id": 29,
										"nodeType": "StructuredDocumentation",
										"src": "816:91:1",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 38,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:1"
									},
									"returnParameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "926:0:1"
									},
									"scope": 127,
									"src": "912:63:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 45,
										"nodeType": "Block",
										"src": "1084:41:1",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 41,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 69,
														"src": "1094:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 42,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1094:13:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 43,
												"nodeType": "ExpressionStatement",
												"src": "1094:13:1"
											},
											{
												"id": 44,
												"nodeType": "PlaceholderStatement",
												"src": "1117:1:1"
											}
										]
									},
									"documentation": {
										"id": 39,
										"nodeType": "StructuredDocumentation",
										"src": "981:77:1",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 46,
									"name": "onlyOwner",
									"nameLocation": "1072:9:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1081:2:1"
									},
									"src": "1063:62:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 54,
										"nodeType": "Block",
										"src": "1256:30:1",
										"statements": [
											{
												"expression": {
													"id": 52,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 22,
													"src": "1273:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 51,
												"id": 53,
												"nodeType": "Return",
												"src": "1266:13:1"
											}
										]
									},
									"documentation": {
										"id": 47,
										"nodeType": "StructuredDocumentation",
										"src": "1131:65:1",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 55,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1210:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1215:2:1"
									},
									"returnParameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 55,
												"src": "1247:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 49,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1247:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1246:9:1"
									},
									"scope": 127,
									"src": "1201:85:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 68,
										"nodeType": "Block",
										"src": "1404:85:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 60,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 55,
																	"src": "1422:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 61,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1422:7:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 62,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 365,
																	"src": "1433:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 63,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1433:12:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1422:23:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 65,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1447:34:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 59,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1414:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 66,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1414:68:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 67,
												"nodeType": "ExpressionStatement",
												"src": "1414:68:1"
											}
										]
									},
									"documentation": {
										"id": 56,
										"nodeType": "StructuredDocumentation",
										"src": "1292:62:1",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 69,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1368:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 57,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1379:2:1"
									},
									"returnParameters": {
										"id": 58,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1404:0:1"
									},
									"scope": 127,
									"src": "1359:130:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 82,
										"nodeType": "Block",
										"src": "1885:47:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 78,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1922:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 77,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1914:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 76,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1914:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 79,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1914:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 75,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 126,
														"src": "1895:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 80,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1895:30:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 81,
												"nodeType": "ExpressionStatement",
												"src": "1895:30:1"
											}
										]
									},
									"documentation": {
										"id": 70,
										"nodeType": "StructuredDocumentation",
										"src": "1495:331:1",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 83,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 73,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 72,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1875:9:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "1875:9:1"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1840:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 71,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1857:2:1"
									},
									"returnParameters": {
										"id": 74,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1885:0:1"
									},
									"scope": 127,
									"src": "1831:101:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 105,
										"nodeType": "Block",
										"src": "2151:128:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 97,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 92,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 86,
																"src": "2169:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 95,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2189:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 94,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2181:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 93,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2181:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 96,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2181:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2169:22:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 98,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2193:40:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 91,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2161:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 99,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2161:73:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 100,
												"nodeType": "ExpressionStatement",
												"src": "2161:73:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 102,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 86,
															"src": "2263:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 101,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 126,
														"src": "2244:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2244:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "2244:28:1"
											}
										]
									},
									"documentation": {
										"id": 84,
										"nodeType": "StructuredDocumentation",
										"src": "1938:138:1",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 106,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 89,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 88,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "2141:9:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "2141:9:1"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2090:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2116:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 106,
												"src": "2108:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 85,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2108:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2107:18:1"
									},
									"returnParameters": {
										"id": 90,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2151:0:1"
									},
									"scope": 127,
									"src": "2081:198:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 125,
										"nodeType": "Block",
										"src": "2496:124:1",
										"statements": [
											{
												"assignments": [
													113
												],
												"declarations": [
													{
														"constant": false,
														"id": 113,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2514:8:1",
														"nodeType": "VariableDeclaration",
														"scope": 125,
														"src": "2506:16:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 112,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2506:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 115,
												"initialValue": {
													"id": 114,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 22,
													"src": "2525:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2506:25:1"
											},
											{
												"expression": {
													"id": 118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 116,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 22,
														"src": "2541:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 117,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 109,
														"src": "2550:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2541:17:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 119,
												"nodeType": "ExpressionStatement",
												"src": "2541:17:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 121,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 113,
															"src": "2594:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 122,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 109,
															"src": "2604:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 120,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 28,
														"src": "2573:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2573:40:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 124,
												"nodeType": "EmitStatement",
												"src": "2568:45:1"
											}
										]
									},
									"documentation": {
										"id": 107,
										"nodeType": "StructuredDocumentation",
										"src": "2285:143:1",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 126,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2442:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 109,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2469:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "2461:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 108,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2461:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2460:18:1"
									},
									"returnParameters": {
										"id": 111,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2496:0:1"
									},
									"scope": 127,
									"src": "2433:187:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 128,
							"src": "654:1968:1",
							"usedErrors": []
						}
					],
					"src": "102:2521:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/security/Pausable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/Pausable.sol",
					"exportedSymbols": {
						"Context": [
							375
						],
						"Pausable": [
							235
						]
					},
					"id": 236,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 129,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 130,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 236,
							"sourceUnit": 376,
							"src": "130:30:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 132,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 375,
										"src": "632:7:2"
									},
									"id": 133,
									"nodeType": "InheritanceSpecifier",
									"src": "632:7:2"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 131,
								"nodeType": "StructuredDocumentation",
								"src": "162:439:2",
								"text": " @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."
							},
							"fullyImplemented": true,
							"id": 235,
							"linearizedBaseContracts": [
								235,
								375
							],
							"name": "Pausable",
							"nameLocation": "620:8:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 134,
										"nodeType": "StructuredDocumentation",
										"src": "646:73:2",
										"text": " @dev Emitted when the pause is triggered by `account`."
									},
									"id": 138,
									"name": "Paused",
									"nameLocation": "730:6:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 137,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 136,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "745:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "737:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 135,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "737:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "736:17:2"
									},
									"src": "724:30:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 139,
										"nodeType": "StructuredDocumentation",
										"src": "760:70:2",
										"text": " @dev Emitted when the pause is lifted by `account`."
									},
									"id": 143,
									"name": "Unpaused",
									"nameLocation": "841:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 142,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 141,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "858:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 143,
												"src": "850:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 140,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "850:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "849:17:2"
									},
									"src": "835:32:2"
								},
								{
									"constant": false,
									"id": 145,
									"mutability": "mutable",
									"name": "_paused",
									"nameLocation": "886:7:2",
									"nodeType": "VariableDeclaration",
									"scope": 235,
									"src": "873:20:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 144,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "873:4:2",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 153,
										"nodeType": "Block",
										"src": "986:32:2",
										"statements": [
											{
												"expression": {
													"id": 151,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 149,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 145,
														"src": "996:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 150,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1006:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "996:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 152,
												"nodeType": "ExpressionStatement",
												"src": "996:15:2"
											}
										]
									},
									"documentation": {
										"id": 146,
										"nodeType": "StructuredDocumentation",
										"src": "900:67:2",
										"text": " @dev Initializes the contract in unpaused state."
									},
									"id": 154,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "983:2:2"
									},
									"returnParameters": {
										"id": 148,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "986:0:2"
									},
									"scope": 235,
									"src": "972:46:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 161,
										"nodeType": "Block",
										"src": "1229:47:2",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 157,
														"name": "_requireNotPaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 191,
														"src": "1239:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 158,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1239:19:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 159,
												"nodeType": "ExpressionStatement",
												"src": "1239:19:2"
											},
											{
												"id": 160,
												"nodeType": "PlaceholderStatement",
												"src": "1268:1:2"
											}
										]
									},
									"documentation": {
										"id": 155,
										"nodeType": "StructuredDocumentation",
										"src": "1024:175:2",
										"text": " @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."
									},
									"id": 162,
									"name": "whenNotPaused",
									"nameLocation": "1213:13:2",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1226:2:2"
									},
									"src": "1204:72:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 169,
										"nodeType": "Block",
										"src": "1476:44:2",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 165,
														"name": "_requirePaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 202,
														"src": "1486:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 166,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1486:16:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 167,
												"nodeType": "ExpressionStatement",
												"src": "1486:16:2"
											},
											{
												"id": 168,
												"nodeType": "PlaceholderStatement",
												"src": "1512:1:2"
											}
										]
									},
									"documentation": {
										"id": 163,
										"nodeType": "StructuredDocumentation",
										"src": "1282:167:2",
										"text": " @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."
									},
									"id": 170,
									"name": "whenPaused",
									"nameLocation": "1463:10:2",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1473:2:2"
									},
									"src": "1454:66:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 178,
										"nodeType": "Block",
										"src": "1668:31:2",
										"statements": [
											{
												"expression": {
													"id": 176,
													"name": "_paused",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 145,
													"src": "1685:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 175,
												"id": 177,
												"nodeType": "Return",
												"src": "1678:14:2"
											}
										]
									},
									"documentation": {
										"id": 171,
										"nodeType": "StructuredDocumentation",
										"src": "1526:84:2",
										"text": " @dev Returns true if the contract is paused, and false otherwise."
									},
									"functionSelector": "5c975abb",
									"id": 179,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "paused",
									"nameLocation": "1624:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 172,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1630:2:2"
									},
									"returnParameters": {
										"id": 175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 179,
												"src": "1662:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 173,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1662:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1661:6:2"
									},
									"scope": 235,
									"src": "1615:84:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 190,
										"nodeType": "Block",
										"src": "1818:55:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 186,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "1836:9:2",
															"subExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 184,
																	"name": "paused",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 179,
																	"src": "1837:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																		"typeString": "function () view returns (bool)"
																	}
																},
																"id": 185,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1837:8:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5061757361626c653a20706175736564",
															"id": 187,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1847:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a",
																"typeString": "literal_string \"Pausable: paused\""
															},
															"value": "Pausable: paused"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a",
																"typeString": "literal_string \"Pausable: paused\""
															}
														],
														"id": 183,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1828:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 188,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1828:38:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 189,
												"nodeType": "ExpressionStatement",
												"src": "1828:38:2"
											}
										]
									},
									"documentation": {
										"id": 180,
										"nodeType": "StructuredDocumentation",
										"src": "1705:57:2",
										"text": " @dev Throws if the contract is paused."
									},
									"id": 191,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requireNotPaused",
									"nameLocation": "1776:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 181,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1793:2:2"
									},
									"returnParameters": {
										"id": 182,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1818:0:2"
									},
									"scope": 235,
									"src": "1767:106:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 201,
										"nodeType": "Block",
										"src": "1993:58:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 196,
																"name": "paused",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 179,
																"src": "2011:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																	"typeString": "function () view returns (bool)"
																}
															},
															"id": 197,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2011:8:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5061757361626c653a206e6f7420706175736564",
															"id": 198,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2021:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a",
																"typeString": "literal_string \"Pausable: not paused\""
															},
															"value": "Pausable: not paused"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a",
																"typeString": "literal_string \"Pausable: not paused\""
															}
														],
														"id": 195,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2003:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 199,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2003:41:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 200,
												"nodeType": "ExpressionStatement",
												"src": "2003:41:2"
											}
										]
									},
									"documentation": {
										"id": 192,
										"nodeType": "StructuredDocumentation",
										"src": "1879:61:2",
										"text": " @dev Throws if the contract is not paused."
									},
									"id": 202,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requirePaused",
									"nameLocation": "1954:14:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1968:2:2"
									},
									"returnParameters": {
										"id": 194,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1993:0:2"
									},
									"scope": 235,
									"src": "1945:106:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 217,
										"nodeType": "Block",
										"src": "2235:66:2",
										"statements": [
											{
												"expression": {
													"id": 210,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 208,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 145,
														"src": "2245:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 209,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2255:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "2245:14:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 211,
												"nodeType": "ExpressionStatement",
												"src": "2245:14:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 213,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 365,
																"src": "2281:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 214,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2281:12:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 212,
														"name": "Paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 138,
														"src": "2274:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 215,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2274:20:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 216,
												"nodeType": "EmitStatement",
												"src": "2269:25:2"
											}
										]
									},
									"documentation": {
										"id": 203,
										"nodeType": "StructuredDocumentation",
										"src": "2057:124:2",
										"text": " @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."
									},
									"id": 218,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 206,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 205,
												"name": "whenNotPaused",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 162,
												"src": "2221:13:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "2221:13:2"
										}
									],
									"name": "_pause",
									"nameLocation": "2195:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 204,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2201:2:2"
									},
									"returnParameters": {
										"id": 207,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2235:0:2"
									},
									"scope": 235,
									"src": "2186:115:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 233,
										"nodeType": "Block",
										"src": "2481:69:2",
										"statements": [
											{
												"expression": {
													"id": 226,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 224,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 145,
														"src": "2491:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 225,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2501:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "2491:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 227,
												"nodeType": "ExpressionStatement",
												"src": "2491:15:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 229,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 365,
																"src": "2530:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 230,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2530:12:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 228,
														"name": "Unpaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 143,
														"src": "2521:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 231,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2521:22:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 232,
												"nodeType": "EmitStatement",
												"src": "2516:27:2"
											}
										]
									},
									"documentation": {
										"id": 219,
										"nodeType": "StructuredDocumentation",
										"src": "2307:121:2",
										"text": " @dev Returns to normal state.\n Requirements:\n - The contract must be paused."
									},
									"id": 234,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 222,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 221,
												"name": "whenPaused",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 170,
												"src": "2470:10:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "2470:10:2"
										}
									],
									"name": "_unpause",
									"nameLocation": "2442:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2450:2:2"
									},
									"returnParameters": {
										"id": 223,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2481:0:2"
									},
									"scope": 235,
									"src": "2433:117:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 236,
							"src": "602:1950:2",
							"usedErrors": []
						}
					],
					"src": "105:2448:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							275
						]
					},
					"id": 276,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 237,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "97:23:3"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 238,
								"nodeType": "StructuredDocumentation",
								"src": "122:750:3",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 275,
							"linearizedBaseContracts": [
								275
							],
							"name": "ReentrancyGuard",
							"nameLocation": "891:15:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 241,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1686:12:3",
									"nodeType": "VariableDeclaration",
									"scope": 275,
									"src": "1661:41:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 239,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1661:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 240,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1701:1:3",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 244,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1733:8:3",
									"nodeType": "VariableDeclaration",
									"scope": 275,
									"src": "1708:37:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 242,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1708:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 243,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1744:1:3",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 246,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1768:7:3",
									"nodeType": "VariableDeclaration",
									"scope": 275,
									"src": "1752:23:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 245,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1752:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 253,
										"nodeType": "Block",
										"src": "1796:39:3",
										"statements": [
											{
												"expression": {
													"id": 251,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 249,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 246,
														"src": "1806:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 250,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 241,
														"src": "1816:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1806:22:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 252,
												"nodeType": "ExpressionStatement",
												"src": "1806:22:3"
											}
										]
									},
									"id": 254,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1793:2:3"
									},
									"returnParameters": {
										"id": 248,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1796:0:3"
									},
									"scope": 275,
									"src": "1782:53:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 273,
										"nodeType": "Block",
										"src": "2236:421:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 260,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 258,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 246,
																"src": "2325:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 259,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 244,
																"src": "2336:8:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2325:19:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 261,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2346:33:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 257,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2317:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 262,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2317:63:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 263,
												"nodeType": "ExpressionStatement",
												"src": "2317:63:3"
											},
											{
												"expression": {
													"id": 266,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 264,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 246,
														"src": "2455:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 265,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 244,
														"src": "2465:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2455:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 267,
												"nodeType": "ExpressionStatement",
												"src": "2455:18:3"
											},
											{
												"id": 268,
												"nodeType": "PlaceholderStatement",
												"src": "2484:1:3"
											},
											{
												"expression": {
													"id": 271,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 269,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 246,
														"src": "2628:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 270,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 241,
														"src": "2638:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2628:22:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 272,
												"nodeType": "ExpressionStatement",
												"src": "2628:22:3"
											}
										]
									},
									"documentation": {
										"id": 255,
										"nodeType": "StructuredDocumentation",
										"src": "1841:366:3",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 274,
									"name": "nonReentrant",
									"nameLocation": "2221:12:3",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 256,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2233:2:3"
									},
									"src": "2212:445:3",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 276,
							"src": "873:1786:3",
							"usedErrors": []
						}
					],
					"src": "97:2563:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							353
						]
					},
					"id": 354,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 277,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 278,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:4",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 353,
							"linearizedBaseContracts": [
								353
							],
							"name": "IERC20",
							"nameLocation": "212:6:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 279,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:4",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 287,
									"name": "Transfer",
									"nameLocation": "394:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 281,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 287,
												"src": "403:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 280,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 283,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 287,
												"src": "425:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 282,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 285,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 287,
												"src": "445:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 284,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:4"
									},
									"src": "388:72:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 288,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:4",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 296,
									"name": "Approval",
									"nameLocation": "625:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 290,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 296,
												"src": "634:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 289,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 292,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 296,
												"src": "657:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 291,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 294,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 296,
												"src": "682:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 293,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:4"
									},
									"src": "619:78:4"
								},
								{
									"documentation": {
										"id": 297,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:4",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 302,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 298,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:4"
									},
									"returnParameters": {
										"id": 301,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 300,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "820:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 299,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:4"
									},
									"scope": 353,
									"src": "774:55:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 303,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:4",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 310,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 306,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 305,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 310,
												"src": "931:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 304,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:4"
									},
									"returnParameters": {
										"id": 309,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 308,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 310,
												"src": "971:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 307,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:4"
									},
									"scope": 353,
									"src": "912:68:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 311,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:4",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 320,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 316,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 313,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "1211:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 312,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 315,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "1223:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 314,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:4"
									},
									"returnParameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 318,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "1257:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 317,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:4"
									},
									"scope": 353,
									"src": "1193:70:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 321,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:4",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 330,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 323,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 330,
												"src": "1557:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 322,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 325,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 330,
												"src": "1572:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 324,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:4"
									},
									"returnParameters": {
										"id": 329,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 328,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 330,
												"src": "1612:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 327,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:4"
									},
									"scope": 353,
									"src": "1538:83:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 331,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:4",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 340,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 333,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 340,
												"src": "2291:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 332,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 335,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 340,
												"src": "2308:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 334,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:4"
									},
									"returnParameters": {
										"id": 339,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 338,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 340,
												"src": "2342:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 337,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:4"
									},
									"scope": 353,
									"src": "2274:74:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 341,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:4",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 352,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 348,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 343,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2685:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 352,
												"src": "2677:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 342,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 345,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2707:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 352,
												"src": "2699:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 344,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 347,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2727:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 352,
												"src": "2719:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 346,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:72:4"
									},
									"returnParameters": {
										"id": 351,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 350,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 352,
												"src": "2758:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 349,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2758:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2757:6:4"
									},
									"scope": 353,
									"src": "2646:118:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 354,
							"src": "202:2564:4",
							"usedErrors": []
						}
					],
					"src": "106:2661:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							375
						]
					},
					"id": 376,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 355,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:5"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 356,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:5",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 375,
							"linearizedBaseContracts": [
								375
							],
							"name": "Context",
							"nameLocation": "626:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 364,
										"nodeType": "Block",
										"src": "702:34:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 361,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 360,
												"id": 363,
												"nodeType": "Return",
												"src": "712:17:5"
											}
										]
									},
									"id": 365,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 357,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:5"
									},
									"returnParameters": {
										"id": 360,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 359,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "693:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 358,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:5"
									},
									"scope": 375,
									"src": "640:96:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 373,
										"nodeType": "Block",
										"src": "809:32:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 370,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 371,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 369,
												"id": 372,
												"nodeType": "Return",
												"src": "819:15:5"
											}
										]
									},
									"id": 374,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 366,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:5"
									},
									"returnParameters": {
										"id": 369,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 368,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 374,
												"src": "793:14:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 367,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:5"
									},
									"scope": 375,
									"src": "742:99:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 376,
							"src": "608:235:5",
							"usedErrors": []
						}
					],
					"src": "86:758:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol",
					"exportedSymbols": {
						"EnumerableSet": [
							974
						]
					},
					"id": 975,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 377,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "115:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 378,
								"nodeType": "StructuredDocumentation",
								"src": "140:1087:6",
								"text": " @dev Library for managing\n https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n types.\n Sets have the following properties:\n - Elements are added, removed, and checked for existence in constant time\n (O(1)).\n - Elements are enumerated in O(n). No guarantees are made on the ordering.\n ```\n contract Example {\n     // Add the library methods\n     using EnumerableSet for EnumerableSet.AddressSet;\n     // Declare a set state variable\n     EnumerableSet.AddressSet private mySet;\n }\n ```\n As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n and `uint256` (`UintSet`) are supported.\n [WARNING]\n ====\n  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n ===="
							},
							"fullyImplemented": true,
							"id": 974,
							"linearizedBaseContracts": [
								974
							],
							"name": "EnumerableSet",
							"nameLocation": "1236:13:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "EnumerableSet.Set",
									"id": 386,
									"members": [
										{
											"constant": false,
											"id": 381,
											"mutability": "mutable",
											"name": "_values",
											"nameLocation": "1760:7:6",
											"nodeType": "VariableDeclaration",
											"scope": 386,
											"src": "1750:17:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
												"typeString": "bytes32[]"
											},
											"typeName": {
												"baseType": {
													"id": 379,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1750:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 380,
												"nodeType": "ArrayTypeName",
												"src": "1750:9:6",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
													"typeString": "bytes32[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 385,
											"mutability": "mutable",
											"name": "_indexes",
											"nameLocation": "1928:8:6",
											"nodeType": "VariableDeclaration",
											"scope": 386,
											"src": "1900:36:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
												"typeString": "mapping(bytes32 => uint256)"
											},
											"typeName": {
												"id": 384,
												"keyType": {
													"id": 382,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1908:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "Mapping",
												"src": "1900:27:6",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
													"typeString": "mapping(bytes32 => uint256)"
												},
												"valueType": {
													"id": 383,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1919:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Set",
									"nameLocation": "1703:3:6",
									"nodeType": "StructDefinition",
									"scope": 974,
									"src": "1696:247:6",
									"visibility": "public"
								},
								{
									"body": {
										"id": 427,
										"nodeType": "Block",
										"src": "2182:335:6",
										"statements": [
											{
												"condition": {
													"id": 401,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "2196:22:6",
													"subExpression": {
														"arguments": [
															{
																"id": 398,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 390,
																"src": "2207:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
																	"typeString": "struct EnumerableSet.Set storage pointer"
																}
															},
															{
																"id": 399,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 392,
																"src": "2212:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
																	"typeString": "struct EnumerableSet.Set storage pointer"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 397,
															"name": "_contains",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 531,
															"src": "2197:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$386_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
																"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
															}
														},
														"id": 400,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2197:21:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 425,
													"nodeType": "Block",
													"src": "2474:37:6",
													"statements": [
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 423,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2495:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 396,
															"id": 424,
															"nodeType": "Return",
															"src": "2488:12:6"
														}
													]
												},
												"id": 426,
												"nodeType": "IfStatement",
												"src": "2192:319:6",
												"trueBody": {
													"id": 422,
													"nodeType": "Block",
													"src": "2220:248:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 407,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 392,
																		"src": "2251:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"expression": {
																		"expression": {
																			"id": 402,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 390,
																			"src": "2234:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 405,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 381,
																		"src": "2234:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 406,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "push",
																	"nodeType": "MemberAccess",
																	"src": "2234:16:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$",
																		"typeString": "function (bytes32[] storage pointer,bytes32)"
																	}
																},
																"id": 408,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2234:23:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 409,
															"nodeType": "ExpressionStatement",
															"src": "2234:23:6"
														},
														{
															"expression": {
																"id": 418,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"expression": {
																			"id": 410,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 390,
																			"src": "2392:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 413,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_indexes",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 385,
																		"src": "2392:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																			"typeString": "mapping(bytes32 => uint256)"
																		}
																	},
																	"id": 414,
																	"indexExpression": {
																		"id": 412,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 392,
																		"src": "2405:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "2392:19:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"expression": {
																			"id": 415,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 390,
																			"src": "2414:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 416,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 381,
																		"src": "2414:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 417,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "2414:18:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2392:40:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 419,
															"nodeType": "ExpressionStatement",
															"src": "2392:40:6"
														},
														{
															"expression": {
																"hexValue": "74727565",
																"id": 420,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2453:4:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 396,
															"id": 421,
															"nodeType": "Return",
															"src": "2446:11:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 387,
										"nodeType": "StructuredDocumentation",
										"src": "1949:159:6",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 428,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_add",
									"nameLocation": "2122:4:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "2139:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 428,
												"src": "2127:15:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 389,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 388,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 386,
														"src": "2127:3:6"
													},
													"referencedDeclaration": 386,
													"src": "2127:3:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 392,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2152:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 428,
												"src": "2144:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 391,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2144:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2126:32:6"
									},
									"returnParameters": {
										"id": 396,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 395,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 428,
												"src": "2176:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 394,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2176:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2175:6:6"
									},
									"scope": 974,
									"src": "2113:404:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 511,
										"nodeType": "Block",
										"src": "2757:1316:6",
										"statements": [
											{
												"assignments": [
													440
												],
												"declarations": [
													{
														"constant": false,
														"id": 440,
														"mutability": "mutable",
														"name": "valueIndex",
														"nameLocation": "2875:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 511,
														"src": "2867:18:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 439,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2867:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 445,
												"initialValue": {
													"baseExpression": {
														"expression": {
															"id": 441,
															"name": "set",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 432,
															"src": "2888:3:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
																"typeString": "struct EnumerableSet.Set storage pointer"
															}
														},
														"id": 442,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_indexes",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 385,
														"src": "2888:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
															"typeString": "mapping(bytes32 => uint256)"
														}
													},
													"id": 444,
													"indexExpression": {
														"id": 443,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 434,
														"src": "2901:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2888:19:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2867:40:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 448,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 446,
														"name": "valueIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 440,
														"src": "2922:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 447,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2936:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2922:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 509,
													"nodeType": "Block",
													"src": "4030:37:6",
													"statements": [
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 507,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4051:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 438,
															"id": 508,
															"nodeType": "Return",
															"src": "4044:12:6"
														}
													]
												},
												"id": 510,
												"nodeType": "IfStatement",
												"src": "2918:1149:6",
												"trueBody": {
													"id": 506,
													"nodeType": "Block",
													"src": "2939:1085:6",
													"statements": [
														{
															"assignments": [
																450
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 450,
																	"mutability": "mutable",
																	"name": "toDeleteIndex",
																	"nameLocation": "3299:13:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 506,
																	"src": "3291:21:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 449,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3291:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 454,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 453,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 451,
																	"name": "valueIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 440,
																	"src": "3315:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 452,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3328:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "3315:14:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3291:38:6"
														},
														{
															"assignments": [
																456
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 456,
																	"mutability": "mutable",
																	"name": "lastIndex",
																	"nameLocation": "3351:9:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 506,
																	"src": "3343:17:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 455,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3343:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 462,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 461,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"expression": {
																			"id": 457,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 432,
																			"src": "3363:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 458,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 381,
																		"src": "3363:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 459,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "3363:18:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 460,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3384:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "3363:22:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3343:42:6"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 465,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 463,
																	"name": "lastIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 456,
																	"src": "3404:9:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"id": 464,
																	"name": "toDeleteIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 450,
																	"src": "3417:13:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3404:26:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 490,
															"nodeType": "IfStatement",
															"src": "3400:398:6",
															"trueBody": {
																"id": 489,
																"nodeType": "Block",
																"src": "3432:366:6",
																"statements": [
																	{
																		"assignments": [
																			467
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 467,
																				"mutability": "mutable",
																				"name": "lastValue",
																				"nameLocation": "3458:9:6",
																				"nodeType": "VariableDeclaration",
																				"scope": 489,
																				"src": "3450:17:6",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				},
																				"typeName": {
																					"id": 466,
																					"name": "bytes32",
																					"nodeType": "ElementaryTypeName",
																					"src": "3450:7:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 472,
																		"initialValue": {
																			"baseExpression": {
																				"expression": {
																					"id": 468,
																					"name": "set",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 432,
																					"src": "3470:3:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
																						"typeString": "struct EnumerableSet.Set storage pointer"
																					}
																				},
																				"id": 469,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "_values",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 381,
																				"src": "3470:11:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																					"typeString": "bytes32[] storage ref"
																				}
																			},
																			"id": 471,
																			"indexExpression": {
																				"id": 470,
																				"name": "lastIndex",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 456,
																				"src": "3482:9:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "3470:22:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"nodeType": "VariableDeclarationStatement",
																		"src": "3450:42:6"
																	},
																	{
																		"expression": {
																			"id": 479,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"expression": {
																						"id": 473,
																						"name": "set",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 432,
																						"src": "3592:3:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
																							"typeString": "struct EnumerableSet.Set storage pointer"
																						}
																					},
																					"id": 476,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "_values",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 381,
																					"src": "3592:11:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																						"typeString": "bytes32[] storage ref"
																					}
																				},
																				"id": 477,
																				"indexExpression": {
																					"id": 475,
																					"name": "toDeleteIndex",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 450,
																					"src": "3604:13:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "3592:26:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 478,
																				"name": "lastValue",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 467,
																				"src": "3621:9:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"src": "3592:38:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"id": 480,
																		"nodeType": "ExpressionStatement",
																		"src": "3592:38:6"
																	},
																	{
																		"expression": {
																			"id": 487,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"expression": {
																						"id": 481,
																						"name": "set",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 432,
																						"src": "3704:3:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
																							"typeString": "struct EnumerableSet.Set storage pointer"
																						}
																					},
																					"id": 484,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "_indexes",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 385,
																					"src": "3704:12:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																						"typeString": "mapping(bytes32 => uint256)"
																					}
																				},
																				"id": 485,
																				"indexExpression": {
																					"id": 483,
																					"name": "lastValue",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 467,
																					"src": "3717:9:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "3704:23:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 486,
																				"name": "valueIndex",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 440,
																				"src": "3730:10:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3704:36:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 488,
																		"nodeType": "ExpressionStatement",
																		"src": "3704:36:6"
																	}
																]
															}
														},
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"expression": {
																			"id": 491,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 432,
																			"src": "3876:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 494,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 381,
																		"src": "3876:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 495,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "pop",
																	"nodeType": "MemberAccess",
																	"src": "3876:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_arraypop_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$",
																		"typeString": "function (bytes32[] storage pointer)"
																	}
																},
																"id": 496,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3876:17:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 497,
															"nodeType": "ExpressionStatement",
															"src": "3876:17:6"
														},
														{
															"expression": {
																"id": 502,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "delete",
																"prefix": true,
																"src": "3961:26:6",
																"subExpression": {
																	"baseExpression": {
																		"expression": {
																			"id": 498,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 432,
																			"src": "3968:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 499,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_indexes",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 385,
																		"src": "3968:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																			"typeString": "mapping(bytes32 => uint256)"
																		}
																	},
																	"id": 501,
																	"indexExpression": {
																		"id": 500,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 434,
																		"src": "3981:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "3968:19:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 503,
															"nodeType": "ExpressionStatement",
															"src": "3961:26:6"
														},
														{
															"expression": {
																"hexValue": "74727565",
																"id": 504,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4009:4:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 438,
															"id": 505,
															"nodeType": "Return",
															"src": "4002:11:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 429,
										"nodeType": "StructuredDocumentation",
										"src": "2523:157:6",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 512,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_remove",
									"nameLocation": "2694:7:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 432,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "2714:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 512,
												"src": "2702:15:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 431,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 430,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 386,
														"src": "2702:3:6"
													},
													"referencedDeclaration": 386,
													"src": "2702:3:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 434,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2727:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 512,
												"src": "2719:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 433,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2701:32:6"
									},
									"returnParameters": {
										"id": 438,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 437,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 512,
												"src": "2751:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 436,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2751:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2750:6:6"
									},
									"scope": 974,
									"src": "2685:1388:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 530,
										"nodeType": "Block",
										"src": "4233:48:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 528,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"expression": {
																"id": 523,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 516,
																"src": "4250:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
																	"typeString": "struct EnumerableSet.Set storage pointer"
																}
															},
															"id": 524,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_indexes",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 385,
															"src": "4250:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																"typeString": "mapping(bytes32 => uint256)"
															}
														},
														"id": 526,
														"indexExpression": {
															"id": 525,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 518,
															"src": "4263:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4250:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 527,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4273:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4250:24:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 522,
												"id": 529,
												"nodeType": "Return",
												"src": "4243:31:6"
											}
										]
									},
									"documentation": {
										"id": 513,
										"nodeType": "StructuredDocumentation",
										"src": "4079:70:6",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 531,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contains",
									"nameLocation": "4163:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 519,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 516,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "4185:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "4173:15:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 515,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 514,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 386,
														"src": "4173:3:6"
													},
													"referencedDeclaration": 386,
													"src": "4173:3:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 518,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4198:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "4190:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 517,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4190:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4172:32:6"
									},
									"returnParameters": {
										"id": 522,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 521,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "4227:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 520,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4227:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4226:6:6"
									},
									"scope": 974,
									"src": "4154:127:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 544,
										"nodeType": "Block",
										"src": "4427:42:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"expression": {
															"id": 540,
															"name": "set",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 535,
															"src": "4444:3:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
																"typeString": "struct EnumerableSet.Set storage pointer"
															}
														},
														"id": 541,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_values",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 381,
														"src": "4444:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
															"typeString": "bytes32[] storage ref"
														}
													},
													"id": 542,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "4444:18:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 539,
												"id": 543,
												"nodeType": "Return",
												"src": "4437:25:6"
											}
										]
									},
									"documentation": {
										"id": 532,
										"nodeType": "StructuredDocumentation",
										"src": "4287:70:6",
										"text": " @dev Returns the number of values on the set. O(1)."
									},
									"id": 545,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_length",
									"nameLocation": "4371:7:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 536,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 535,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "4391:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 545,
												"src": "4379:15:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 534,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 533,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 386,
														"src": "4379:3:6"
													},
													"referencedDeclaration": 386,
													"src": "4379:3:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4378:17:6"
									},
									"returnParameters": {
										"id": 539,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 538,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 545,
												"src": "4418:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 537,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4418:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4417:9:6"
									},
									"scope": 974,
									"src": "4362:107:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 561,
										"nodeType": "Block",
										"src": "4887:42:6",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"expression": {
															"id": 556,
															"name": "set",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 549,
															"src": "4904:3:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
																"typeString": "struct EnumerableSet.Set storage pointer"
															}
														},
														"id": 557,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_values",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 381,
														"src": "4904:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
															"typeString": "bytes32[] storage ref"
														}
													},
													"id": 559,
													"indexExpression": {
														"id": 558,
														"name": "index",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 551,
														"src": "4916:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4904:18:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 555,
												"id": 560,
												"nodeType": "Return",
												"src": "4897:25:6"
											}
										]
									},
									"documentation": {
										"id": 546,
										"nodeType": "StructuredDocumentation",
										"src": "4475:331:6",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 562,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_at",
									"nameLocation": "4820:3:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 552,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 549,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "4836:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 562,
												"src": "4824:15:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 548,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 547,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 386,
														"src": "4824:3:6"
													},
													"referencedDeclaration": 386,
													"src": "4824:3:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 551,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "4849:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 562,
												"src": "4841:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 550,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4841:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4823:32:6"
									},
									"returnParameters": {
										"id": 555,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 554,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 562,
												"src": "4878:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 553,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4878:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4877:9:6"
									},
									"scope": 974,
									"src": "4811:118:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 575,
										"nodeType": "Block",
										"src": "5543:35:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 572,
														"name": "set",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 566,
														"src": "5560:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
															"typeString": "struct EnumerableSet.Set storage pointer"
														}
													},
													"id": 573,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "_values",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 381,
													"src": "5560:11:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
														"typeString": "bytes32[] storage ref"
													}
												},
												"functionReturnParameters": 571,
												"id": 574,
												"nodeType": "Return",
												"src": "5553:18:6"
											}
										]
									},
									"documentation": {
										"id": 563,
										"nodeType": "StructuredDocumentation",
										"src": "4935:529:6",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 576,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_values",
									"nameLocation": "5478:7:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 567,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 566,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "5498:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 576,
												"src": "5486:15:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 565,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 564,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 386,
														"src": "5486:3:6"
													},
													"referencedDeclaration": 386,
													"src": "5486:3:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5485:17:6"
									},
									"returnParameters": {
										"id": 571,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 570,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 576,
												"src": "5525:16:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 568,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "5525:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 569,
													"nodeType": "ArrayTypeName",
													"src": "5525:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5524:18:6"
									},
									"scope": 974,
									"src": "5469:109:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"canonicalName": "EnumerableSet.Bytes32Set",
									"id": 580,
									"members": [
										{
											"constant": false,
											"id": 579,
											"mutability": "mutable",
											"name": "_inner",
											"nameLocation": "5635:6:6",
											"nodeType": "VariableDeclaration",
											"scope": 580,
											"src": "5631:10:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
												"typeString": "struct EnumerableSet.Set"
											},
											"typeName": {
												"id": 578,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 577,
													"name": "Set",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 386,
													"src": "5631:3:6"
												},
												"referencedDeclaration": 386,
												"src": "5631:3:6",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Bytes32Set",
									"nameLocation": "5610:10:6",
									"nodeType": "StructDefinition",
									"scope": 974,
									"src": "5603:45:6",
									"visibility": "public"
								},
								{
									"body": {
										"id": 597,
										"nodeType": "Block",
										"src": "5894:47:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 592,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 584,
																"src": "5916:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$580_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 593,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 579,
															"src": "5916:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 594,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 586,
															"src": "5928:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 591,
														"name": "_add",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 428,
														"src": "5911:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$386_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 595,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5911:23:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 590,
												"id": 596,
												"nodeType": "Return",
												"src": "5904:30:6"
											}
										]
									},
									"documentation": {
										"id": 581,
										"nodeType": "StructuredDocumentation",
										"src": "5654:159:6",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 598,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "5827:3:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 587,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 584,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "5850:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 598,
												"src": "5831:22:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$580_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 583,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 582,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 580,
														"src": "5831:10:6"
													},
													"referencedDeclaration": 580,
													"src": "5831:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$580_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 586,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5863:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 598,
												"src": "5855:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 585,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5855:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5830:39:6"
									},
									"returnParameters": {
										"id": 590,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 589,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 598,
												"src": "5888:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 588,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5888:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5887:6:6"
									},
									"scope": 974,
									"src": "5818:123:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 615,
										"nodeType": "Block",
										"src": "6188:50:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 610,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 602,
																"src": "6213:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$580_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 611,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 579,
															"src": "6213:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 612,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 604,
															"src": "6225:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 609,
														"name": "_remove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 512,
														"src": "6205:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$386_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 613,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6205:26:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 608,
												"id": 614,
												"nodeType": "Return",
												"src": "6198:33:6"
											}
										]
									},
									"documentation": {
										"id": 599,
										"nodeType": "StructuredDocumentation",
										"src": "5947:157:6",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 616,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "remove",
									"nameLocation": "6118:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 605,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 602,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "6144:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 616,
												"src": "6125:22:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$580_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 601,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 600,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 580,
														"src": "6125:10:6"
													},
													"referencedDeclaration": 580,
													"src": "6125:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$580_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 604,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6157:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 616,
												"src": "6149:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 603,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6149:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6124:39:6"
									},
									"returnParameters": {
										"id": 608,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 607,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 616,
												"src": "6182:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 606,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6182:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6181:6:6"
									},
									"scope": 974,
									"src": "6109:129:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 633,
										"nodeType": "Block",
										"src": "6405:52:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 628,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 620,
																"src": "6432:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$580_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 629,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 579,
															"src": "6432:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 630,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 622,
															"src": "6444:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 627,
														"name": "_contains",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 531,
														"src": "6422:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$386_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
														}
													},
													"id": 631,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6422:28:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 626,
												"id": 632,
												"nodeType": "Return",
												"src": "6415:35:6"
											}
										]
									},
									"documentation": {
										"id": 617,
										"nodeType": "StructuredDocumentation",
										"src": "6244:70:6",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 634,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "contains",
									"nameLocation": "6328:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 623,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 620,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "6356:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 634,
												"src": "6337:22:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$580_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 619,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 618,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 580,
														"src": "6337:10:6"
													},
													"referencedDeclaration": 580,
													"src": "6337:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$580_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 622,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6369:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 634,
												"src": "6361:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 621,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6361:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6336:39:6"
									},
									"returnParameters": {
										"id": 626,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 625,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 634,
												"src": "6399:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 624,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6399:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6398:6:6"
									},
									"scope": 974,
									"src": "6319:138:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 648,
										"nodeType": "Block",
										"src": "6610:43:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 644,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 638,
																"src": "6635:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$580_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 645,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 579,
															"src": "6635:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 643,
														"name": "_length",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 545,
														"src": "6627:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$386_storage_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (uint256)"
														}
													},
													"id": 646,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6627:19:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 642,
												"id": 647,
												"nodeType": "Return",
												"src": "6620:26:6"
											}
										]
									},
									"documentation": {
										"id": 635,
										"nodeType": "StructuredDocumentation",
										"src": "6463:70:6",
										"text": " @dev Returns the number of values in the set. O(1)."
									},
									"id": 649,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "length",
									"nameLocation": "6547:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 639,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 638,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "6573:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 649,
												"src": "6554:22:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$580_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 637,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 636,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 580,
														"src": "6554:10:6"
													},
													"referencedDeclaration": 580,
													"src": "6554:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$580_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6553:24:6"
									},
									"returnParameters": {
										"id": 642,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 641,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 649,
												"src": "6601:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 640,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6601:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6600:9:6"
									},
									"scope": 974,
									"src": "6538:115:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 666,
										"nodeType": "Block",
										"src": "7078:46:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 661,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 653,
																"src": "7099:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$580_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 662,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 579,
															"src": "7099:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 663,
															"name": "index",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 655,
															"src": "7111:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 660,
														"name": "_at",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 562,
														"src": "7095:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$386_storage_ptr_$_t_uint256_$returns$_t_bytes32_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"
														}
													},
													"id": 664,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7095:22:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 659,
												"id": 665,
												"nodeType": "Return",
												"src": "7088:29:6"
											}
										]
									},
									"documentation": {
										"id": 650,
										"nodeType": "StructuredDocumentation",
										"src": "6659:331:6",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 667,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "at",
									"nameLocation": "7004:2:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 656,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 653,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "7026:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 667,
												"src": "7007:22:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$580_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 652,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 651,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 580,
														"src": "7007:10:6"
													},
													"referencedDeclaration": 580,
													"src": "7007:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$580_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 655,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "7039:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 667,
												"src": "7031:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 654,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7031:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7006:39:6"
									},
									"returnParameters": {
										"id": 659,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 658,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 667,
												"src": "7069:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 657,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7069:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7068:9:6"
									},
									"scope": 974,
									"src": "6995:129:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 682,
										"nodeType": "Block",
										"src": "7745:43:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 678,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 671,
																"src": "7770:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$580_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 679,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 579,
															"src": "7770:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 677,
														"name": "_values",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 576,
														"src": "7762:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$386_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"
														}
													},
													"id": 680,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7762:19:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"functionReturnParameters": 676,
												"id": 681,
												"nodeType": "Return",
												"src": "7755:26:6"
											}
										]
									},
									"documentation": {
										"id": 668,
										"nodeType": "StructuredDocumentation",
										"src": "7130:529:6",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 683,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "values",
									"nameLocation": "7673:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 672,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 671,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "7699:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 683,
												"src": "7680:22:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$580_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 670,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 669,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 580,
														"src": "7680:10:6"
													},
													"referencedDeclaration": 580,
													"src": "7680:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$580_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7679:24:6"
									},
									"returnParameters": {
										"id": 676,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 675,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 683,
												"src": "7727:16:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 673,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "7727:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 674,
													"nodeType": "ArrayTypeName",
													"src": "7727:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7726:18:6"
									},
									"scope": 974,
									"src": "7664:124:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"canonicalName": "EnumerableSet.AddressSet",
									"id": 687,
									"members": [
										{
											"constant": false,
											"id": 686,
											"mutability": "mutable",
											"name": "_inner",
											"nameLocation": "7845:6:6",
											"nodeType": "VariableDeclaration",
											"scope": 687,
											"src": "7841:10:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
												"typeString": "struct EnumerableSet.Set"
											},
											"typeName": {
												"id": 685,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 684,
													"name": "Set",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 386,
													"src": "7841:3:6"
												},
												"referencedDeclaration": 386,
												"src": "7841:3:6",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AddressSet",
									"nameLocation": "7820:10:6",
									"nodeType": "StructDefinition",
									"scope": 974,
									"src": "7813:45:6",
									"visibility": "public"
								},
								{
									"body": {
										"id": 713,
										"nodeType": "Block",
										"src": "8104:74:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 699,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 691,
																"src": "8126:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$687_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 700,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 686,
															"src": "8126:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 707,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 693,
																					"src": "8162:5:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 706,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8154:7:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 705,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "8154:7:6",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 708,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8154:14:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		],
																		"id": 704,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8146:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 703,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "8146:7:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 709,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8146:23:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 702,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8138:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 701,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "8138:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 710,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8138:32:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 698,
														"name": "_add",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 428,
														"src": "8121:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$386_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 711,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8121:50:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 697,
												"id": 712,
												"nodeType": "Return",
												"src": "8114:57:6"
											}
										]
									},
									"documentation": {
										"id": 688,
										"nodeType": "StructuredDocumentation",
										"src": "7864:159:6",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 714,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "8037:3:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 694,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 691,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "8060:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 714,
												"src": "8041:22:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$687_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 690,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 689,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 687,
														"src": "8041:10:6"
													},
													"referencedDeclaration": 687,
													"src": "8041:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$687_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 693,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8073:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 714,
												"src": "8065:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 692,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8065:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8040:39:6"
									},
									"returnParameters": {
										"id": 697,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 696,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 714,
												"src": "8098:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 695,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8098:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8097:6:6"
									},
									"scope": 974,
									"src": "8028:150:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 740,
										"nodeType": "Block",
										"src": "8425:77:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 726,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 718,
																"src": "8450:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$687_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 727,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 686,
															"src": "8450:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 734,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 720,
																					"src": "8486:5:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 733,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8478:7:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 732,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "8478:7:6",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 735,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8478:14:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		],
																		"id": 731,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8470:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 730,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "8470:7:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 736,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8470:23:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 729,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8462:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 728,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "8462:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 737,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8462:32:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 725,
														"name": "_remove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 512,
														"src": "8442:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$386_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 738,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8442:53:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 724,
												"id": 739,
												"nodeType": "Return",
												"src": "8435:60:6"
											}
										]
									},
									"documentation": {
										"id": 715,
										"nodeType": "StructuredDocumentation",
										"src": "8184:157:6",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 741,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "remove",
									"nameLocation": "8355:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 721,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 718,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "8381:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 741,
												"src": "8362:22:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$687_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 717,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 716,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 687,
														"src": "8362:10:6"
													},
													"referencedDeclaration": 687,
													"src": "8362:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$687_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 720,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8394:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 741,
												"src": "8386:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 719,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8386:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8361:39:6"
									},
									"returnParameters": {
										"id": 724,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 723,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 741,
												"src": "8419:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 722,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8419:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8418:6:6"
									},
									"scope": 974,
									"src": "8346:156:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 767,
										"nodeType": "Block",
										"src": "8669:79:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 753,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 745,
																"src": "8696:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$687_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 754,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 686,
															"src": "8696:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 761,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 747,
																					"src": "8732:5:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 760,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8724:7:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 759,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "8724:7:6",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 762,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8724:14:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		],
																		"id": 758,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8716:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 757,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "8716:7:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 763,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8716:23:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 756,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8708:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 755,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "8708:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 764,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8708:32:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 752,
														"name": "_contains",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 531,
														"src": "8686:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$386_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
														}
													},
													"id": 765,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8686:55:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 751,
												"id": 766,
												"nodeType": "Return",
												"src": "8679:62:6"
											}
										]
									},
									"documentation": {
										"id": 742,
										"nodeType": "StructuredDocumentation",
										"src": "8508:70:6",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 768,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "contains",
									"nameLocation": "8592:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 748,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 745,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "8620:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 768,
												"src": "8601:22:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$687_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 744,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 743,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 687,
														"src": "8601:10:6"
													},
													"referencedDeclaration": 687,
													"src": "8601:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$687_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 747,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8633:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 768,
												"src": "8625:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 746,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8625:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8600:39:6"
									},
									"returnParameters": {
										"id": 751,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 750,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 768,
												"src": "8663:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 749,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8663:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8662:6:6"
									},
									"scope": 974,
									"src": "8583:165:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 782,
										"nodeType": "Block",
										"src": "8901:43:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 778,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 772,
																"src": "8926:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$687_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 779,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 686,
															"src": "8926:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 777,
														"name": "_length",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 545,
														"src": "8918:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$386_storage_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (uint256)"
														}
													},
													"id": 780,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8918:19:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 776,
												"id": 781,
												"nodeType": "Return",
												"src": "8911:26:6"
											}
										]
									},
									"documentation": {
										"id": 769,
										"nodeType": "StructuredDocumentation",
										"src": "8754:70:6",
										"text": " @dev Returns the number of values in the set. O(1)."
									},
									"id": 783,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "length",
									"nameLocation": "8838:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 773,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 772,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "8864:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 783,
												"src": "8845:22:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$687_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 771,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 770,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 687,
														"src": "8845:10:6"
													},
													"referencedDeclaration": 687,
													"src": "8845:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$687_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8844:24:6"
									},
									"returnParameters": {
										"id": 776,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 775,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 783,
												"src": "8892:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 774,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8892:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8891:9:6"
									},
									"scope": 974,
									"src": "8829:115:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 809,
										"nodeType": "Block",
										"src": "9369:73:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"expression": {
																						"id": 801,
																						"name": "set",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 787,
																						"src": "9414:3:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_AddressSet_$687_storage_ptr",
																							"typeString": "struct EnumerableSet.AddressSet storage pointer"
																						}
																					},
																					"id": 802,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "_inner",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 686,
																					"src": "9414:10:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Set_$386_storage",
																						"typeString": "struct EnumerableSet.Set storage ref"
																					}
																				},
																				{
																					"id": 803,
																					"name": "index",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 789,
																					"src": "9426:5:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_struct$_Set_$386_storage",
																						"typeString": "struct EnumerableSet.Set storage ref"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 800,
																				"name": "_at",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 562,
																				"src": "9410:3:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$386_storage_ptr_$_t_uint256_$returns$_t_bytes32_$",
																					"typeString": "function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"
																				}
																			},
																			"id": 804,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "9410:22:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 799,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "9402:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 798,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "9402:7:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 805,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9402:31:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 797,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9394:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint160_$",
																	"typeString": "type(uint160)"
																},
																"typeName": {
																	"id": 796,
																	"name": "uint160",
																	"nodeType": "ElementaryTypeName",
																	"src": "9394:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 806,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9394:40:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														],
														"id": 795,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "9386:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_$",
															"typeString": "type(address)"
														},
														"typeName": {
															"id": 794,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "9386:7:6",
															"typeDescriptions": {}
														}
													},
													"id": 807,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9386:49:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 793,
												"id": 808,
												"nodeType": "Return",
												"src": "9379:56:6"
											}
										]
									},
									"documentation": {
										"id": 784,
										"nodeType": "StructuredDocumentation",
										"src": "8950:331:6",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 810,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "at",
									"nameLocation": "9295:2:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 790,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 787,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "9317:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 810,
												"src": "9298:22:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$687_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 786,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 785,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 687,
														"src": "9298:10:6"
													},
													"referencedDeclaration": 687,
													"src": "9298:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$687_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 789,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "9330:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 810,
												"src": "9322:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 788,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9322:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9297:39:6"
									},
									"returnParameters": {
										"id": 793,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 792,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 810,
												"src": "9360:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 791,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9360:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9359:9:6"
									},
									"scope": 974,
									"src": "9286:156:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 839,
										"nodeType": "Block",
										"src": "10063:219:6",
										"statements": [
											{
												"assignments": [
													824
												],
												"declarations": [
													{
														"constant": false,
														"id": 824,
														"mutability": "mutable",
														"name": "store",
														"nameLocation": "10090:5:6",
														"nodeType": "VariableDeclaration",
														"scope": 839,
														"src": "10073:22:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 822,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "10073:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 823,
															"nodeType": "ArrayTypeName",
															"src": "10073:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 829,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 826,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 814,
																"src": "10106:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$687_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 827,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 686,
															"src": "10106:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 825,
														"name": "_values",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 576,
														"src": "10098:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$386_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"
														}
													},
													"id": 828,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10098:19:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10073:44:6"
											},
											{
												"assignments": [
													834
												],
												"declarations": [
													{
														"constant": false,
														"id": 834,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "10144:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 839,
														"src": "10127:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[]"
														},
														"typeName": {
															"baseType": {
																"id": 832,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10127:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 833,
															"nodeType": "ArrayTypeName",
															"src": "10127:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
																"typeString": "address[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 835,
												"nodeType": "VariableDeclarationStatement",
												"src": "10127:23:6"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "10213:39:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10227:15:6",
															"value": {
																"name": "store",
																"nodeType": "YulIdentifier",
																"src": "10237:5:6"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "10227:6:6"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "byzantium",
												"externalReferences": [
													{
														"declaration": 834,
														"isOffset": false,
														"isSlot": false,
														"src": "10227:6:6",
														"valueSize": 1
													},
													{
														"declaration": 824,
														"isOffset": false,
														"isSlot": false,
														"src": "10237:5:6",
														"valueSize": 1
													}
												],
												"id": 836,
												"nodeType": "InlineAssembly",
												"src": "10204:48:6"
											},
											{
												"expression": {
													"id": 837,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 834,
													"src": "10269:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
														"typeString": "address[] memory"
													}
												},
												"functionReturnParameters": 819,
												"id": 838,
												"nodeType": "Return",
												"src": "10262:13:6"
											}
										]
									},
									"documentation": {
										"id": 811,
										"nodeType": "StructuredDocumentation",
										"src": "9448:529:6",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 840,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "values",
									"nameLocation": "9991:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 815,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 814,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "10017:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 840,
												"src": "9998:22:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$687_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 813,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 812,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 687,
														"src": "9998:10:6"
													},
													"referencedDeclaration": 687,
													"src": "9998:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$687_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9997:24:6"
									},
									"returnParameters": {
										"id": 819,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 818,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 840,
												"src": "10045:16:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 816,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "10045:7:6",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 817,
													"nodeType": "ArrayTypeName",
													"src": "10045:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10044:18:6"
									},
									"scope": 974,
									"src": "9982:300:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"canonicalName": "EnumerableSet.UintSet",
									"id": 844,
									"members": [
										{
											"constant": false,
											"id": 843,
											"mutability": "mutable",
											"name": "_inner",
											"nameLocation": "10333:6:6",
											"nodeType": "VariableDeclaration",
											"scope": 844,
											"src": "10329:10:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
												"typeString": "struct EnumerableSet.Set"
											},
											"typeName": {
												"id": 842,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 841,
													"name": "Set",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 386,
													"src": "10329:3:6"
												},
												"referencedDeclaration": 386,
												"src": "10329:3:6",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$386_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "UintSet",
									"nameLocation": "10311:7:6",
									"nodeType": "StructDefinition",
									"scope": 974,
									"src": "10304:42:6",
									"visibility": "public"
								},
								{
									"body": {
										"id": 864,
										"nodeType": "Block",
										"src": "10589:56:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 856,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 848,
																"src": "10611:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$844_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 857,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 843,
															"src": "10611:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"id": 860,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 850,
																	"src": "10631:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 859,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10623:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 858,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "10623:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 861,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10623:14:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 855,
														"name": "_add",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 428,
														"src": "10606:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$386_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 862,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10606:32:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 854,
												"id": 863,
												"nodeType": "Return",
												"src": "10599:39:6"
											}
										]
									},
									"documentation": {
										"id": 845,
										"nodeType": "StructuredDocumentation",
										"src": "10352:159:6",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 865,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "10525:3:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 851,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 848,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "10545:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 865,
												"src": "10529:19:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$844_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 847,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 846,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 844,
														"src": "10529:7:6"
													},
													"referencedDeclaration": 844,
													"src": "10529:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$844_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 850,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10558:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 865,
												"src": "10550:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 849,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10550:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10528:36:6"
									},
									"returnParameters": {
										"id": 854,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 853,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 865,
												"src": "10583:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 852,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10583:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10582:6:6"
									},
									"scope": 974,
									"src": "10516:129:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 885,
										"nodeType": "Block",
										"src": "10889:59:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 877,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 869,
																"src": "10914:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$844_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 878,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 843,
															"src": "10914:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"id": 881,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 871,
																	"src": "10934:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 880,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10926:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 879,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "10926:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 882,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10926:14:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 876,
														"name": "_remove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 512,
														"src": "10906:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$386_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 883,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10906:35:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 875,
												"id": 884,
												"nodeType": "Return",
												"src": "10899:42:6"
											}
										]
									},
									"documentation": {
										"id": 866,
										"nodeType": "StructuredDocumentation",
										"src": "10651:157:6",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 886,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "remove",
									"nameLocation": "10822:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 872,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 869,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "10845:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 886,
												"src": "10829:19:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$844_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 868,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 867,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 844,
														"src": "10829:7:6"
													},
													"referencedDeclaration": 844,
													"src": "10829:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$844_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 871,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10858:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 886,
												"src": "10850:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 870,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10850:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10828:36:6"
									},
									"returnParameters": {
										"id": 875,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 874,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 886,
												"src": "10883:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 873,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10883:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10882:6:6"
									},
									"scope": 974,
									"src": "10813:135:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 906,
										"nodeType": "Block",
										"src": "11112:61:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 898,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 890,
																"src": "11139:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$844_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 899,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 843,
															"src": "11139:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"id": 902,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 892,
																	"src": "11159:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 901,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11151:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 900,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "11151:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 903,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11151:14:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 897,
														"name": "_contains",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 531,
														"src": "11129:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$386_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
														}
													},
													"id": 904,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11129:37:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 896,
												"id": 905,
												"nodeType": "Return",
												"src": "11122:44:6"
											}
										]
									},
									"documentation": {
										"id": 887,
										"nodeType": "StructuredDocumentation",
										"src": "10954:70:6",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 907,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "contains",
									"nameLocation": "11038:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 893,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 890,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "11063:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 907,
												"src": "11047:19:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$844_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 889,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 888,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 844,
														"src": "11047:7:6"
													},
													"referencedDeclaration": 844,
													"src": "11047:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$844_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 892,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11076:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 907,
												"src": "11068:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 891,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11068:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11046:36:6"
									},
									"returnParameters": {
										"id": 896,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 895,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 907,
												"src": "11106:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 894,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11106:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11105:6:6"
									},
									"scope": 974,
									"src": "11029:144:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 921,
										"nodeType": "Block",
										"src": "11323:43:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 917,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 911,
																"src": "11348:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$844_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 918,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 843,
															"src": "11348:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 916,
														"name": "_length",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 545,
														"src": "11340:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$386_storage_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (uint256)"
														}
													},
													"id": 919,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11340:19:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 915,
												"id": 920,
												"nodeType": "Return",
												"src": "11333:26:6"
											}
										]
									},
									"documentation": {
										"id": 908,
										"nodeType": "StructuredDocumentation",
										"src": "11179:70:6",
										"text": " @dev Returns the number of values on the set. O(1)."
									},
									"id": 922,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "length",
									"nameLocation": "11263:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 912,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 911,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "11286:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "11270:19:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$844_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 910,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 909,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 844,
														"src": "11270:7:6"
													},
													"referencedDeclaration": 844,
													"src": "11270:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$844_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11269:21:6"
									},
									"returnParameters": {
										"id": 915,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 914,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "11314:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 913,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11314:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11313:9:6"
									},
									"scope": 974,
									"src": "11254:112:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 942,
										"nodeType": "Block",
										"src": "11788:55:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 936,
																		"name": "set",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 926,
																		"src": "11817:3:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_UintSet_$844_storage_ptr",
																			"typeString": "struct EnumerableSet.UintSet storage pointer"
																		}
																	},
																	"id": 937,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "_inner",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 843,
																	"src": "11817:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Set_$386_storage",
																		"typeString": "struct EnumerableSet.Set storage ref"
																	}
																},
																{
																	"id": 938,
																	"name": "index",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 928,
																	"src": "11829:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_struct$_Set_$386_storage",
																		"typeString": "struct EnumerableSet.Set storage ref"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 935,
																"name": "_at",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 562,
																"src": "11813:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$386_storage_ptr_$_t_uint256_$returns$_t_bytes32_$",
																	"typeString": "function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"
																}
															},
															"id": 939,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11813:22:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 934,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "11805:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 933,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11805:7:6",
															"typeDescriptions": {}
														}
													},
													"id": 940,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11805:31:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 932,
												"id": 941,
												"nodeType": "Return",
												"src": "11798:38:6"
											}
										]
									},
									"documentation": {
										"id": 923,
										"nodeType": "StructuredDocumentation",
										"src": "11372:331:6",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 943,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "at",
									"nameLocation": "11717:2:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 929,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 926,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "11736:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 943,
												"src": "11720:19:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$844_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 925,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 924,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 844,
														"src": "11720:7:6"
													},
													"referencedDeclaration": 844,
													"src": "11720:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$844_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 928,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "11749:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 943,
												"src": "11741:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 927,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11741:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11719:36:6"
									},
									"returnParameters": {
										"id": 932,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 931,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 943,
												"src": "11779:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 930,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11779:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11778:9:6"
									},
									"scope": 974,
									"src": "11708:135:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 972,
										"nodeType": "Block",
										"src": "12461:219:6",
										"statements": [
											{
												"assignments": [
													957
												],
												"declarations": [
													{
														"constant": false,
														"id": 957,
														"mutability": "mutable",
														"name": "store",
														"nameLocation": "12488:5:6",
														"nodeType": "VariableDeclaration",
														"scope": 972,
														"src": "12471:22:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 955,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "12471:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 956,
															"nodeType": "ArrayTypeName",
															"src": "12471:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 962,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 959,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 947,
																"src": "12504:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$844_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 960,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 843,
															"src": "12504:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$386_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 958,
														"name": "_values",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 576,
														"src": "12496:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$386_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"
														}
													},
													"id": 961,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12496:19:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12471:44:6"
											},
											{
												"assignments": [
													967
												],
												"declarations": [
													{
														"constant": false,
														"id": 967,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "12542:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 972,
														"src": "12525:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
															"typeString": "uint256[]"
														},
														"typeName": {
															"baseType": {
																"id": 965,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "12525:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 966,
															"nodeType": "ArrayTypeName",
															"src": "12525:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																"typeString": "uint256[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 968,
												"nodeType": "VariableDeclarationStatement",
												"src": "12525:23:6"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "12611:39:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12625:15:6",
															"value": {
																"name": "store",
																"nodeType": "YulIdentifier",
																"src": "12635:5:6"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "12625:6:6"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "byzantium",
												"externalReferences": [
													{
														"declaration": 967,
														"isOffset": false,
														"isSlot": false,
														"src": "12625:6:6",
														"valueSize": 1
													},
													{
														"declaration": 957,
														"isOffset": false,
														"isSlot": false,
														"src": "12635:5:6",
														"valueSize": 1
													}
												],
												"id": 969,
												"nodeType": "InlineAssembly",
												"src": "12602:48:6"
											},
											{
												"expression": {
													"id": 970,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 967,
													"src": "12667:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
														"typeString": "uint256[] memory"
													}
												},
												"functionReturnParameters": 952,
												"id": 971,
												"nodeType": "Return",
												"src": "12660:13:6"
											}
										]
									},
									"documentation": {
										"id": 944,
										"nodeType": "StructuredDocumentation",
										"src": "11849:529:6",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 973,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "values",
									"nameLocation": "12392:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 948,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 947,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "12415:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 973,
												"src": "12399:19:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$844_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 946,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 945,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 844,
														"src": "12399:7:6"
													},
													"referencedDeclaration": 844,
													"src": "12399:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$844_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12398:21:6"
									},
									"returnParameters": {
										"id": 952,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 951,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 973,
												"src": "12443:16:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 949,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "12443:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 950,
													"nodeType": "ArrayTypeName",
													"src": "12443:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12442:18:6"
									},
									"scope": 974,
									"src": "12383:297:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 975,
							"src": "1228:11454:6",
							"usedErrors": []
						}
					],
					"src": "115:12568:6"
				},
				"id": 6
			},
			"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
					"exportedSymbols": {
						"IUniswapV3SwapCallback": [
							988
						]
					},
					"id": 989,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 976,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 977,
								"nodeType": "StructuredDocumentation",
								"src": "71:144:7",
								"text": "@title Callback for IUniswapV3PoolActions#swap\n @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface"
							},
							"fullyImplemented": false,
							"id": 988,
							"linearizedBaseContracts": [
								988
							],
							"name": "IUniswapV3SwapCallback",
							"nameLocation": "225:22:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 978,
										"nodeType": "StructuredDocumentation",
										"src": "254:898:7",
										"text": "@notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n @dev In the implementation you must pay the pool tokens owed for the swap.\n The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
									},
									"functionSelector": "fa461e33",
									"id": 987,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "uniswapV3SwapCallback",
									"nameLocation": "1166:21:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 985,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 980,
												"mutability": "mutable",
												"name": "amount0Delta",
												"nameLocation": "1204:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 987,
												"src": "1197:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 979,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1197:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 982,
												"mutability": "mutable",
												"name": "amount1Delta",
												"nameLocation": "1233:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 987,
												"src": "1226:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 981,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1226:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 984,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1270:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 987,
												"src": "1255:19:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 983,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1255:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1187:93:7"
									},
									"returnParameters": {
										"id": 986,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1289:0:7"
									},
									"scope": 988,
									"src": "1157:133:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 989,
							"src": "215:1077:7",
							"usedErrors": []
						}
					],
					"src": "45:1248:7"
				},
				"id": 7
			},
			"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol",
					"exportedSymbols": {
						"ISwapRouter": [
							1088
						],
						"IUniswapV3SwapCallback": [
							988
						]
					},
					"id": 1089,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 990,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:8"
						},
						{
							"id": 991,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "70:19:8"
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
							"file": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
							"id": 992,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1089,
							"sourceUnit": 989,
							"src": "91:83:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 994,
										"name": "IUniswapV3SwapCallback",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 988,
										"src": "305:22:8"
									},
									"id": 995,
									"nodeType": "InheritanceSpecifier",
									"src": "305:22:8"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 993,
								"nodeType": "StructuredDocumentation",
								"src": "176:104:8",
								"text": "@title Router token swapping functionality\n @notice Functions for swapping tokens via Uniswap V3"
							},
							"fullyImplemented": false,
							"id": 1088,
							"linearizedBaseContracts": [
								1088,
								988
							],
							"name": "ISwapRouter",
							"nameLocation": "290:11:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ISwapRouter.ExactInputSingleParams",
									"id": 1012,
									"members": [
										{
											"constant": false,
											"id": 997,
											"mutability": "mutable",
											"name": "tokenIn",
											"nameLocation": "382:7:8",
											"nodeType": "VariableDeclaration",
											"scope": 1012,
											"src": "374:15:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 996,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "374:7:8",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 999,
											"mutability": "mutable",
											"name": "tokenOut",
											"nameLocation": "407:8:8",
											"nodeType": "VariableDeclaration",
											"scope": 1012,
											"src": "399:16:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 998,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "399:7:8",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1001,
											"mutability": "mutable",
											"name": "fee",
											"nameLocation": "432:3:8",
											"nodeType": "VariableDeclaration",
											"scope": 1012,
											"src": "425:10:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 1000,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "425:6:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1003,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "453:9:8",
											"nodeType": "VariableDeclaration",
											"scope": 1012,
											"src": "445:17:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1002,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "445:7:8",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1005,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "480:8:8",
											"nodeType": "VariableDeclaration",
											"scope": 1012,
											"src": "472:16:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1004,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "472:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1007,
											"mutability": "mutable",
											"name": "amountIn",
											"nameLocation": "506:8:8",
											"nodeType": "VariableDeclaration",
											"scope": 1012,
											"src": "498:16:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1006,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "498:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1009,
											"mutability": "mutable",
											"name": "amountOutMinimum",
											"nameLocation": "532:16:8",
											"nodeType": "VariableDeclaration",
											"scope": 1012,
											"src": "524:24:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1008,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "524:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1011,
											"mutability": "mutable",
											"name": "sqrtPriceLimitX96",
											"nameLocation": "566:17:8",
											"nodeType": "VariableDeclaration",
											"scope": 1012,
											"src": "558:25:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 1010,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "558:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactInputSingleParams",
									"nameLocation": "341:22:8",
									"nodeType": "StructDefinition",
									"scope": 1088,
									"src": "334:256:8",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1013,
										"nodeType": "StructuredDocumentation",
										"src": "596:250:8",
										"text": "@notice Swaps `amountIn` of one token for as much as possible of another token\n @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n @return amountOut The amount of the received token"
									},
									"functionSelector": "414bf389",
									"id": 1021,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactInputSingle",
									"nameLocation": "860:16:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1017,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1016,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "909:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1021,
												"src": "877:38:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactInputSingleParams_$1012_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactInputSingleParams"
												},
												"typeName": {
													"id": 1015,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1014,
														"name": "ExactInputSingleParams",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1012,
														"src": "877:22:8"
													},
													"referencedDeclaration": 1012,
													"src": "877:22:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactInputSingleParams_$1012_storage_ptr",
														"typeString": "struct ISwapRouter.ExactInputSingleParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "876:40:8"
									},
									"returnParameters": {
										"id": 1020,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1019,
												"mutability": "mutable",
												"name": "amountOut",
												"nameLocation": "951:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 1021,
												"src": "943:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1018,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "943:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "942:19:8"
									},
									"scope": 1088,
									"src": "851:111:8",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISwapRouter.ExactInputParams",
									"id": 1032,
									"members": [
										{
											"constant": false,
											"id": 1023,
											"mutability": "mutable",
											"name": "path",
											"nameLocation": "1008:4:8",
											"nodeType": "VariableDeclaration",
											"scope": 1032,
											"src": "1002:10:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 1022,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "1002:5:8",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1025,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "1030:9:8",
											"nodeType": "VariableDeclaration",
											"scope": 1032,
											"src": "1022:17:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1024,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1022:7:8",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1027,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "1057:8:8",
											"nodeType": "VariableDeclaration",
											"scope": 1032,
											"src": "1049:16:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1026,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1049:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1029,
											"mutability": "mutable",
											"name": "amountIn",
											"nameLocation": "1083:8:8",
											"nodeType": "VariableDeclaration",
											"scope": 1032,
											"src": "1075:16:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1028,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1075:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1031,
											"mutability": "mutable",
											"name": "amountOutMinimum",
											"nameLocation": "1109:16:8",
											"nodeType": "VariableDeclaration",
											"scope": 1032,
											"src": "1101:24:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1030,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1101:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactInputParams",
									"nameLocation": "975:16:8",
									"nodeType": "StructDefinition",
									"scope": 1088,
									"src": "968:164:8",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1033,
										"nodeType": "StructuredDocumentation",
										"src": "1138:273:8",
										"text": "@notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n @return amountOut The amount of the received token"
									},
									"functionSelector": "c04b8d59",
									"id": 1041,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactInput",
									"nameLocation": "1425:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1037,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1036,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "1462:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1041,
												"src": "1436:32:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactInputParams_$1032_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactInputParams"
												},
												"typeName": {
													"id": 1035,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1034,
														"name": "ExactInputParams",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1032,
														"src": "1436:16:8"
													},
													"referencedDeclaration": 1032,
													"src": "1436:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactInputParams_$1032_storage_ptr",
														"typeString": "struct ISwapRouter.ExactInputParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1435:34:8"
									},
									"returnParameters": {
										"id": 1040,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1039,
												"mutability": "mutable",
												"name": "amountOut",
												"nameLocation": "1504:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 1041,
												"src": "1496:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1038,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1496:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1495:19:8"
									},
									"scope": 1088,
									"src": "1416:99:8",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISwapRouter.ExactOutputSingleParams",
									"id": 1058,
									"members": [
										{
											"constant": false,
											"id": 1043,
											"mutability": "mutable",
											"name": "tokenIn",
											"nameLocation": "1570:7:8",
											"nodeType": "VariableDeclaration",
											"scope": 1058,
											"src": "1562:15:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1042,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1562:7:8",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1045,
											"mutability": "mutable",
											"name": "tokenOut",
											"nameLocation": "1595:8:8",
											"nodeType": "VariableDeclaration",
											"scope": 1058,
											"src": "1587:16:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1044,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1587:7:8",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1047,
											"mutability": "mutable",
											"name": "fee",
											"nameLocation": "1620:3:8",
											"nodeType": "VariableDeclaration",
											"scope": 1058,
											"src": "1613:10:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 1046,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "1613:6:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1049,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "1641:9:8",
											"nodeType": "VariableDeclaration",
											"scope": 1058,
											"src": "1633:17:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1048,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1633:7:8",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1051,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "1668:8:8",
											"nodeType": "VariableDeclaration",
											"scope": 1058,
											"src": "1660:16:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1050,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1660:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1053,
											"mutability": "mutable",
											"name": "amountOut",
											"nameLocation": "1694:9:8",
											"nodeType": "VariableDeclaration",
											"scope": 1058,
											"src": "1686:17:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1052,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1686:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1055,
											"mutability": "mutable",
											"name": "amountInMaximum",
											"nameLocation": "1721:15:8",
											"nodeType": "VariableDeclaration",
											"scope": 1058,
											"src": "1713:23:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1054,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1713:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1057,
											"mutability": "mutable",
											"name": "sqrtPriceLimitX96",
											"nameLocation": "1754:17:8",
											"nodeType": "VariableDeclaration",
											"scope": 1058,
											"src": "1746:25:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 1056,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "1746:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactOutputSingleParams",
									"nameLocation": "1528:23:8",
									"nodeType": "StructDefinition",
									"scope": 1088,
									"src": "1521:257:8",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1059,
										"nodeType": "StructuredDocumentation",
										"src": "1784:250:8",
										"text": "@notice Swaps as little as possible of one token for `amountOut` of another token\n @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n @return amountIn The amount of the input token"
									},
									"functionSelector": "db3e2198",
									"id": 1067,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactOutputSingle",
									"nameLocation": "2048:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1063,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1062,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "2099:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1067,
												"src": "2066:39:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1058_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactOutputSingleParams"
												},
												"typeName": {
													"id": 1061,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1060,
														"name": "ExactOutputSingleParams",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1058,
														"src": "2066:23:8"
													},
													"referencedDeclaration": 1058,
													"src": "2066:23:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1058_storage_ptr",
														"typeString": "struct ISwapRouter.ExactOutputSingleParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2065:41:8"
									},
									"returnParameters": {
										"id": 1066,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1065,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "2141:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1067,
												"src": "2133:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1064,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2133:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2132:18:8"
									},
									"scope": 1088,
									"src": "2039:112:8",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISwapRouter.ExactOutputParams",
									"id": 1078,
									"members": [
										{
											"constant": false,
											"id": 1069,
											"mutability": "mutable",
											"name": "path",
											"nameLocation": "2198:4:8",
											"nodeType": "VariableDeclaration",
											"scope": 1078,
											"src": "2192:10:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 1068,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "2192:5:8",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1071,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "2220:9:8",
											"nodeType": "VariableDeclaration",
											"scope": 1078,
											"src": "2212:17:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1070,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2212:7:8",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1073,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "2247:8:8",
											"nodeType": "VariableDeclaration",
											"scope": 1078,
											"src": "2239:16:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1072,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2239:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1075,
											"mutability": "mutable",
											"name": "amountOut",
											"nameLocation": "2273:9:8",
											"nodeType": "VariableDeclaration",
											"scope": 1078,
											"src": "2265:17:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1074,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2265:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1077,
											"mutability": "mutable",
											"name": "amountInMaximum",
											"nameLocation": "2300:15:8",
											"nodeType": "VariableDeclaration",
											"scope": 1078,
											"src": "2292:23:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1076,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2292:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactOutputParams",
									"nameLocation": "2164:17:8",
									"nodeType": "StructDefinition",
									"scope": 1088,
									"src": "2157:165:8",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1079,
										"nodeType": "StructuredDocumentation",
										"src": "2328:284:8",
										"text": "@notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n @return amountIn The amount of the input token"
									},
									"functionSelector": "f28c0498",
									"id": 1087,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactOutput",
									"nameLocation": "2626:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1083,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1082,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "2665:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1087,
												"src": "2638:33:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactOutputParams_$1078_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactOutputParams"
												},
												"typeName": {
													"id": 1081,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1080,
														"name": "ExactOutputParams",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1078,
														"src": "2638:17:8"
													},
													"referencedDeclaration": 1078,
													"src": "2638:17:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactOutputParams_$1078_storage_ptr",
														"typeString": "struct ISwapRouter.ExactOutputParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2637:35:8"
									},
									"returnParameters": {
										"id": 1086,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1085,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "2707:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1087,
												"src": "2699:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1084,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2698:18:8"
									},
									"scope": 1088,
									"src": "2617:100:8",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1089,
							"src": "280:2439:8",
							"usedErrors": []
						}
					],
					"src": "45:2675:8"
				},
				"id": 8
			},
			"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol",
					"exportedSymbols": {
						"IERC20": [
							353
						],
						"TransferHelper": [
							1259
						]
					},
					"id": 1260,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1090,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 1091,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1260,
							"sourceUnit": 354,
							"src": "71:56:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 1259,
							"linearizedBaseContracts": [
								1259
							],
							"name": "TransferHelper",
							"nameLocation": "137:14:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1139,
										"nodeType": "Block",
										"src": "690:229:9",
										"statements": [
											{
												"assignments": [
													1104,
													1106
												],
												"declarations": [
													{
														"constant": false,
														"id": 1104,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "706:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 1139,
														"src": "701:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1103,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "701:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1106,
														"mutability": "mutable",
														"name": "data",
														"nameLocation": "728:4:9",
														"nodeType": "VariableDeclaration",
														"scope": 1139,
														"src": "715:17:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1105,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "715:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1119,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1111,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 353,
																			"src": "782:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$353_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1112,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 352,
																		"src": "782:19:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function IERC20.transferFrom(address,address,uint256) returns (bool)"
																		}
																	},
																	"id": 1113,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "782:28:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1114,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1096,
																	"src": "812:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1115,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1098,
																	"src": "818:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1116,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1100,
																	"src": "822:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1109,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "759:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1110,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "759:22:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1117,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "759:69:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1107,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1094,
															"src": "748:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1108,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "748:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "748:81:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "700:129:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1135,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1121,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1104,
																"src": "847:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 1133,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1125,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1122,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1106,
																					"src": "859:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 1123,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "859:11:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 1124,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "874:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "859:16:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 1128,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1106,
																					"src": "890:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 1130,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "897:4:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 1129,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "897:4:9",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 1131,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "896:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 1126,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "879:3:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 1127,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "879:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 1132,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "879:24:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "859:44:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 1134,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "858:46:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "847:57:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "535446",
															"id": 1136,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "906:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a1c4b1d67db284650e7cfb49cb11ce76848206ad466478425bd3418f8bbb9a86",
																"typeString": "literal_string \"STF\""
															},
															"value": "STF"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a1c4b1d67db284650e7cfb49cb11ce76848206ad466478425bd3418f8bbb9a86",
																"typeString": "literal_string \"STF\""
															}
														],
														"id": 1120,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "839:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1137,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "839:73:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1138,
												"nodeType": "ExpressionStatement",
												"src": "839:73:9"
											}
										]
									},
									"documentation": {
										"id": 1092,
										"nodeType": "StructuredDocumentation",
										"src": "158:398:9",
										"text": "@notice Transfers tokens from the targeted address to the given destination\n @notice Errors with 'STF' if transfer fails\n @param token The contract address of the token to be transferred\n @param from The originating address from which the tokens will be transferred\n @param to The destination address of the transfer\n @param value The amount to be transferred"
									},
									"id": 1140,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "570:16:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1094,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "604:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1140,
												"src": "596:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1093,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "596:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1096,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "627:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1140,
												"src": "619:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1095,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "619:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1098,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "649:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1140,
												"src": "641:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1097,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "641:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1100,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "669:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1140,
												"src": "661:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1099,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "661:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "586:94:9"
									},
									"returnParameters": {
										"id": 1102,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "690:0:9"
									},
									"scope": 1259,
									"src": "561:358:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1185,
										"nodeType": "Block",
										"src": "1314:206:9",
										"statements": [
											{
												"assignments": [
													1151,
													1153
												],
												"declarations": [
													{
														"constant": false,
														"id": 1151,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "1330:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 1185,
														"src": "1325:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1150,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1325:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1153,
														"mutability": "mutable",
														"name": "data",
														"nameLocation": "1352:4:9",
														"nodeType": "VariableDeclaration",
														"scope": 1185,
														"src": "1339:17:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1152,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1339:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1165,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1158,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 353,
																			"src": "1394:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$353_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1159,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 320,
																		"src": "1394:15:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function IERC20.transfer(address,uint256) returns (bool)"
																		}
																	},
																	"id": 1160,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1394:24:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1161,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1145,
																	"src": "1420:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1162,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1147,
																	"src": "1424:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1156,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1371:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1157,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1371:22:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1163,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1371:59:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1154,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1143,
															"src": "1360:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1155,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "1360:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1164,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1360:71:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1324:107:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1181,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1167,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1151,
																"src": "1449:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 1179,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1171,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1168,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1153,
																					"src": "1461:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 1169,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "1461:11:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 1170,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1476:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "1461:16:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 1174,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1153,
																					"src": "1492:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 1176,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "1499:4:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 1175,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "1499:4:9",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 1177,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "1498:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 1172,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "1481:3:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 1173,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "1481:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 1178,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1481:24:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "1461:44:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 1180,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1460:46:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1449:57:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5354",
															"id": 1182,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1508:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8e992d6a09e3feb7936717fa482f3a7086f18407e19b697f3153d17fd25870ca",
																"typeString": "literal_string \"ST\""
															},
															"value": "ST"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8e992d6a09e3feb7936717fa482f3a7086f18407e19b697f3153d17fd25870ca",
																"typeString": "literal_string \"ST\""
															}
														],
														"id": 1166,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1441:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1183,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1441:72:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1184,
												"nodeType": "ExpressionStatement",
												"src": "1441:72:9"
											}
										]
									},
									"documentation": {
										"id": 1141,
										"nodeType": "StructuredDocumentation",
										"src": "925:281:9",
										"text": "@notice Transfers tokens from msg.sender to a recipient\n @dev Errors with ST if transfer fails\n @param token The contract address of the token which will be transferred\n @param to The recipient of the transfer\n @param value The value of the transfer"
									},
									"id": 1186,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "1220:12:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1148,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1143,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1250:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1186,
												"src": "1242:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1142,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1242:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1145,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1273:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1186,
												"src": "1265:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1144,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1265:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1147,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1293:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1186,
												"src": "1285:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1146,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1285:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1232:72:9"
									},
									"returnParameters": {
										"id": 1149,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1314:0:9"
									},
									"scope": 1259,
									"src": "1211:309:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1231,
										"nodeType": "Block",
										"src": "1975:205:9",
										"statements": [
											{
												"assignments": [
													1197,
													1199
												],
												"declarations": [
													{
														"constant": false,
														"id": 1197,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "1991:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 1231,
														"src": "1986:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1196,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1986:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1199,
														"mutability": "mutable",
														"name": "data",
														"nameLocation": "2013:4:9",
														"nodeType": "VariableDeclaration",
														"scope": 1231,
														"src": "2000:17:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1198,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2000:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1211,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1204,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 353,
																			"src": "2055:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$353_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1205,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 340,
																		"src": "2055:14:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function IERC20.approve(address,uint256) returns (bool)"
																		}
																	},
																	"id": 1206,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2055:23:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1207,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1191,
																	"src": "2080:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1208,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1193,
																	"src": "2084:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1202,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2032:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1203,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2032:22:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1209,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2032:58:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1200,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1189,
															"src": "2021:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1201,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "2021:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1210,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2021:70:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1985:106:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1227,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1213,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1197,
																"src": "2109:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 1225,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1217,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1214,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1199,
																					"src": "2121:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 1215,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "2121:11:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 1216,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2136:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "2121:16:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 1220,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1199,
																					"src": "2152:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 1222,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "2159:4:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 1221,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "2159:4:9",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 1223,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "2158:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 1218,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "2141:3:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 1219,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "2141:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 1224,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2141:24:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "2121:44:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 1226,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2120:46:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "2109:57:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5341",
															"id": 1228,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2168:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0c382912095e7706ed01a66755a50c713445aceaf5a9168954498b03dd381faa",
																"typeString": "literal_string \"SA\""
															},
															"value": "SA"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0c382912095e7706ed01a66755a50c713445aceaf5a9168954498b03dd381faa",
																"typeString": "literal_string \"SA\""
															}
														],
														"id": 1212,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2101:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1229,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2101:72:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1230,
												"nodeType": "ExpressionStatement",
												"src": "2101:72:9"
											}
										]
									},
									"documentation": {
										"id": 1187,
										"nodeType": "StructuredDocumentation",
										"src": "1526:342:9",
										"text": "@notice Approves the stipulated contract to spend the given allowance in the given token\n @dev Errors with 'SA' if transfer fails\n @param token The contract address of the token to be approved\n @param to The target of the approval\n @param value The amount of the given token the target will be allowed to spend"
									},
									"id": 1232,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1882:11:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1189,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1911:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1232,
												"src": "1903:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1188,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1903:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1191,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1934:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1232,
												"src": "1926:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1190,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1926:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1193,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1954:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1232,
												"src": "1946:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1192,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1946:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1893:72:9"
									},
									"returnParameters": {
										"id": 1195,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1975:0:9"
									},
									"scope": 1259,
									"src": "1873:307:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1257,
										"nodeType": "Block",
										"src": "2431:104:9",
										"statements": [
											{
												"assignments": [
													1241,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1241,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2447:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 1257,
														"src": "2442:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1240,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2442:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1251,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1248,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2492:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1247,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "2482:9:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (bytes memory)"
																},
																"typeName": {
																	"id": 1246,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "2486:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_storage_ptr",
																		"typeString": "bytes"
																	}
																}
															},
															"id": 1249,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2482:12:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 1242,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1235,
																"src": "2460:2:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1243,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2460:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1245,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1244,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1237,
																"src": "2475:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2460:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1250,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2460:35:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2441:54:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1253,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1241,
															"src": "2513:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "535445",
															"id": 1254,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2522:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_48541fce89df928ec30caa1aed6c0cd94b8e2ef76b3c68b10b9a184ceadb93d4",
																"typeString": "literal_string \"STE\""
															},
															"value": "STE"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_48541fce89df928ec30caa1aed6c0cd94b8e2ef76b3c68b10b9a184ceadb93d4",
																"typeString": "literal_string \"STE\""
															}
														],
														"id": 1252,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2505:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2505:23:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1256,
												"nodeType": "ExpressionStatement",
												"src": "2505:23:9"
											}
										]
									},
									"documentation": {
										"id": 1233,
										"nodeType": "StructuredDocumentation",
										"src": "2186:179:9",
										"text": "@notice Transfers ETH to the recipient address\n @dev Fails with `STE`\n @param to The destination of the transfer\n @param value The value to be transferred"
									},
									"id": 1258,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferETH",
									"nameLocation": "2379:15:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1235,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2403:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1258,
												"src": "2395:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1234,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2395:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1237,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2415:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1258,
												"src": "2407:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1236,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2407:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2394:27:9"
									},
									"returnParameters": {
										"id": 1239,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2431:0:9"
									},
									"scope": 1259,
									"src": "2370:165:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1260,
							"src": "129:2408:9",
							"usedErrors": []
						}
					],
					"src": "45:2493:9"
				},
				"id": 9
			},
			"contracts/fountain.sol": {
				"ast": {
					"absolutePath": "contracts/fountain.sol",
					"exportedSymbols": {
						"Context": [
							375
						],
						"EnumerableSet": [
							974
						],
						"IERC20": [
							353
						],
						"ISwapRouter": [
							1088
						],
						"IUniswapV3SwapCallback": [
							988
						],
						"IWETH": [
							14
						],
						"Ownable": [
							127
						],
						"Pausable": [
							235
						],
						"ReentrancyGuard": [
							275
						],
						"Serenity": [
							1572
						],
						"TransferHelper": [
							1259
						]
					},
					"id": 1573,
					"license": "Proprietary",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1261,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "41:31:10"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 1262,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1573,
							"sourceUnit": 128,
							"src": "74:52:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/Pausable.sol",
							"file": "@openzeppelin/contracts/security/Pausable.sol",
							"id": 1263,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1573,
							"sourceUnit": 236,
							"src": "127:55:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 1264,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1573,
							"sourceUnit": 276,
							"src": "183:62:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol",
							"file": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol",
							"id": 1265,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1573,
							"sourceUnit": 975,
							"src": "246:65:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 1266,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1573,
							"sourceUnit": 354,
							"src": "312:56:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol",
							"file": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol",
							"id": 1267,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1573,
							"sourceUnit": 1089,
							"src": "369:68:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol",
							"file": "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol",
							"id": 1268,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1573,
							"sourceUnit": 1260,
							"src": "438:70:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@1inch/solidity-utils/contracts/interfaces/IWETH.sol",
							"file": "@1inch/solidity-utils/contracts/interfaces/IWETH.sol",
							"id": 1269,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1573,
							"sourceUnit": 15,
							"src": "509:62:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1270,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 127,
										"src": "594:7:10"
									},
									"id": 1271,
									"nodeType": "InheritanceSpecifier",
									"src": "594:7:10"
								},
								{
									"baseName": {
										"id": 1272,
										"name": "Pausable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 235,
										"src": "603:8:10"
									},
									"id": 1273,
									"nodeType": "InheritanceSpecifier",
									"src": "603:8:10"
								},
								{
									"baseName": {
										"id": 1274,
										"name": "ReentrancyGuard",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 275,
										"src": "613:15:10"
									},
									"id": 1275,
									"nodeType": "InheritanceSpecifier",
									"src": "613:15:10"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1572,
							"linearizedBaseContracts": [
								1572,
								275,
								235,
								127,
								375
							],
							"name": "Serenity",
							"nameLocation": "582:8:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1279,
									"libraryName": {
										"id": 1276,
										"name": "EnumerableSet",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 974,
										"src": "641:13:10"
									},
									"nodeType": "UsingForDirective",
									"src": "635:49:10",
									"typeName": {
										"id": 1278,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1277,
											"name": "EnumerableSet.AddressSet",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 687,
											"src": "659:24:10"
										},
										"referencedDeclaration": 687,
										"src": "659:24:10",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_AddressSet_$687_storage_ptr",
											"typeString": "struct EnumerableSet.AddressSet"
										}
									}
								},
								{
									"constant": true,
									"functionSelector": "4aa4a4fc",
									"id": 1282,
									"mutability": "constant",
									"name": "WETH9",
									"nameLocation": "714:5:10",
									"nodeType": "VariableDeclaration",
									"scope": 1572,
									"src": "690:74:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1280,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "690:7:10",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307843303261614133396232323346453844304130653543344632376541443930383343373536436332",
										"id": 1281,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "722:42:10",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "89a30271",
									"id": 1285,
									"mutability": "constant",
									"name": "USDC",
									"nameLocation": "794:4:10",
									"nodeType": "VariableDeclaration",
									"scope": 1572,
									"src": "770:73:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1283,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "770:7:10",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307841306238363939316336323138623336633164313944346132653945623063453336303665423438",
										"id": 1284,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "801:42:10",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "c31c9c07",
									"id": 1288,
									"mutability": "immutable",
									"name": "swapRouter",
									"nameLocation": "879:10:10",
									"nodeType": "VariableDeclaration",
									"scope": 1572,
									"src": "850:39:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_ISwapRouter_$1088",
										"typeString": "contract ISwapRouter"
									},
									"typeName": {
										"id": 1287,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1286,
											"name": "ISwapRouter",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1088,
											"src": "850:11:10"
										},
										"referencedDeclaration": 1088,
										"src": "850:11:10",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ISwapRouter_$1088",
											"typeString": "contract ISwapRouter"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 1290,
									"mutability": "mutable",
									"name": "ephemeralGasMoneyAmount",
									"nameLocation": "903:23:10",
									"nodeType": "VariableDeclaration",
									"scope": 1572,
									"src": "895:31:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1289,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "895:7:10",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1294,
									"mutability": "mutable",
									"name": "balances",
									"nameLocation": "974:8:10",
									"nodeType": "VariableDeclaration",
									"scope": 1572,
									"src": "937:45:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1293,
										"keyType": {
											"id": 1291,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "946:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "937:28:10",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 1292,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "957:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1298,
									"mutability": "mutable",
									"name": "charities",
									"nameLocation": "1023:9:10",
									"nodeType": "VariableDeclaration",
									"scope": 1572,
									"src": "988:44:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint8_$_t_address_$",
										"typeString": "mapping(uint8 => address)"
									},
									"typeName": {
										"id": 1297,
										"keyType": {
											"id": 1295,
											"name": "uint8",
											"nodeType": "ElementaryTypeName",
											"src": "997:5:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"nodeType": "Mapping",
										"src": "988:26:10",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint8_$_t_address_$",
											"typeString": "mapping(uint8 => address)"
										},
										"valueType": {
											"id": 1296,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1006:7:10",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1314,
										"nodeType": "Block",
										"src": "1110:101:10",
										"statements": [
											{
												"expression": {
													"id": 1308,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1306,
														"name": "swapRouter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1288,
														"src": "1120:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ISwapRouter_$1088",
															"typeString": "contract ISwapRouter"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1307,
														"name": "_swapRouter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1301,
														"src": "1133:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ISwapRouter_$1088",
															"typeString": "contract ISwapRouter"
														}
													},
													"src": "1120:24:10",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISwapRouter_$1088",
														"typeString": "contract ISwapRouter"
													}
												},
												"id": 1309,
												"nodeType": "ExpressionStatement",
												"src": "1120:24:10"
											},
											{
												"expression": {
													"id": 1312,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1310,
														"name": "ephemeralGasMoneyAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1290,
														"src": "1154:23:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1311,
														"name": "_ephemeralGasMoneyAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1303,
														"src": "1180:24:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1154:50:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1313,
												"nodeType": "ExpressionStatement",
												"src": "1154:50:10"
											}
										]
									},
									"id": 1315,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1301,
												"mutability": "mutable",
												"name": "_swapRouter",
												"nameLocation": "1063:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1315,
												"src": "1051:23:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISwapRouter_$1088",
													"typeString": "contract ISwapRouter"
												},
												"typeName": {
													"id": 1300,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1299,
														"name": "ISwapRouter",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1088,
														"src": "1051:11:10"
													},
													"referencedDeclaration": 1088,
													"src": "1051:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISwapRouter_$1088",
														"typeString": "contract ISwapRouter"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1303,
												"mutability": "mutable",
												"name": "_ephemeralGasMoneyAmount",
												"nameLocation": "1084:24:10",
												"nodeType": "VariableDeclaration",
												"scope": 1315,
												"src": "1076:32:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1302,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1076:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1050:59:10"
									},
									"returnParameters": {
										"id": 1305,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1110:0:10"
									},
									"scope": 1572,
									"src": "1039:172:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1452,
										"nodeType": "Block",
										"src": "1663:2719:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1341,
															"name": "tokenIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1319,
															"src": "1774:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1342,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1783:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1343,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1783:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1346,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1803:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Serenity_$1572",
																		"typeString": "contract Serenity"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Serenity_$1572",
																		"typeString": "contract Serenity"
																	}
																],
																"id": 1345,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1795:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1344,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1795:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1347,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1795:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1348,
															"name": "totalAmountIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1321,
															"src": "1810:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1338,
															"name": "TransferHelper",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1259,
															"src": "1742:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TransferHelper_$1259_$",
																"typeString": "type(library TransferHelper)"
															}
														},
														"id": 1340,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1140,
														"src": "1742:31:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,address,uint256)"
														}
													},
													"id": 1349,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1742:82:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1350,
												"nodeType": "ExpressionStatement",
												"src": "1742:82:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1354,
															"name": "tokenIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1319,
															"src": "1938:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1357,
																	"name": "swapRouter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1288,
																	"src": "1955:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ISwapRouter_$1088",
																		"typeString": "contract ISwapRouter"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ISwapRouter_$1088",
																		"typeString": "contract ISwapRouter"
																	}
																],
																"id": 1356,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1947:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1355,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1947:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1358,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1947:19:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1359,
															"name": "totalAmountIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1321,
															"src": "1968:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1351,
															"name": "TransferHelper",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1259,
															"src": "1911:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TransferHelper_$1259_$",
																"typeString": "type(library TransferHelper)"
															}
														},
														"id": 1353,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeApprove",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1232,
														"src": "1911:26:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1360,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1911:71:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1361,
												"nodeType": "ExpressionStatement",
												"src": "1911:71:10"
											},
											{
												"assignments": [
													1366
												],
												"declarations": [
													{
														"constant": false,
														"id": 1366,
														"mutability": "mutable",
														"name": "ethSwapParams",
														"nameLocation": "2108:13:10",
														"nodeType": "VariableDeclaration",
														"scope": 1452,
														"src": "2065:56:10",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1058_memory_ptr",
															"typeString": "struct ISwapRouter.ExactOutputSingleParams"
														},
														"typeName": {
															"id": 1365,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1364,
																"name": "ISwapRouter.ExactOutputSingleParams",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1058,
																"src": "2065:35:10"
															},
															"referencedDeclaration": 1058,
															"src": "2065:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1058_storage_ptr",
																"typeString": "struct ISwapRouter.ExactOutputSingleParams"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1381,
												"initialValue": {
													"arguments": [
														{
															"id": 1369,
															"name": "tokenIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1319,
															"src": "2199:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1370,
															"name": "WETH9",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1282,
															"src": "2234:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1371,
															"name": "ethSwapPoolFee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1327,
															"src": "2262:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														},
														{
															"arguments": [
																{
																	"id": 1374,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2313:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Serenity_$1572",
																		"typeString": "contract Serenity"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Serenity_$1572",
																		"typeString": "contract Serenity"
																	}
																],
																"id": 1373,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2305:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1372,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2305:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1375,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2305:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1376,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1323,
															"src": "2346:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1377,
															"name": "ephemeralGasMoneyAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1290,
															"src": "2383:23:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1378,
															"name": "ethSwapAmountInMax",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1325,
															"src": "2441:18:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "30",
															"id": 1379,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2745:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"expression": {
															"id": 1367,
															"name": "ISwapRouter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1088,
															"src": "2136:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ISwapRouter_$1088_$",
																"typeString": "type(contract ISwapRouter)"
															}
														},
														"id": 1368,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "ExactOutputSingleParams",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1058,
														"src": "2136:35:10",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_ExactOutputSingleParams_$1058_storage_ptr_$",
															"typeString": "type(struct ISwapRouter.ExactOutputSingleParams storage pointer)"
														}
													},
													"id": 1380,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [
														"tokenIn",
														"tokenOut",
														"fee",
														"recipient",
														"deadline",
														"amountOut",
														"amountInMaximum",
														"sqrtPriceLimitX96"
													],
													"nodeType": "FunctionCall",
													"src": "2136:625:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1058_memory_ptr",
														"typeString": "struct ISwapRouter.ExactOutputSingleParams memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2065:696:10"
											},
											{
												"assignments": [
													1383
												],
												"declarations": [
													{
														"constant": false,
														"id": 1383,
														"mutability": "mutable",
														"name": "tokenAmountSpentOnEthSwap",
														"nameLocation": "2892:25:10",
														"nodeType": "VariableDeclaration",
														"scope": 1452,
														"src": "2884:33:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1382,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2884:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1388,
												"initialValue": {
													"arguments": [
														{
															"id": 1386,
															"name": "ethSwapParams",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1366,
															"src": "2949:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1058_memory_ptr",
																"typeString": "struct ISwapRouter.ExactOutputSingleParams memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1058_memory_ptr",
																"typeString": "struct ISwapRouter.ExactOutputSingleParams memory"
															}
														],
														"expression": {
															"id": 1384,
															"name": "swapRouter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1288,
															"src": "2920:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ISwapRouter_$1088",
																"typeString": "contract ISwapRouter"
															}
														},
														"id": 1385,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "exactOutputSingle",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1067,
														"src": "2920:28:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_payable$_t_struct$_ExactOutputSingleParams_$1058_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct ISwapRouter.ExactOutputSingleParams memory) payable external returns (uint256)"
														}
													},
													"id": 1387,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2920:43:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2884:79:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1393,
															"name": "ephemeralGasMoneyAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1290,
															"src": "3020:23:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1390,
																	"name": "WETH9",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1282,
																	"src": "3004:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1389,
																"name": "IWETH",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 14,
																"src": "2998:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IWETH_$14_$",
																	"typeString": "type(contract IWETH)"
																}
															},
															"id": 1391,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2998:12:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IWETH_$14",
																"typeString": "contract IWETH"
															}
														},
														"id": 1392,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "withdraw",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 13,
														"src": "2998:21:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256) external"
														}
													},
													"id": 1394,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2998:46:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1395,
												"nodeType": "ExpressionStatement",
												"src": "2998:46:10"
											},
											{
												"assignments": [
													1397,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1397,
														"mutability": "mutable",
														"name": "ephemeralGasSent",
														"nameLocation": "3124:16:10",
														"nodeType": "VariableDeclaration",
														"scope": 1452,
														"src": "3119:21:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1396,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3119:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1407,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 1405,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3215:2:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"arguments": [
																	{
																		"id": 1400,
																		"name": "ephemeralWalletAddress",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1317,
																		"src": "3154:22:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1399,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3146:8:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_payable_$",
																		"typeString": "type(address payable)"
																	},
																	"typeName": {
																		"id": 1398,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "3146:8:10",
																		"stateMutability": "payable",
																		"typeDescriptions": {}
																	}
																},
																"id": 1401,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3146:31:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 1402,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "3146:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1404,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1403,
																"name": "ephemeralGasMoneyAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1290,
																"src": "3190:23:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "3146:68:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1406,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3146:72:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3118:100:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1409,
															"name": "ephemeralGasSent",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1397,
															"src": "3236:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4661696c656420746f2073656e642067617320746f20657068656d6572616c2077616c6c65742e",
															"id": 1410,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3254:41:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_57af08fa0c45ce53db4fdccca5ce513144095272b76520aa6b6712a0c1a0a725",
																"typeString": "literal_string \"Failed to send gas to ephemeral wallet.\""
															},
															"value": "Failed to send gas to ephemeral wallet."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_57af08fa0c45ce53db4fdccca5ce513144095272b76520aa6b6712a0c1a0a725",
																"typeString": "literal_string \"Failed to send gas to ephemeral wallet.\""
															}
														],
														"id": 1408,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3228:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1411,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3228:68:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1412,
												"nodeType": "ExpressionStatement",
												"src": "3228:68:10"
											},
											{
												"assignments": [
													1414
												],
												"declarations": [
													{
														"constant": false,
														"id": 1414,
														"mutability": "mutable",
														"name": "remainingAmountIn",
														"nameLocation": "3379:17:10",
														"nodeType": "VariableDeclaration",
														"scope": 1452,
														"src": "3371:25:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1413,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3371:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1418,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1417,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1415,
														"name": "totalAmountIn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1321,
														"src": "3399:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 1416,
														"name": "tokenAmountSpentOnEthSwap",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1383,
														"src": "3415:25:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3399:41:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3371:69:10"
											},
											{
												"assignments": [
													1423
												],
												"declarations": [
													{
														"constant": false,
														"id": 1423,
														"mutability": "mutable",
														"name": "params",
														"nameLocation": "3566:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 1452,
														"src": "3524:48:10",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ExactInputSingleParams_$1012_memory_ptr",
															"typeString": "struct ISwapRouter.ExactInputSingleParams"
														},
														"typeName": {
															"id": 1422,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1421,
																"name": "ISwapRouter.ExactInputSingleParams",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1012,
																"src": "3524:34:10"
															},
															"referencedDeclaration": 1012,
															"src": "3524:34:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ExactInputSingleParams_$1012_storage_ptr",
																"typeString": "struct ISwapRouter.ExactInputSingleParams"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1438,
												"initialValue": {
													"arguments": [
														{
															"id": 1426,
															"name": "tokenIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1319,
															"src": "3649:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1427,
															"name": "USDC",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1285,
															"src": "3684:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1428,
															"name": "usdcSwapPoolFee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1329,
															"src": "3711:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														},
														{
															"arguments": [
																{
																	"id": 1431,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3763:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Serenity_$1572",
																		"typeString": "contract Serenity"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Serenity_$1572",
																		"typeString": "contract Serenity"
																	}
																],
																"id": 1430,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3755:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1429,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3755:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1432,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3755:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1433,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1323,
															"src": "3796:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1434,
															"name": "remainingAmountIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1414,
															"src": "3832:17:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1435,
															"name": "usdcSwapAmountOutMinimum",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1331,
															"src": "3885:24:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "30",
															"id": 1436,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4195:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"expression": {
															"id": 1424,
															"name": "ISwapRouter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1088,
															"src": "3587:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ISwapRouter_$1088_$",
																"typeString": "type(contract ISwapRouter)"
															}
														},
														"id": 1425,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "ExactInputSingleParams",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1012,
														"src": "3587:34:10",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_ExactInputSingleParams_$1012_storage_ptr_$",
															"typeString": "type(struct ISwapRouter.ExactInputSingleParams storage pointer)"
														}
													},
													"id": 1437,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [
														"tokenIn",
														"tokenOut",
														"fee",
														"recipient",
														"deadline",
														"amountIn",
														"amountOutMinimum",
														"sqrtPriceLimitX96"
													],
													"nodeType": "FunctionCall",
													"src": "3587:625:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactInputSingleParams_$1012_memory_ptr",
														"typeString": "struct ISwapRouter.ExactInputSingleParams memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3524:688:10"
											},
											{
												"assignments": [
													1440
												],
												"declarations": [
													{
														"constant": false,
														"id": 1440,
														"mutability": "mutable",
														"name": "amountOut",
														"nameLocation": "4263:9:10",
														"nodeType": "VariableDeclaration",
														"scope": 1452,
														"src": "4255:17:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1439,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4255:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1445,
												"initialValue": {
													"arguments": [
														{
															"id": 1443,
															"name": "params",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1423,
															"src": "4303:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ExactInputSingleParams_$1012_memory_ptr",
																"typeString": "struct ISwapRouter.ExactInputSingleParams memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_ExactInputSingleParams_$1012_memory_ptr",
																"typeString": "struct ISwapRouter.ExactInputSingleParams memory"
															}
														],
														"expression": {
															"id": 1441,
															"name": "swapRouter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1288,
															"src": "4275:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ISwapRouter_$1088",
																"typeString": "contract ISwapRouter"
															}
														},
														"id": 1442,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "exactInputSingle",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1021,
														"src": "4275:27:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_payable$_t_struct$_ExactInputSingleParams_$1012_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct ISwapRouter.ExactInputSingleParams memory) payable external returns (uint256)"
														}
													},
													"id": 1444,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4275:35:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4255:55:10"
											},
											{
												"expression": {
													"id": 1450,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1446,
															"name": "balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1294,
															"src": "4330:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1448,
														"indexExpression": {
															"id": 1447,
															"name": "ephemeralWalletAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1317,
															"src": "4339:22:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4330:32:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1449,
														"name": "amountOut",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1440,
														"src": "4366:9:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4330:45:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1451,
												"nodeType": "ExpressionStatement",
												"src": "4330:45:10"
											}
										]
									},
									"functionSelector": "480a6fdc",
									"id": 1453,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1334,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1333,
												"name": "whenNotPaused",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 162,
												"src": "1636:13:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "1636:13:10"
										},
										{
											"id": 1336,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1335,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 274,
												"src": "1650:12:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "1650:12:10"
										}
									],
									"name": "deposit",
									"nameLocation": "1226:7:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1332,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1317,
												"mutability": "mutable",
												"name": "ephemeralWalletAddress",
												"nameLocation": "1287:22:10",
												"nodeType": "VariableDeclaration",
												"scope": 1453,
												"src": "1279:30:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1316,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1279:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1319,
												"mutability": "mutable",
												"name": "tokenIn",
												"nameLocation": "1357:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1453,
												"src": "1349:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1318,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1349:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1321,
												"mutability": "mutable",
												"name": "totalAmountIn",
												"nameLocation": "1382:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1453,
												"src": "1374:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1320,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1374:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1323,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1414:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1453,
												"src": "1406:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1322,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1406:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1325,
												"mutability": "mutable",
												"name": "ethSwapAmountInMax",
												"nameLocation": "1467:18:10",
												"nodeType": "VariableDeclaration",
												"scope": 1453,
												"src": "1459:26:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1324,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1459:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1327,
												"mutability": "mutable",
												"name": "ethSwapPoolFee",
												"nameLocation": "1502:14:10",
												"nodeType": "VariableDeclaration",
												"scope": 1453,
												"src": "1495:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1326,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1495:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1329,
												"mutability": "mutable",
												"name": "usdcSwapPoolFee",
												"nameLocation": "1561:15:10",
												"nodeType": "VariableDeclaration",
												"scope": 1453,
												"src": "1554:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1328,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1554:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1331,
												"mutability": "mutable",
												"name": "usdcSwapAmountOutMinimum",
												"nameLocation": "1594:24:10",
												"nodeType": "VariableDeclaration",
												"scope": 1453,
												"src": "1586:32:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1330,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1586:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1233:395:10"
									},
									"returnParameters": {
										"id": 1337,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1663:0:10"
									},
									"scope": 1572,
									"src": "1217:3165:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1556,
										"nodeType": "Block",
										"src": "4581:743:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1475,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1471,
																	"name": "charities_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1458,
																	"src": "4600:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint8_$dyn_memory_ptr",
																		"typeString": "uint8[] memory"
																	}
																},
																"id": 1472,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "4600:17:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 1473,
																	"name": "amounts_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1461,
																	"src": "4621:8:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																		"typeString": "uint256[] memory"
																	}
																},
																"id": 1474,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "4621:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4600:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43686172697469657320616e6420616d6f756e747320617272617973206f6620646966666572656e74206c656e6774682e",
															"id": 1476,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4638:51:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5da211d589ddabeb5f1c7f4c549b1470fe9591737edd7afc8ce635c88450bf29",
																"typeString": "literal_string \"Charities and amounts arrays of different length.\""
															},
															"value": "Charities and amounts arrays of different length."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5da211d589ddabeb5f1c7f4c549b1470fe9591737edd7afc8ce635c88450bf29",
																"typeString": "literal_string \"Charities and amounts arrays of different length.\""
															}
														],
														"id": 1470,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4592:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1477,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4592:98:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1478,
												"nodeType": "ExpressionStatement",
												"src": "4592:98:10"
											},
											{
												"assignments": [
													1480
												],
												"declarations": [
													{
														"constant": false,
														"id": 1480,
														"mutability": "mutable",
														"name": "amountsSum",
														"nameLocation": "4709:10:10",
														"nodeType": "VariableDeclaration",
														"scope": 1556,
														"src": "4701:18:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1479,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4701:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1482,
												"initialValue": {
													"hexValue": "30",
													"id": 1481,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4722:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4701:22:10"
											},
											{
												"body": {
													"id": 1500,
													"nodeType": "Block",
													"src": "4779:50:10",
													"statements": [
														{
															"expression": {
																"id": 1498,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1494,
																	"name": "amountsSum",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1480,
																	"src": "4793:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 1495,
																		"name": "amounts_",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1461,
																		"src": "4807:8:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																			"typeString": "uint256[] memory"
																		}
																	},
																	"id": 1497,
																	"indexExpression": {
																		"id": 1496,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1484,
																		"src": "4816:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "4807:11:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4793:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1499,
															"nodeType": "ExpressionStatement",
															"src": "4793:25:10"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1490,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1487,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1484,
														"src": "4753:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1488,
															"name": "amounts_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1461,
															"src": "4757:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																"typeString": "uint256[] memory"
															}
														},
														"id": 1489,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "4757:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4753:19:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1501,
												"initializationExpression": {
													"assignments": [
														1484
													],
													"declarations": [
														{
															"constant": false,
															"id": 1484,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "4746:1:10",
															"nodeType": "VariableDeclaration",
															"scope": 1501,
															"src": "4738:9:10",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1483,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4738:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1486,
													"initialValue": {
														"hexValue": "30",
														"id": 1485,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4750:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "4738:13:10"
												},
												"loopExpression": {
													"expression": {
														"id": 1492,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "4774:3:10",
														"subExpression": {
															"id": 1491,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1484,
															"src": "4774:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1493,
													"nodeType": "ExpressionStatement",
													"src": "4774:3:10"
												},
												"nodeType": "ForStatement",
												"src": "4733:96:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1507,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1503,
																"name": "amountsSum",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1480,
																"src": "4847:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"baseExpression": {
																	"id": 1504,
																	"name": "balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1294,
																	"src": "4861:8:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1506,
																"indexExpression": {
																	"id": 1505,
																	"name": "user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1455,
																	"src": "4870:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "4861:14:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4847:28:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "546f74616c2066696e616c697a6174696f6e20616d6f756e7420746f6f2068696768",
															"id": 1508,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4877:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4369791bf0c646a22574b9ced912dddc331fc6bcea7b07f4a919cfcbbd1d2783",
																"typeString": "literal_string \"Total finalization amount too high\""
															},
															"value": "Total finalization amount too high"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4369791bf0c646a22574b9ced912dddc331fc6bcea7b07f4a919cfcbbd1d2783",
																"typeString": "literal_string \"Total finalization amount too high\""
															}
														],
														"id": 1502,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4839:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1509,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4839:75:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1510,
												"nodeType": "ExpressionStatement",
												"src": "4839:75:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1518,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1512,
																"name": "autoAllocateRemainder",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1463,
																"src": "4932:21:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1517,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1513,
																	"name": "amountsSum",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1480,
																	"src": "4957:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"baseExpression": {
																		"id": 1514,
																		"name": "balances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1294,
																		"src": "4971:8:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 1516,
																	"indexExpression": {
																		"id": 1515,
																		"name": "user",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1455,
																		"src": "4980:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "4971:14:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4957:28:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4932:53:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "546f74616c2066696e616c697a6174696f6e20616d6f756e7420746f6f206c6f772e",
															"id": 1519,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4987:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_62774497d6812f29c82e09e4f22fe80096202ced595d3e77c59a90c91d54d1cb",
																"typeString": "literal_string \"Total finalization amount too low.\""
															},
															"value": "Total finalization amount too low."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_62774497d6812f29c82e09e4f22fe80096202ced595d3e77c59a90c91d54d1cb",
																"typeString": "literal_string \"Total finalization amount too low.\""
															}
														],
														"id": 1511,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4924:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1520,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4924:100:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1521,
												"nodeType": "ExpressionStatement",
												"src": "4924:100:10"
											},
											{
												"body": {
													"id": 1554,
													"nodeType": "Block",
													"src": "5091:183:10",
													"statements": [
														{
															"assignments": [
																1534
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1534,
																	"mutability": "mutable",
																	"name": "transferSuccess",
																	"nameLocation": "5111:15:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1554,
																	"src": "5106:20:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 1533,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "5106:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1548,
															"initialValue": {
																"arguments": [
																	{
																		"baseExpression": {
																			"id": 1539,
																			"name": "charities",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1298,
																			"src": "5151:9:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint8_$_t_address_$",
																				"typeString": "mapping(uint8 => address)"
																			}
																		},
																		"id": 1543,
																		"indexExpression": {
																			"baseExpression": {
																				"id": 1540,
																				"name": "charities_",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1458,
																				"src": "5161:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_uint8_$dyn_memory_ptr",
																					"typeString": "uint8[] memory"
																				}
																			},
																			"id": 1542,
																			"indexExpression": {
																				"id": 1541,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1523,
																				"src": "5172:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "5161:13:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "5151:24:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"baseExpression": {
																			"id": 1544,
																			"name": "amounts_",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1461,
																			"src": "5177:8:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																				"typeString": "uint256[] memory"
																			}
																		},
																		"id": 1546,
																		"indexExpression": {
																			"id": 1545,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1523,
																			"src": "5186:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "5177:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1536,
																				"name": "USDC",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1285,
																				"src": "5136:4:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1535,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 353,
																			"src": "5129:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$353_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1537,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5129:12:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$353",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1538,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 320,
																	"src": "5129:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																"id": 1547,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5129:60:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5106:83:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1550,
																		"name": "transferSuccess",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1534,
																		"src": "5211:15:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "55534443207472616e7366657220746f2063686172697479206661696c65642e",
																		"id": 1551,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5228:34:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_14a8fe9a2dbb1fffa29e0d6e8b0197925f12aed57c256af1a8dca6c479e78c69",
																			"typeString": "literal_string \"USDC transfer to charity failed.\""
																		},
																		"value": "USDC transfer to charity failed."
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_14a8fe9a2dbb1fffa29e0d6e8b0197925f12aed57c256af1a8dca6c479e78c69",
																			"typeString": "literal_string \"USDC transfer to charity failed.\""
																		}
																	],
																	"id": 1549,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "5203:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1552,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5203:60:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1553,
															"nodeType": "ExpressionStatement",
															"src": "5203:60:10"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1529,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1526,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1523,
														"src": "5063:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1527,
															"name": "charities_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1458,
															"src": "5067:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint8_$dyn_memory_ptr",
																"typeString": "uint8[] memory"
															}
														},
														"id": 1528,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "5067:17:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5063:21:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1555,
												"initializationExpression": {
													"assignments": [
														1523
													],
													"declarations": [
														{
															"constant": false,
															"id": 1523,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "5056:1:10",
															"nodeType": "VariableDeclaration",
															"scope": 1555,
															"src": "5048:9:10",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1522,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "5048:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1525,
													"initialValue": {
														"hexValue": "30",
														"id": 1524,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5060:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "5048:13:10"
												},
												"loopExpression": {
													"expression": {
														"id": 1531,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "5086:3:10",
														"subExpression": {
															"id": 1530,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1523,
															"src": "5086:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1532,
													"nodeType": "ExpressionStatement",
													"src": "5086:3:10"
												},
												"nodeType": "ForStatement",
												"src": "5043:231:10"
											}
										]
									},
									"functionSelector": "8de9c372",
									"id": 1557,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1466,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1465,
												"name": "whenNotPaused",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 162,
												"src": "4554:13:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "4554:13:10"
										},
										{
											"id": 1468,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1467,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 274,
												"src": "4568:12:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "4568:12:10"
										}
									],
									"name": "finalize",
									"nameLocation": "4397:8:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1455,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "4423:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1557,
												"src": "4415:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1454,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4415:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1458,
												"mutability": "mutable",
												"name": "charities_",
												"nameLocation": "4453:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 1557,
												"src": "4438:25:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint8_$dyn_memory_ptr",
													"typeString": "uint8[]"
												},
												"typeName": {
													"baseType": {
														"id": 1456,
														"name": "uint8",
														"nodeType": "ElementaryTypeName",
														"src": "4438:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"id": 1457,
													"nodeType": "ArrayTypeName",
													"src": "4438:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint8_$dyn_storage_ptr",
														"typeString": "uint8[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1461,
												"mutability": "mutable",
												"name": "amounts_",
												"nameLocation": "4491:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1557,
												"src": "4474:25:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1459,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "4474:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1460,
													"nodeType": "ArrayTypeName",
													"src": "4474:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1463,
												"mutability": "mutable",
												"name": "autoAllocateRemainder",
												"nameLocation": "4515:21:10",
												"nodeType": "VariableDeclaration",
												"scope": 1557,
												"src": "4510:26:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1462,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4510:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4405:141:10"
									},
									"returnParameters": {
										"id": 1469,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4581:0:10"
									},
									"scope": 1572,
									"src": "4388:936:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1570,
										"nodeType": "Block",
										"src": "5407:46:10",
										"statements": [
											{
												"expression": {
													"id": 1568,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1564,
														"name": "userBalance_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1562,
														"src": "5417:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"baseExpression": {
															"id": 1565,
															"name": "balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1294,
															"src": "5432:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1567,
														"indexExpression": {
															"id": 1566,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1559,
															"src": "5441:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "5432:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5417:29:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1569,
												"nodeType": "ExpressionStatement",
												"src": "5417:29:10"
											}
										]
									},
									"functionSelector": "f8b2cb4f",
									"id": 1571,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBalance",
									"nameLocation": "5339:10:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1560,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1559,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "5358:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1571,
												"src": "5350:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1558,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5350:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5349:14:10"
									},
									"returnParameters": {
										"id": 1563,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1562,
												"mutability": "mutable",
												"name": "userBalance_",
												"nameLocation": "5393:12:10",
												"nodeType": "VariableDeclaration",
												"scope": 1571,
												"src": "5385:20:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1561,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5385:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5384:22:10"
									},
									"scope": 1572,
									"src": "5330:123:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 1573,
							"src": "573:4882:10",
							"usedErrors": []
						}
					],
					"src": "41:5414:10"
				},
				"id": 10
			}
		}
	}
}